@using Hippra.Models.ViewModel
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Services;
@using Hippra.Models.SQL;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService;
@inject IAuthorizationService AuthorizationService

<EditForm Model="@inputModel" OnValidSubmit="@SubmitChangePassword">

    <!-- Account -->
    <div class="settings-title">
        <h4>Email Address you’ve used for sign-in</h4>
    </div>
    <div class="settings-form">
        <div class="settings-row">
            <div class="form-group">
                <label for="">Primary email</label>
                <p class="email-id">@UserEmail</p>
            </div>
        </div>
    </div>
    <!-- Password -->
    <div class="settings-title">
        <h4>Change Password</h4>
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="settings-form">
        <div class="settings-row">
            <div class="form-group">
                <label for="">Current password</label>
                <input placeholder="**********" type="password" class="form-control" @bind="@inputModel.OldPassword">
                <p class="validation-error">   <ValidationMessage For="() => inputModel.OldPassword" /></p>
            </div>
        </div>
        <div class="settings-row">
            <div class="form-group">
                <label for="">New password</label>
                <input id="newPassword" placeholder="" type="password" class="form-control" @bind="@inputModel.NewPassword">
                <p class="validation-error">   <ValidationMessage For="() => inputModel.NewPassword" /></p>
            </div>
            <div class="form-group">
                <label for="">Confirm Password</label>
                <input id="confirmPassword" placeholder="" type="password" class="form-control" @bind="@inputModel.ConfirmPassword">
                <p class="validation-error">   <ValidationMessage For="() => inputModel.ConfirmPassword" /></p>
            </div>
        </div>
    </div>
    <div class="form-submit">
        <button type="submit" class="btn btn-lg btn-green">
            Save Password
        </button>
        <a href="forgotpassword" class="btn btn-lg">Forgot Password</a>
    </div>
</EditForm>
@if (hasError)
{
    <div class="alert alert-danger">Something went wrong. Please try again.</div>
    @foreach (var error in Errors)
    { }
}
<br />

@if (savedSuccessfully)
{
    <div class="alert alert-info">Your Password Has Changed. Signed out. Please <a href="/Identity/Account/Login">Sign In</a> again.</div>
}



@code {
    private PasswordChangeViewModel inputModel { get; set; } = new PasswordChangeViewModel();
    private bool hasError { get; set; } = false;
    private bool savedSuccessfully { get; set; } = false;
    private IList<string> Errors { get; set; } = default;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private string userId { get; set; }
    public string UserEmail { get; set; }
    protected override async Task OnInitializedAsync()
    {

        authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
                UserEmail = user.Claims.FirstOrDefault(s => s.Type == "Email")?.Value;

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

    }

    private async Task SubmitChangePassword()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            hasError = false;

            var result = await pService.UpdatePassword(userId, inputModel.OldPassword, inputModel.NewPassword);
            if (result.IsSuccess)
            {
                savedSuccessfully = true;

                // redirect to relogin page
                // var baseurl = NavigationManager.Uri;
                // baseurl = baseurl.Remove(baseurl.Length - 16);

                // var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.FTHTTPRedirect", baseurl + "FTLogoffRedirect");

                this.StateHasChanged();
            }
            else
            {
                hasError = true;
                Errors = result.Errors;
            }
        }
        else
        {
            hasError = true;
            this.StateHasChanged();
            return;
        }



    }

}
