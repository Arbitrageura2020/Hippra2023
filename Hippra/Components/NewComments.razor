@using Hippra.Models.DTO
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Pages.Common
@using Hippra.Services
@using Hippra.Pages.FTDesign.Features
@using Hippra.Models.Enums
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject IOptions<AppSettings> settings
@inject HippraService hService
@inject IJSRuntime JSRuntime
@inject ProfileService pService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject CommonService commonService;
@inject INotificationsService notificationsService;
<section class="case-comment">
    <div class="case-comment-form">
        <EditForm Model="@newComment" OnValidSubmit="@AddComment" FormName="AddCommentForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="comment-form-box">
                <input type="text" placeholder="Write a Comment" @bind="@newComment.Comment" required></input>
                <button type="submit" disabled="@(!isSubmitted)"> @(isSubmitted ? "Comment" : "Sending ...") </button>
            </div>
            <div class="border">
                <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
            </div>
        </EditForm>
    </div>
    <div class="case-comments">
        @if (dataReady && CommentList != null)
        {
            @foreach (var c in CommentList)
            {
                if (c.ID != EditThis)
                {
                    <div class="case-comment-item">
                        <div class="col vote-bar">
                            <div class="row-md-1 wrap-button-up">
                                <button class="btn vote-button-up bg-light" @onclick="(e => { AddVote(c); })"><span class="fa fa-caret-square-o-up"></span></button>
                                <div class="up-content"><p>This answer is useful.</p></div>
                            </div>
                            <div class="row-md-1" style="color:red">
                                @c.VoteUp
                            </div>
                            <div class="row-md-1" style="color:black">
                                @c.VoteDown
                            </div>
                            <div class="row-md-1 wrap-button-down">
                                <button class="btn vote-button-down bg-light" @onclick="(e => { AddVote(c); })"><span class="fa fa-caret-square-o-down"></span></button>
                                <div class="down-content">This answer is not useful.</div>
                            </div>
                        </div>
                        <div class="comment-author">
                            @if (c.User != null)
                            {
                                <img src="@c.User.ProfileUrl" alt="@c.User.FirstName">
                            }
                            else
                            {
                                <img src="/img/hippra/blank-profile.png" />
                            }
                        </div>
                        <div class="comment-info">
                            <h6>@c.LastUpdatedDate</h6>
                            <p> @c.Comment</p>
                            @if (!string.IsNullOrWhiteSpace(c.imgUrl))
                            {
                                <label class="label-img">
                                    <input type="checkbox">
                                    <img id="caseImg" src="@c.imgUrl" width="20%" height="20%" />
                                </label>
                            }
                            @if (dataReady && c.UserId == userId)
                            {
                                <button class="comment-button" @onclick="(e => { EditComment(c.ID); })">Edit</button>
                                <button class="comment-button" @onclick="(e => { DeleteComment(c); })">Delete</button>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="case-comment-item">
                        <EditForm Model="@editComment" OnValidSubmit="UpdateComment" FormName="EditCommentForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="comment-form-box">
                                <input type="text" placeholder="Write a Comment" @bind="@c.Comment" required></input>
                                <button type="submit">Update Comment</button>
                            </div>
                            <div class="border">
                                @if (!string.IsNullOrWhiteSpace(c.imgUrl))
                                {
                                    <label class="label-img">
                                        <input type="checkbox">
                                        <img id="caseImg" src="@c.imgUrl" width="20%" height="20%" />
                                    </label>
                                    <div class="btn btn-outline-danger" @onclick="(e => { DeleteFile(c); })">
                                        delete
                                    </div>
                                }
                                else
                                {
                                    <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="editComment.imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
                                    @* <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload> *@

                                }
                   
                            </div>
                        </EditForm>
                    </div>
                }
            }
        }

    </div>
</section>

@code {
    [Parameter]
    public int caseId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }

    public List<CaseComment> CommentList { get; set; }
    [Parameter]
    public bool isOpened { get; set; }
    private CaseComment newComment = new CaseComment();
    private CaseComment editComment = new CaseComment();
    private int EditThis = -1;
    private string fileName;
    private string imgUrl;
    private bool isSubmitted = true;
    private string[] imgUrls;
    private Case caseInfo = new Case();
    private int lastHistoryID = -1;
    private bool dataReady = false;
    private string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        authState = await authenticationStateTask;
        var user = authState.User;



        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        caseInfo = await hService.GetCase(caseId);
        CommentList = await hService.GetCommentsNoTracking(caseId);

        this.StateHasChanged();
        dataReady = true;
        // OpenComment();
    }

    public async Task EditComment(int ID)
    {
        EditThis = ID;
        editComment = CommentList.Where(x => x.ID == ID).FirstOrDefault();
        this.StateHasChanged();
    }

    private async Task UpdateComment()
    {
        isSubmitted = false;
        if (!string.IsNullOrWhiteSpace(imgUrl))
        {
            editComment.imgUrl = imgUrl;
        }

        await hService.UpdateComment(EditThis, editComment.Comment, editComment.imgUrl);

        isSubmitted = true;


        EditThis = -1;
        newComment.Comment = "";

        imgUrl = "";
        newComment.imgUrl = "";
        newComment.ProfileUrl = "";
        isOpened = true;
        this.StateHasChanged();
    }

    public async Task DeleteComment(CaseComment c)
    {

        isSubmitted = false;



        await hService.DeleteComment(c.ID);

        isSubmitted = true;

        CommentList = await hService.GetCommentsNoTracking(caseId);

        await commonService.addToHistoryComment("deleted a comment on", caseInfo);

        this.StateHasChanged();
    }
    public async Task DeleteFile(CaseComment c)
    {
        c.imgUrl = "";
    }

    private async Task AddComment()
    {
        isSubmitted = false;
        CaseComment addComment = new CaseComment();

        await hService.AddComment(caseId, newComment.Comment, userId, imgUrl);



        newComment.Comment = "";
        CommentList = await hService.GetCommentsNoTracking(caseId);

        imgUrl = "";
        isOpened = true;
        await commonService.addToHistoryComment("added a comment on", caseInfo);


        //add notification
        AddNotificationDto request = new AddNotificationDto()
            {
                SenderUserID = userId,
                Type = NotificationType.AddedComment,
                PostID = caseId
            };

        await notificationsService.AddNotification(request);
        isSubmitted = true;

        this.StateHasChanged();
    }

    private async Task AddVote(CaseComment c)
    {
        // bool isVoted = await hService.CheckVoter(c.PosterId, userId, c.ID);
        // if (!isVoted)
        // {
        //     if (updateType == -3)
        //     {
        //         addComment.VoteUp = c.VoteUp + 1;
        //         await addToHistory("added an up vote on", c);
        //         //   await addNotification();
        //     }
        //     else
        //     {
        //         addComment.VoteDown = c.VoteDown + 1;
        //         await addToHistory("added a down vote on", c);
        //         //  await addNotification();
        //     }
        //     Vote newVote = new Vote();
        //     newVote.ID = 0;
        //     newVote.CID = c.ID;
        //     newVote.VoteType = updateType;
        //     newVote.PosterID = c.PosterId;
        //     newVote.VoterID = userId;
        //     newVote.VoteDate = DateTime.Now;
        //     await hService.AddVote(newVote);
        //     await hService.EditComment(addComment, updateType);
        // }
    }
}
