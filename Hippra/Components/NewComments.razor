@using Hippra.Models.DTO
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Pages.Common
@using Hippra.Services
@using Hippra.Pages.FTDesign.Features
@using Hippra.Models.Enums
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject IOptions<AppSettings> settings
@inject HippraService hService
@inject IJSRuntime JSRuntime
@inject ProfileService pService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject CommonService commonService;
@inject INotificationsService notificationsService;
@inject ICaseService caseService;
<section class="case-comment">
    <div class="case-comment-form editing-comment">
        <EditForm Model="@newComment" OnValidSubmit="@AddComment" FormName="AddCommentForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="comment-form-box">
                <input type="text" placeholder="Write a Comment" @bind="@newComment.Comment" required></input>
                <div class="attached-files">
                    @if (AssociatedFiles != null)
                    {
                        @foreach (var document in AssociatedFiles)
                        {
                            <div class="files">
                                <p>@document.Name</p>
                            </div>
                        }
                    }
                </div>
                <div class="comment-btns">
                    <button class="attach-btn" id="uploadFileButton" type="button" @onclick="OpenFilePicker">
                        <img src="/frontend/Dashboard/img/icons/attachment.svg" alt="">
                        Attach files
                    </button>
                    <InputFile id="uploadFileInput" hidden="" type="file" OnChange="@HandleUploadProf" @ref="_filePicker" multiple />
                    <div class="last-two-btns">
                        <button>Cancel</button>
                        <button type="submit" disabled="@(!isSubmitted)"> @(isSubmitted ? "Post" : "Sending ...") </button>
                    </div>
                </div>

            </div>
            @*        <div class="border">
            <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
            </div> *@
        </EditForm>
    </div>
    <div class="case-comments">
        @if (dataReady && CommentList != null)
        {
            @foreach (var comment in CommentList)
            {
                if (comment.ID != EditCommentId)
                {
                    <div class="case-comment-item">
                        <div class="comment-user-info">
                            <div class="comment-author">
                                @if (comment.User != null)
                                {
                                    <img src="@comment.User.ProfileUrl" alt="@comment.User.FirstName">
                                }
                                else
                                {
                                    <img src="/img/hippra/blank-profile.png" />
                                }
                            </div>
                            <div class="comment-info">
                                <div>

                                    @if (comment.User != null)
                                    {
                                        <h6>
                                            <span>@comment.User.FullName</span>
                                        </h6>
                                        <h6 class="light-text">@comment.User.MedicalSpecialty</h6>
                                    }
                                    else
                                    {
                                        <h6>
                                            <span>Anonymus</span>
                                        </h6>
                                    }


                                </div>
                                <h6 class="light-text">2 Weeks Ago</h6>
                            </div>
                        </div>
                        @if (comment.UserId == userId)
                        {
                            <button class="comment-edit" @onclick="(e => { EditComment(comment.ID); })">
                                <img src="/frontend/Dashboard/img/icons/edit-icon.svg" alt="">
                                Edit @comment.ID
                            </button>
                        }
                        else
                        {
                            <button class="comment-edit" @onclick="(e => { ReportComment(comment.ID); })">
                                <img src="/frontend/Dashboard/img/icons/report-icon.svg" alt="">
                                Report
                            </button>
                        }
                        <p>
                            @comment.Comment
                        </p>
                        <div class="attached-files">
                            @foreach (var document in comment.Files)
                            {
                                <div class="files">
                                    <p><a href="@document.FileLink">@document.FileName</a></p>
                                </div>
                            }
                        </div>
                        @comment.VoteUp
                        @if (comment.UserId != userId)
                        {
                            <button class="upvote-btn" @onclick="(e => { AddVote(comment); })">
                                <img src="/frontend/Dashboard/img/icons/upward-arrow-hollow.svg" alt="">
                                Upvote
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="case-comment-item">
                        <EditForm Model="@editComment" OnValidSubmit="UpdateComment" FormName="EditCommentForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="comment-form-box">
                                <input type="text" placeholder="Write a Comment" @bind="@comment.Comment" required></input>
                                <div class="attached-files">
                                    @if (comment.Files != null)
                                    {
                                        @foreach (var document in comment.Files)
                                        {
                                            <div class="files">
                                                <p>@document.FileName <button @onclick="(e => { DeleteFile(document.ID); })"> delete file</button>

                                            </p>
                                            </div>
                                        }
                                    }
                                    @if (AssociatedFiles != null)
                                    {
                                        @foreach (var document in AssociatedFiles)
                                        {
                                            <div class="files">
                                                <p>@document.Name</p>
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="comment-btns">
                                    <button class="attach-btn" id="uploadFileButton" type="button" @onclick="OpenFilePicker">
                                        <img src="/frontend/Dashboard/img/icons/attachment.svg" alt="">
                                        Attach files
                                    </button>
                                    <InputFile id="uploadFileInput" hidden="" type="file" OnChange="@HandleUploadProf" @ref="_filePicker" multiple />
                                    <div class="last-two-btns">
                                        <button @onclick="(e => { EditCommentId=-1; })">Cancel @comment.ID</button>
                                        <button type="submit"> Update Comment </button>
                                    </div>
                                </div>
                            </div>
                        
                        </EditForm>
                    </div>
                }
            }
        }

    </div>
</section>

@code {
    [Parameter]
    public int caseId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }

    public List<CaseComment> CommentList { get; set; }
    [Parameter]
    public bool isOpened { get; set; }
    private CaseComment newComment = new CaseComment();
    private CaseComment editComment = new CaseComment();
    private long EditCommentId = -1;

    private bool isSubmitted = true;

    private Case caseInfo = new Case();
    private bool dataReady = false;
    private string userId { get; set; }
    private List<IBrowserFile> AssociatedFiles = new();
    private long maxFileSize = 1024 * 1024 * 100;
    private int maxAllowedFiles = 3;
    protected override async Task OnInitializedAsync()
    {

        authState = await authenticationStateTask;
        var user = authState.User;



        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        caseInfo = await hService.GetCase(caseId);
        CommentList = await hService.GetCommentsNoTracking(caseId);

        this.StateHasChanged();
        dataReady = true;
        // OpenComment();
    }

    public async Task EditComment(long ID)
    {
        EditCommentId = ID;
        editComment = CommentList.Where(x => x.ID == ID).FirstOrDefault();
        AssociatedFiles.Clear();
        this.StateHasChanged();
    }

    public async Task ReportComment(long ID)
    {
        // EditThis = ID;
        // editComment = CommentList.Where(x => x.ID == ID).FirstOrDefault();
        // this.StateHasChanged();
    }

    private async Task UpdateComment()
    {
        isSubmitted = false;


       var saveResult= await hService.UpdateComment(EditCommentId, editComment.Comment, editComment.imgUrl);

        if (saveResult.IsSuccess)
        {
            if (AssociatedFiles != null)
            {
                foreach (var file in AssociatedFiles)
                {
                    var c = file.OpenReadStream(maxFileSize);
                    await caseService.SaveCaseCommentFile(c, saveResult.EntityId, file.Name, file.ContentType, userId);
                }

            }
        }

        isSubmitted = true;


        EditCommentId = -1;
        newComment.Comment = "";
        AssociatedFiles.Clear();

        newComment.imgUrl = "";
        newComment.ProfileUrl = "";
        isOpened = true;
        this.StateHasChanged();
    }

    public async Task DeleteComment(CaseComment c)
    {

        isSubmitted = false;



        await hService.DeleteComment(c.ID);

        isSubmitted = true;

        CommentList = await hService.GetCommentsNoTracking(caseId);

        await commonService.addToHistoryComment("deleted a comment on", caseInfo);

        this.StateHasChanged();
    }

    public async Task DeleteFile(long commentFileId)
    {
       // c.imgUrl = "";
    }

    private async Task AddComment()
    {
        isSubmitted = false;
        CaseComment addComment = new CaseComment();

        var saveResult = await hService.AddComment(caseId, newComment.Comment, userId);

        if (saveResult.IsSuccess)
        {
            if (AssociatedFiles != null)
            {
                foreach (var file in AssociatedFiles)
                {
                    var c = file.OpenReadStream(maxFileSize);
                    await caseService.SaveCaseCommentFile(c, saveResult.EntityId, file.Name, file.ContentType, userId);
                }

            }
        }




        newComment.Comment = "";
        CommentList = await hService.GetCommentsNoTracking(caseId);

        isOpened = true;
        await commonService.addToHistoryComment("added a comment on", caseInfo);


        //add notification
        AddNotificationDto request = new AddNotificationDto()
            {
                SenderUserID = userId,
                Type = NotificationType.AddedComment,
                PostID = caseId
            };

        await notificationsService.AddNotification(request);
        AssociatedFiles.Clear();
        isSubmitted = true;

        this.StateHasChanged();
    }

    private InputFile _filePicker;
    private async Task OpenFilePicker()
        => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call",
            _filePicker.Element);

    private async Task OpenFileClick()
    {
        await JSRuntime.InvokeVoidAsync("HandleCommentUploadButtonClick");
    }

    public async Task HandleUploadProf(InputFileChangeEventArgs e)
    {
        //     if (UserProfile.ProfileUrl != null)
        //     {
        //         var deleteFile = UserProfile.ProfileUrl.Substring(57, UserProfile.ProfileUrl.Length - 57);
        //         var response = await hService.DeleteImage(deleteFile);
        //     }
        //     UserProfile.ProfileUrl = await HandleFileSelected(e);
        //     DisplayProfileUrl = UserProfile.ProfileUrl;
        //     try
        //     {
        //         await profileService.UpdateUserProfilePicture(userId, DisplayProfileUrl);
        //     }
        //     catch (Exception exc)
        //     {

        //         this.StateHasChanged();
        //         // return;
        //     }
        //     ;

        AssociatedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                AssociatedFiles.Add(file);
            }
            catch (Exception ex)
            {

            }
        }

        StateHasChanged();
    }

    public async Task<string> HandleFileSelected(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        var format = "image/png";

        // foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        // {
        //     if (imageFile == null || imageFile.Size < 100)
        //     {
        //         StateHasChanged();
        //         return "";
        //     }

        //     if (imageFile.Name.Contains("png") ||
        //         imageFile.Name.Contains("jpg") ||
        //         imageFile.Name.Contains("jpeg") ||
        //         imageFile.Name.Contains("gif"))
        //     {
        //         //                string extension = imageFile.Name.Remove(0, 6);
        //         guid = Guid.NewGuid().ToString();
        //         //fileName = fileName + guid + "." + extension;
        //         fileName = fileName + guid + imageFile.Name;
        //         await hService.UploadImgToAzureAsync(imageFile.OpenReadStream(), fileName);

        //         return savedImgUrl + fileName;
        //     }
        //     else
        //     {

        //         return "";
        //     }

        // }
        return "";
    }

    private async Task AddVote(CaseComment c)
    {
        bool isVoted = await hService.CheckVoter(c.PosterId, userId, c.ID);
        if (!isVoted)
        {
            // addComment.VoteUp = c.VoteUp + 1;
            // await addToHistory("added an up vote on", c);
            // //   await addNotification();

            CaseCommentVote newVote = new CaseCommentVote();
            newVote.ID = 0;
            newVote.CommentId = c.ID;
            newVote.PosterID = c.PosterId;
            newVote.UserId = userId;
            newVote.VoteDate = DateTime.Now;
            await hService.AddVote(newVote);
        }
    }


}
