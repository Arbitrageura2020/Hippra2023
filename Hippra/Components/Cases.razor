@using Hippra.Extensions
@using Hippra.Models.DTO
@using Hippra.Models.Enums
@using Hippra.Models.SQL
@using Hippra.Models.ViewModel
@using Hippra.Services
@inject IJSRuntime JSRuntime
@inject HippraService hService

<div class="main-header">
    <div class="heading">
        <h3>CLINICAL KNOWLEDGE SHARING</h3>
    </div>

    <div class="heading-actions">
        <h4>Sort By View:</h4>
        <!-- Recent checkbox and label -->
        <div class="heading-action-item">
            <input class="filter-checkbox dashboard" type="checkbox" id="dashboard-recent" @onclick="(() => this.SortByRecent=true)">
            <label for="dashboard-recent" class="checkbox-tab">Recent</label>
        </div>
        <!-- Trending checkbox and label -->
        <div class="heading-action-item">
            <input class="filter-checkbox dashboard" type="checkbox" id="dashboard-trending" @onclick="(() => this.SortByRecent=false)">
            <label for="dashboard-trending" class="checkbox-tab">Trending</label>
        </div>
    </div>

</div>
<section class="dashboard-content">
    <div class="main-articles inside-scroll" style="max-height: 1000px; padding-bottom: 20px;">
        <!-- Clinical Knowledge Loop Here -->
        @if (IsLoading)
        {
            <p><em>Loading ...</em></p>
        }
        else
        {
            @if (Count > 0)
            {

                foreach (var c in SearchResults)
                {
                    <div class="main-article-item">
                        <div class="article-date">
                            <p>@c.DateLastUpdated.ToShortDateString()</p>
                        </div>
                        <div class="article-top">
                            <div class="article-caption">
                                <a href=@($"/viewcase/{c.ID}")>@c.Topic</a>
                            </div>
                            <div class="article-actions">
                                <button class="article-action-btn">
                                    <img src="./img/icons/message-green.svg" alt="">
                                </button>
                                <button class="article-action-btn">
                                    <img src="./img/icons/bookmark-green.svg" alt="">
                                </button>
                                <button class="article-action-btn">
                                    <img src="./img/icons/three-dots-green.svg" alt="">
                                </button>
                            </div>
                        </div>
                        <div class="article-content">
                            <p>
                                @c.Description.Left(200) ...
                            </p>
                        </div>
                        <div class="article-bot">
                            <div class="article-author">
                                @if (c.User != null)
                                {
                                    <img src="@c.User.ProfileUrl" alt="@c.User.FirstName">
                                }
                                else
                                {
                                    <img src="/img/hippra/blank-profile.png" />
                                }
                                <div class="article-author-info">
                                    <h6>@c.User.FullName</h6>
                                    <p>@EnumsHelper.GetDisplayName(@c.User.MedicalSpecialty)</p>
                                </div>
                            </div>
                            <div class="article-bot-actions">
                                <a href=@($"/viewcase/{c.ID}")><img src="./img/icons/arrow-right-green.svg" alt=""></a>
                            </div>
                        </div>
                    </div>

                }
            }
            else
            {
                <div>No Case Found. Try Modify Search Criteria or Filter.</div>
            }

        }


    </div>
</section>

@code {
    private bool IsLoading = false;
    private string searchString { get; set; } = "";
    private IList<CaseViewModel> SearchResults { get; set; } = new List<CaseViewModel>();

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 10;
    public int TotalPages => (int)Math.Ceiling(decimal.Divide(Count, PageSize));

    public bool SortByRecent = true;
    protected override async Task OnInitializedAsync()
    {
        await GetSearchResults();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     //if (firstRender)
    //     //{
    //     await JSRuntime.InvokeVoidAsync("handlePageScrollable");
    //     await JSRuntime.InvokeVoidAsync("InitCasePage");
    //     //}
    // }


    private async Task GetSearchResults()
    {
        // SearchResults = new List<ParsedCase>();
       
        // int tSubCategory = -1;
        // int tPriority = -1;
        // if (!string.IsNullOrEmpty(filters.SubCategory))
        // {
        //     tSubCategory = Int32.Parse(filters.SubCategory);
        // }
        // if (!string.IsNullOrEmpty(filters.Priority))
        // {
        //     tPriority = Int32.Parse(filters.Priority);
        // }

        // List<int> caseListContainTag = new List<int>();
        // if (filters.showTagOnly)
        // {
        //     caseListContainTag = await hService.GetCasesIdByTag(searchString);
        // }

        // if (actionOptions == 0)
        // {
        SearchResults = await hService.GetAllCases(CaseType.ClinicalKnowledge);

        //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, -1);
        //Count = await hService.GetCaseCount();
        // }
        // else
        // {
        //     var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, userId, caseListContainTag);
        //     cases = searchResults.Cases;
        //     Count = searchResults.TotalCount;
        //     //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, usr.PublicId);
        //     //Count = await hService.GetMyCaseCount(usr.PublicId);
        // }


        // SearchResults = cases.Select(i => new ParsedCase()
        //     {
        //         ID = i.ID,
        //         Topic = i.Topic,
        //         Description = i.Description,
        //         DateCreated = i.DateCreated,
        //         DateLastUpdated = i.DateLastUpdated,
        //         Priority = Enums.GetDisplayName(i.ResponseNeeded),
        //         ParsedCategory = Enums.GetDisplayName(i.MedicalCategory),
        //         ParsedSubCategory = i.MedicalSubCategory!.Name,
        //         PosterID = i.PosterID,
        //         PosterName = i.PosterName,
        //         PosterSpecialty = i.PosterSpecialty,
        //         User=i.User
        //     }).ToList();

    
        IsLoading = false;

    }
}
