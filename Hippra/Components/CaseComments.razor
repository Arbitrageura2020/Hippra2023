@using Hippra.Models.DTO
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Models.ViewModel
@using Hippra.Services
@using Hippra.Pages.FTDesign.Features
@using Hippra.Models.Enums
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject IOptions<AppSettings> settings
@inject IJSRuntime JSRuntime
@inject ProfileService pService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components
@inject IAuthorizationService AuthorizationService
@inject IHistoryLogService historyLogService;
@inject INotificationsService notificationsService;
@inject ICaseService caseService;
@inject IDialogService dialogService

<section class="case-comment">
    <div class="case-comment-form editing-comment">
        <EditForm Model="@newComment" OnValidSubmit="@AddComment" FormName="AddCommentForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="comment-form-box">
                <input type="text" placeholder="Write a Comment" @bind="@newComment.Comment" required></input>
                <div class="attached-files">
                    @if (NewCaseUploadedFiles != null)
                    {
                        @foreach (var document in NewCaseUploadedFiles)
                        {
                            <div class="files">
                                <p>@document.Name</p>
                                <button @onclick="(e => { DeleteUploadedFile(document); })"> <img src="/img/icons/close.svg" alt=""></button>
                            </div>
                        }
                    }
                </div>
                <div class="comment-btns">
                    <button class="attach-btn" id="uploadFileButton" type="button" @onclick="OpenFilePicker">
                        <img src="/img/" alt="">
                        Attach files
                    </button>
                    <InputFile id="uploadFileInput" hidden="" type="file" OnChange="@HandleUploadFileNew" @ref="_filePicker" multiple />
                    <div class="last-two-btns">
                        <button type="button" @onclick="CancelNewComment">Cancel</button>
                        <button type="submit" disabled="@(!isSubmitted)"> @(isSubmitted ? "Post" : "Saving ...") </button>
                    </div>
                </div>

            </div>
        </EditForm>
    </div>

    <div class="case-comments">
        @if (dataReady && CommentList != null)
        {
            @foreach (var comment in CommentList)
            {
                if (comment.ID != EditCommentId)
                {
                    <div class="case-comment-item">
                        <div class="comment-user-info">
                            <div class="comment-author">

                                <img src="@comment.PosterImage" alt="@comment.PosterName">

                            </div>
                            <div class="comment-info">
                                <div>
                                    <h6>
                                        <span>@comment.PosterName</span>
                                    </h6>
                                    <h6 class="light-text">@comment.PosterSpeciality</h6>

                                </div>
                                <h6 class="light-text">@comment.TimeDifferenceText</h6>
                            </div>
                            <div class="comment-buttons">
                                @if (comment.PosterId == userId)
                                {

                                    <button class="comment-edit" @onclick="(e => { EditComment(comment.ID); })">
                                        <img src="/img/icons/edit-icon.svg" alt="">
                                        Edit
                                    </button>

                                    <button class="comment-edit" @onclick="(e => { DeleteComment(comment); })">
                                        <img src="/img/icons/delete-icon.svg" alt="">
                                        Delete
                                    </button>

                                }

                                <button class="comment-edit" @onclick="(e => { EditInDialog(comment.ID); })">
                                    <img src="/img/icons/report-icon.svg" alt="">
                                    Report
                                </button>

                            </div>
                        </div>

                        <p>
                            @comment.Comment
                        </p>
                        <div class="attached-files">
                            @foreach (var document in comment.Files)
                            {
                                <div class="files">
                                    <p><a href="/Files/DownloadCommentFile/@document.ID">@document.FileName</a></p>
                                </div>
                            }
                        </div>
                        @*  @comment.Votes Upvotes *@
                        @if (comment.PosterId != userId)
                        {
                            if (comment.VotedByCurrentUser)
                            {
                                <button class="upvote-btn" @onclick="(e => { RemoveVote(comment); })">
                                    <img src="/img/icons/upward-arrow-clicked.svg" alt="">
                                    Upvote
                                </button>
                            }
                            else
                            {
                                <button class="upvote-btn" @onclick="(e => { AddVote(comment); })">
                                    <img src="/img/icons/upward-arrow-hollow.svg" alt="">
                                    Upvote
                                </button>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="case-comment-item">
                        <EditForm Model="@editComment" OnValidSubmit="UpdateComment" FormName="EditCommentForm">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="comment-form-box">
                                <textarea type="text" placeholder="Write a Comment" class="form-control textarea" @bind="@comment.Comment" required rows="3"></textarea>

                                <div class="attached-files">
                                    @if (comment.Files != null)
                                    {
                                        @foreach (var document in comment.Files)
                                        {
                                            <div class="files">
                                                <p>
                                                    @document.FileName
                                                </p>
                                                <button @onclick="(e => { DeleteSavedFile(comment, document); })">    <img src="/img/icons/close.svg" alt=""></button>
                                            </div>
                                        }
                                    }
                                    @if (EditCaseUploadedFiles != null)
                                    {
                                        @foreach (var document in EditCaseUploadedFiles)
                                        {
                                            <div class="files">
                                                <p>@document.Name</p>
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="comment-btns">
                                    <button class="attach-btn" id="uploadFileButton" type="button" @onclick="OpenFilePickerEdit">
                                        <img src="/img/icons/attachment.svg" alt="">
                                        Attach files
                                    </button>
                                    <InputFile id="uploadFileInputEdit" hidden="" type="file" OnChange="@HandleUploadFileEdit" @ref="_filePickerEdit" multiple />
                                    <div class="last-two-btns">
                                        <button @onclick="CancelEditComment" >Cancel </button>
                                        <button type="submit" disabled="@(!isSubmitted)"> @(isUpdated ? "Update Comment" : "Saving ...")  </button>
                                    </div>
                                </div>
                            </div>

                        </EditForm>
                    </div>
                }
            }
        }

    </div>
</section>

@code {
    [Parameter]
    public long caseId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }

    public List<CaseCommentViewModel> CommentList { get; set; }
    [Parameter]
    public bool isOpened { get; set; }
    private CaseCommentViewModel newComment = new CaseCommentViewModel();
    private CaseCommentViewModel editComment = new CaseCommentViewModel();
    private long EditCommentId = -1;

    private bool isSubmitted = true;
    private bool isUpdated = true;
    private Case caseInfo = new Case();
    private bool dataReady = false;
    private string userId { get; set; }
    private List<IBrowserFile> NewCaseUploadedFiles = new();
    private List<IBrowserFile> EditCaseUploadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 100;
    private int maxAllowedFiles = 3;
    protected override async Task OnInitializedAsync()
    {

        authState = await authenticationStateTask;
        var user = authState.User;



        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        //  caseInfo = await hService.GetCase(caseId);
        CommentList = await caseService.GetCommentsNoTracking(caseId, userId);

        this.StateHasChanged();
        dataReady = true;
        // OpenComment();
    }

    public async Task EditComment(long ID)
    {
        isUpdated = true;
        EditCommentId = ID;
        editComment = CommentList.Where(x => x.ID == ID).FirstOrDefault();
        EditCaseUploadedFiles.Clear();
        this.StateHasChanged();
    }

    public async Task ReportComment(long ID)
    {
        // EditThis = ID;
        // editComment = CommentList.Where(x => x.ID == ID).FirstOrDefault();
        // this.StateHasChanged();
    }

    private async Task UpdateComment()
    {
        isUpdated = false;


        var saveResult = await caseService.UpdateComment(EditCommentId, editComment.Comment);

        if (saveResult.IsSuccess)
        {
            if (EditCaseUploadedFiles != null)
            {
                foreach (var file in EditCaseUploadedFiles)
                {
                    var c = file.OpenReadStream(maxFileSize);
                    await caseService.SaveCaseCommentFile(c, saveResult.EntityId, file.Name, file.ContentType, userId);
                }

            }

            var editedCaseItem = await caseService.GetComment(saveResult.EntityId, userId);
            if (editedCaseItem != null)
            {
                var oldItem = CommentList.Where(x => x.ID == EditCommentId).FirstOrDefault();
                if (oldItem != null)
                {
                    CommentList.Remove(oldItem);
                    CommentList.Add(editedCaseItem);
                }
            }

            EditCommentId = -1;
            editComment.Comment = "";
            EditCaseUploadedFiles.Clear();

        }

        isSubmitted = true;
        this.StateHasChanged();
    }

    private async Task CancelEditComment()
    {
        isUpdated = true;
        EditCommentId = -1;
        editComment.Comment = "";
        EditCaseUploadedFiles.Clear();
    }

    public async Task DeleteComment(CaseCommentViewModel commentObject)
    {
        var dialogParameters = new DialogParameters
            {
                Title = "Delete Comment",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };

        var dialog = await dialogService.ShowConfirmationAsync(
            "Are you sure you want to delete this comment?",
            "Yes",
            "No",
            "Delete Comment?");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            isSubmitted = false;

            var deleteResult = await caseService.DeleteComment(commentObject.ID, userId);

            isSubmitted = true;

            if (deleteResult)
            {
                CommentList.Remove(commentObject);
                // CommentList = await hService.GetCommentsNoTracking(caseId);
            }

            await historyLogService.addToHistoryComment("deleted a comment on", caseInfo);

            this.StateHasChanged();
        }

    }

    public async Task DeleteSavedFile(CaseCommentViewModel commentObject, CaseCommentFile file)
    {

        var result = await caseService.DeleteCommentFile(file.ID, userId);



        if (result.IsSuccess)
        {
            commentObject.Files.Remove(file);
            // CommentList = await hService.GetCommentsNoTracking(caseId);
        }

        this.StateHasChanged();
    }

    public async Task DeleteUploadedFile(IBrowserFile file)
    {
        NewCaseUploadedFiles.Remove(file);
        this.StateHasChanged();
    }

    private async Task AddComment()
    {
        isSubmitted = false;
        CaseComment addComment = new CaseComment();

        var saveResult = await caseService.AddComment(caseId, newComment.Comment, userId);

        if (saveResult.IsSuccess)
        {
            if (NewCaseUploadedFiles != null)
            {
                foreach (var file in NewCaseUploadedFiles)
                {
                    var c = file.OpenReadStream(maxFileSize);
                    await caseService.SaveCaseCommentFile(c, saveResult.EntityId, file.Name, file.ContentType, userId);
                }

            }

            var newCaseItem = await caseService.GetComment(saveResult.EntityId, userId);
            if (newCaseItem != null)
            {
                CommentList.Add(newCaseItem);
            }
            newComment.Comment = "";
            NewCaseUploadedFiles.Clear();
            //  CommentList = await hService.GetCommentsNoTracking(caseId);

            await historyLogService.addToHistoryComment("added a comment on", caseInfo);


            //add notification
            AddNotificationDto request = new AddNotificationDto()
                {
                    SenderUserID = userId,
                    Type = NotificationType.AddedComment,
                    PostID = caseId
                };

            await notificationsService.AddNotification(request);

            isSubmitted = true;

            this.StateHasChanged();
        }
    }

    private async Task CancelNewComment()
    {
        newComment.Comment = "";
        NewCaseUploadedFiles.Clear();
    }

    private InputFile _filePicker;
    private async Task OpenFilePicker()
        => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call",
            _filePicker.Element);

    private InputFile _filePickerEdit;
    private async Task OpenFilePickerEdit()
        => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call",
            _filePickerEdit.Element);

    // private async Task OpenFileClick()
    // {
    //     await JSRuntime.InvokeVoidAsync("HandleCommentUploadButtonClick");
    // }

    public async Task HandleUploadFileNew(InputFileChangeEventArgs e)
    {
        NewCaseUploadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                NewCaseUploadedFiles.Add(file);
            }
            catch (Exception ex)
            {

            }
        }

        StateHasChanged();
    }

    public async Task HandleUploadFileEdit(InputFileChangeEventArgs e)
    {
        EditCaseUploadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                EditCaseUploadedFiles.Add(file);
            }
            catch (Exception ex)
            {

            }
        }

        StateHasChanged();
    }


    private async Task AddVote(CaseCommentViewModel comment)
    {
        bool isVoted = await caseService.CheckVote(userId, comment.ID);
        if (!isVoted)
        {
            var result = await caseService.AddVote(userId, comment.ID);
            if (result)
            {
                comment.VotedByCurrentUser = true;
                this.StateHasChanged();
                //add notification
                AddNotificationDto request = new AddNotificationDto()
                    {
                        SenderUserID = userId,
                        Type = NotificationType.AddedUpVote,
                        PostID = caseId,
                        CommentId = comment.ID
                    };

                await notificationsService.AddNotification(request);
            }
        }
    }

    private async Task RemoveVote(CaseCommentViewModel comment)
    {
        bool isVoted = await caseService.CheckVote(userId, comment.ID);
        if (isVoted)
        {
            var result = await caseService.AddVote(userId, comment.ID);
            if (result)
            {
                comment.VotedByCurrentUser = false;
                this.StateHasChanged();
            }
        }
    }


    // Open the dialog for the item
    private async Task EditInDialog(long commentId)
    {
        var parameters = new DialogParameters
            {
                Title = "Submit a report",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true
            };
        var model = new ReportCommentViewModel() { CommentId = commentId };
        var dialog = await dialogService.ShowDialogAsync<ReportComment>(model, parameters);
        var dialogResult = await dialog.Result;
        await HandleEditConcertDialogResult(dialogResult, commentId);
    }

    // Handle the result of the edit dialog/panel
    private async Task HandleEditConcertDialogResult(DialogResult result, long commentId)
    {
        // If cancelled, return
        if (result.Cancelled)
        {
            return;
        }

        // If the data is not null, update the item
        if (result.Data is not null)
        {
            var updatedItem = result.Data as ReportCommentViewModel;
            if (updatedItem is null)
            {
                return;
            }

            var serviceCassResult = caseService.ReportComment(userId, commentId, caseId, updatedItem.ReportText);
        }
    }

}
