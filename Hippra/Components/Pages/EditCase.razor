@page "/editcase/{caseId:int}"
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.Text.RegularExpressions
@using Microsoft.FluentUI.AspNetCore.Components
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
		@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IAuthorizationService AuthorizationService
@inject CommonService commonService;
@inject IHistoryLogService historyLogService;
@inject ICaseService caseService;
<div class="container">
    <!-- Ask 4 -->
    <div id="post-ask-4-content" class="post-tab-content">
        <div class="content-left">
            <!-- Ask-4 Form -->
            <section class="dashboard-content">
                <div class="content-form inside-scroll">
                    <EditForm Model="@CaseModel" OnValidSubmit="@UpdateCase">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <h3>Case Title *</h3>

                            <InputText class="form-control" type="text" placeholder="Title" @bind-Value="@CaseModel.Topic" />
                            <ValidationMessage For="() => CaseModel.Topic" />
                        </div>
                        <div class="form-group">
                            <h3>Type of case *</h3>
                            <InputRadioGroup @bind-Value="@CaseModel.Type">
                                @foreach (CaseType i in Enum.GetValues(typeof(CaseType)))
                                {
                                    <div>
                                        <label>
                                            <InputRadio Value="@i" />
                                            @EnumsHelper.GetDisplayName(i)
                                        </label>
                                    </div>
                                }
                            </InputRadioGroup>

                        </div>
                        <div class="form-group">
                            <h3>Description *</h3>
                            <textarea class="form-control textarea" placeholder="Description" @bind="@CaseModel.Description"></textarea>
                            <ValidationMessage For="() => CaseModel.Description" />
                        </div>

                        <!-- Multi Mini Inputs -->
                        <div class="form-group multi">
                            <h3>Patient Demographics</h3>
                            <div class="form-multi-inputs">
                                <div class="form-row">
                                    <label for="age">Age</label>
                                    <input class="form-control mini" type="text" placeholder="Age" @bind="@CaseModel.PatientAge">
                                </div>
                                <div class="form-row">
                                    <label for="race">Race</label>
                                    @*    <input class="form-control mini" type="text" id="race" placeholder="Race"> *@
                                    <div class="form-select-wrapper">
                                        <select class="form-select mini" name="" @bind="@CaseModel.Race">
                                            @foreach (RaceType i in Enum.GetValues(typeof(RaceType)))
                                            {
                                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                            }

                                        </select>
                                        <img src="./img/icons/chevron-down.svg" alt="">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <label for="gender">Gender</label>
                                    <div class="form-select-wrapper">
                                        <select class="form-select mini" name="" @bind="@CaseModel.Gender" placeholder="Gender">
                                            @foreach (GenderType i in Enum.GetValues(typeof(GenderType)))
                                            {
                                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                            }

                                        </select>
                                        <img src="./img/icons/chevron-down.svg" alt="">
                                    </div>
                                </div>
                                <div class="form-row">
                                    <label for="ethnicity">Ethnicity</label>
                                    <div class="form-select-wrapper">
                                        <select class="form-select mini" name="" @bind="@CaseModel.Ethnicity" placeholder="Ethnicity">
                                            @foreach (EthnicityType i in Enum.GetValues(typeof(EthnicityType)))
                                            {
                                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                            }

                                        </select>
                                        <img src="./img/icons/chevron-down.svg" alt="">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <h3>Case Information</h3>
                            <label>Lab Values</label>
                            <textarea class="form-control case-textarea" placeholder="Lab Values" @bind="CaseModel.LabValues"></textarea>
                        </div>
                        <div class="form-group">
                            <label>Current Stage of Disease</label>
                            <textarea class="form-control case-textarea" placeholder="Current Stage of Disease" @bind="CaseModel.CurrentStageOfDisease"></textarea>
                        </div>
                        <div class="form-group">
                            <label>Current Treatment Administered</label>
                            <textarea class="form-control case-textarea" placeholder="Current Treatment Administered" @bind="CaseModel.CurrentTreatmentAdministered"></textarea>
                        </div>
                        <div class="form-group">
                            <label>Treatment Outcomes</label>
                            <textarea class="form-control case-textarea" placeholder="Treatment Outcomes" @bind="CaseModel.TreatmentOutcomes"></textarea>
                        </div>

                        <div class="ask-4-file">
                            <h3>File Upload</h3>
                            <div class="form-group file">
                                @* <TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl"></TestMultiImg> *@
                                <button class="attach-btn" id="uploadFileButton" type="button" @onclick="OpenFilePicker">
                                    <img src="/img/icons/attachment.svg" alt="">
                                    Attach files
                                </button>
                                <InputFile id="uploadFileInput" hidden="" type="file" OnChange="@HandleUploadFileNew" @ref="_filePicker" multiple />
                            </div>
                            <div class="attached-files">
                                <div class="files">
                                    @if (@CaseModel.Files != null)
                                    {
                                        @foreach (var document in CaseModel.Files)
                                        {
                                            <div class="files">
                                                <p>
                                                    @document.FileName <button class="attach-btn" @onclick="(e => { DeleteSavedFile(document); })">    <img src="/img/icons/delete-icon.svg" alt=""></button>

                                                </p>
                                            </div>
                                        }
                                    }
                                    @if (NewCaseUploadedFiles != null)
                                    {
                                        @foreach (var document in NewCaseUploadedFiles)
                                        {
                                            <p>@document.Name</p>
                                            <button @onclick="(e => { DeleteUploadedFile(document); })">
                                                <img src="/img/icons/close.svg" alt="">
                                            </button>
                                        }
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="form-group topicsdiv">
                            <h3>Topics *</h3>
                            @*        <input type="text" class="form-control tag-search" placeholder="Add Tag(s) to so that users know what your case is about."> *@
                            <FluentAutocomplete Id="my-customized"
                                                @ref="TagsList"
                                                TOption="Tag"
                                                Width="100%"
                                                Placeholder="Add Tag(s) to so that users know what your case is about."
                                                OnOptionsSearch="@OnSearch"
                                                MaximumSelectedOptions="2"
                                                OptionText="@(item => item.Name)"
                                                Virtualize="true"
                                                OptionStyle="min-height: 40px;"
                                                Class="form-control tag-search"
                                                @bind-SelectedOptions="@CaseModel.SelectedTagsObjects" />
                            <ValidationMessage For="() => CaseModel.SelectedTagsObjects" />
                        </div>


                        <h3>Post Anonymously ?</h3>
                        <p>
                            You can post a case as a anonymous user. This means that
                            users on hippra platform won't be able to see your name,
                            speciality, profile picture or any of your details in
                            this post. Note that your details will still be
                            collected by Hippra platform but they won't be visible
                            to other users.
                        </p>
                        <br>
                        <div>
                            <input type="checkbox" id="anonymousPost" @bind="@CaseModel.PostAnonymosly">
                            <label for="anonymousPost">I understand and want to post anonymously</label>
                        </div>
                        <div class="form-group post-case-actions">
                            <button class="btn btn-sm btn-roboto green-btn" type="submit">
                                Post Case
                            </button>
                            <button class="btn btn-sm btn-roboto">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </section>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int caseId { get; set; } = -1;

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private string returnUrl { get; set; } = "/viewcase/";

    private bool isCaseClose = false;

    private AddEditCaseViewModel CaseModel { get; set; } = new AddEditCaseViewModel() { };
    FluentAutocomplete<Tag> TagsList = default!;
    private List<Tag> AllTags { get; set; } = new List<Tag>();
    private string debug { get; set; } = "";
    private const int MAXTAGS = 25;
    private bool isSubmitted = false;


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private string userId { get; set; } = "";
    private string seletedItems { get; set; }
    private List<IBrowserFile> NewCaseUploadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 100;
    private int maxAllowedFiles = 3;


    private InputFile _filePicker;
    private async Task OpenFilePicker()
        => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call",
            _filePicker.Element);
    private async Task OpenFileClick()
    {
        await JSRuntime.InvokeVoidAsync("HandleCommentUploadButtonClick");
    }
    private string mainItemClass
    {
        get
        {
            if (CaseModel.Type == CaseType.AskForHelp)
                return "orange";
            else return "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
                CaseModel = await caseService.GetCase(caseId);

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }

            this.AllTags = await commonService.GetAllTags();
            StateHasChanged();
        }
        else
        {
            // shouldn't get here
        }

        returnUrl = returnUrl + caseId;

    }


    private async Task Submitted()
    {
        isSubmitted = true;
    }

    private void OnSearch(OptionsSearchEventArgs<Tag> e)
    {
        e.Items = AllTags.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)).OrderBy(i => i.Name);
    }

    private async Task UpdateCase()
    {
        HistoryLog newHistory = new HistoryLog();

        var saveResult = await caseService.EditCase(CaseModel);
        if (saveResult.IsSuccess)
        {
            if (NewCaseUploadedFiles != null)
            {
                foreach (var file in NewCaseUploadedFiles)
                {
                    var c = file.OpenReadStream(maxFileSize);
                    await caseService.SaveCaseFile(c, saveResult.EntityId, file.Name, file.ContentType, userId);
                }

            }
        }


        if (isCaseClose)
        {
            await historyLogService.AddToHistory("closed a case", this.CaseModel);
        }
        else
        {
            await historyLogService.AddToHistory("edited a case", this.CaseModel);
        }

        NavigationManager.NavigateTo(returnUrl);
    }

    private async Task CloseCase()
    {

        //debug = "Case Closed";
        // isCaseClose = !isCaseClose;
        // await hService.CloseCase(pCase.ID);
        // pCase.Status = !pCase.Status;

        this.StateHasChanged();
    }

    public async Task DeleteUploadedFile(IBrowserFile file)
    {
        NewCaseUploadedFiles.Remove(file);
        this.StateHasChanged();
    }

    public async Task DeleteSavedFile(CaseFileViewModel file)
    {

        // var result = await caseService.DeleteCommentFile(file.ID, userId);



        // if (result.IsSuccess)
        // {
        //     commentObject.Files.Remove(file);
        //     // CommentList = await hService.GetCommentsNoTracking(caseId);
        // }

        this.StateHasChanged();
    }

    public async Task HandleUploadFileNew(InputFileChangeEventArgs e)
    {
        //  NewCaseUploadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                NewCaseUploadedFiles.Add(file);
            }
            catch (Exception ex)
            {

            }
        }

        StateHasChanged();
    }

}

