@page "/editcase/{caseId:int}"
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.Text.RegularExpressions
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
		@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IAuthorizationService AuthorizationService
@inject CommonService commonService;
<div class="main-layout @mainItemClass">
    <div class="container">
        <div class="main-tab-layout">
            <div id="post-ask-4-content" class="post-tab-content active">
                <div class="content-left">
                    <!-- Ask-4 Form -->
                    <section class="dashboard-content">
                        <div class="content-form " style="max-height: 538px; padding-bottom: 20px;">
                            <EditForm Model="@CaseModel" OnValidSubmit="@UpdateCase">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label for="">Title</label>
                                    @*      <input class="form-control" type="text" placeholder="Title"> *@
                                    <InputText class="form-control" placeholder="Title" @bind-Value="@CaseModel.Topic" />
                                    <ValidationMessage For="() => CaseModel.Topic" />
                                </div>
                                <div class="form-group">
                                    <label for="">Description</label>
                                    <textarea class="form-control textarea" placeholder="Description" @bind="@CaseModel.Description"></textarea>
                                    <ValidationMessage For="() => CaseModel.Description" />
                                </div>

                                <!-- Multi Mini Inputs -->
                                <div class="form-group multi">
                                    <label for="">Patient Information</label>
                                    <div class="form-multi-inputs">
                                        <input class="form-control mini" type="text" placeholder="Age" @bind="@CaseModel.PatientAge">
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Race">
                                                @foreach (RaceType i in Enum.GetValues(typeof(RaceType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Gender" placeholder="Gender">
                                                @foreach (GenderType i in Enum.GetValues(typeof(GenderType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Ethnicity" placeholder="Ethnicity">
                                                @foreach (EthnicityType i in Enum.GetValues(typeof(EthnicityType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                    <div class="form-multi-select">
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" @bind="@CaseModel.MedicalCategory">
                                                <option value="0" selected>Select category</option>
                                                @foreach (MedicalCategory i in Enum.GetValues(typeof(MedicalCategory)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.MedicalSubCategoryId">
                                                <option value="0" selected="" hidden="">Medical Specialty</option>
                                                @foreach (var i in AllSubCategoryList.Where(x => x.MedicalCategory == CaseModel.MedicalCategory))
                                                {
                                                    <option value="@i.ID">@i.Name</option>
                                                }
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="">Case Information</label>
                                    <textarea class="form-control case-textarea" placeholder="Lab Values" @bind="CaseModel.LabValues"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Current Stage of Disease" @bind="CaseModel.CurrentStageOfDisease"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Current Treatment Administered" @bind="CaseModel.CurrentTreatmentAdministered"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Treatment Outcomes" @bind="CaseModel.TreatmentOutcomes"></textarea>
                                </div>
                                <div class="ask-4-file">
                                    <div class="form-group file">
                                        @* <TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl"></TestMultiImg> *@
                                        <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
                                    </div>
                                </div>
                                <div class="form-group post-urgency">
                                    <div class="form-select-wrapper">
                                        <select class="form-select mini" name="" @bind="@CaseModel.ResponseNeeded">
                                            <option value="0" selected="" hidden="">Urgency</option>
                                            @foreach (CaseResponseLevelType i in Enum.GetValues(typeof(CaseResponseLevelType)))
                                            {
                                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                            }
                                        </select>
                                        <img src="./img/icons/chevron-down.svg" alt="">
                                    </div>
                                </div>
                                <div class="form-select-wrapper">
                                    <InputSelect class="form-select mini" @bind-Value="@CaseModel.SelectedTags">
                                        @foreach (var i in AllTags)
                                        {
                                            <option value="@i.ID">@i.Name</option>
                                        }
                                    </InputSelect>
                                    <img src="./img/icons/chevron-down.svg" alt="">
                                    <ValidationMessage For="() => CaseModel.SelectedTags" />

                                </div>
                                <div class="ask-4-file">
                                    <button class="btn btn-sm btn-orange btn-roboto" type="submit">Save</button>
                                </div>
                            </EditForm>

                            <div class="ask-4-file">
                                @*   @if (userId == pCase.PosterID)
                                { *@
                                <div class="mx-4 d-flex justify-content-between">

                                    @if (CaseModel.Status)
                                    {
                                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@CloseCase">Close Case</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@CloseCase">Reopen Case</button>
                                    }


                                </div>
                                @*    } *@
                            </div>
                        </div>
                    </section>

                </div>

            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int caseId { get; set; } = -1;

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private string returnUrl { get; set; } = "/viewcase/";

    private bool isCaseClose = false;

    private AddEditCaseViewModel CaseModel { get; set; } = new AddEditCaseViewModel() { };

    private List<MedicalSubCategory> CurrentSubCategoryList { get; set; } = new List<MedicalSubCategory>();
    private List<MedicalSubCategory> AllSubCategoryList { get; set; } = new List<MedicalSubCategory>();
    private List<Tag> AllTags { get; set; } = new List<Tag>();
    private string debug { get; set; } = "";
    private const int MAXTAGS = 25;
    private bool isSubmitted = false;
    private string newTag = "";
    public List<string> tagList = new List<string>();
    private bool isDeleteTag = false;
    private string TagFieldErrorMessage = "";
    private bool isTagOk = true;

    private string fileName;
    private string imgUrl;

    private string mainItemClass
    {
        get
        {
            if (CaseModel.Type == CaseType.AskForHelp)
                return "orange";
            else return "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.AllSubCategoryList = await commonService.GetAllSubcategories();
        this.AllTags = await commonService.GetAllTags();

        returnUrl = returnUrl + caseId;
        var caseItem = await hService.GetCaseNoTracking(caseId);
        if (caseItem == null)
        {
            // didn't find it, should flag for error
            return;
        }

        CaseModel = caseItem.ToViewModelCase();
        isDeleteTag = true;
        //pCase.Comments = await hService.GetCommentsNoTracking(caseId);

        fileName = "c" + CaseModel.ID;
        imgUrl = CaseModel.imgUrl;
        @*originalImgUrl = imgUrl;*@
        //   }


    }


    private async Task Submitted()
    {
        isSubmitted = true;
    }

    @*private async Task UpdateImgUrl(ChangeEventArgs e)
    {
    Console.WriteLine("UpdateImgUrl executed");

    var usr = await UserManager.GetUserAsync(user);

    tCase.PosterName = pCase.PosterName;
    tCase.PosterSpecialty = pCase.PosterSpecialty;
    tCase.Race = pCase.Race;
    tCase.Gender = pCase.Gender;
    tCase.Ethnicity = pCase.Ethnicity;
    tCase.MedicalCategory = pCase.MedicalCategory;
    tCase.ResponseNeeded = pCase.ResponseNeeded;
    tCase.imgUrl = imgUrl;

    // copy back to tCase

    tCase.Description = pCase.Description;
    tCase.Topic = pCase.Topic;

    tCase.PatientAge = pCase.PatientAge;
    tCase.CurrentStageOfDisease = pCase.CurrentStageOfDisease;
    tCase.CurrentTreatmentAdministered = pCase.CurrentTreatmentAdministered;
    tCase.TreatmentOutcomes = pCase.TreatmentOutcomes;
    tCase.LabValues = pCase.LabValues;
    tCase.Status = pCase.Status;

    await hService.EditCase(tCase);

    }*@

    private async Task UpdateCase()
    {
        PostHistory newHistory = new PostHistory();

        CaseModel.imgUrl = imgUrl;

        var result = await hService.EditCase(CaseModel);
        if (isCaseClose)
        {
            await commonService.AddToHistory("closed a case", this.CaseModel);
        }
        else
        {
            await commonService.AddToHistory("edited a case", this.CaseModel);
        }

        NavigationManager.NavigateTo(returnUrl);
    }

    private async Task CloseCase()
    {

        //debug = "Case Closed";
        // isCaseClose = !isCaseClose;
        // await hService.CloseCase(pCase.ID);
        // pCase.Status = !pCase.Status;

        this.StateHasChanged();
    }

    private async void SwitchCategory(MedicalCategory category)
    {
        this.CurrentSubCategoryList = this.AllSubCategoryList.Where(x => x.MedicalCategory == category).ToList();
        this.CaseModel.MedicalSubCategoryId = 0;
    }
}

