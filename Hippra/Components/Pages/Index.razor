@page "/"

@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IHistoryLogService historyLogService;
@inject IAuthorizationService AuthorizationService


<AuthorizeView>
    <Authorized Context="HomeContext">
        @* 	<DashboardIndex></DashboardIndex> *@

    </Authorized>
    <NotAuthorized>
        @* <Landing></Landing> *@

    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int userId { get; set; } = -1; // public ID

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
   
    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
          

            try
            {
                if (userId == -1)
                {
                    userId = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
                }

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }


            NavigationManager.NavigateTo("dashboard");


        }
        else
            NavigationManager.NavigateTo("landing");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.SubscribeAnimalChange", "animalIcon");
        //}
    }

}
