@page "/dashboardindex"
@layout MainLayout
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IHistoryLogService historyLogService;
@inject ProfileService pService
@inject HippraService hService
@inject IAuthorizationService AuthorizationService
@attribute [Authorize]
<div class="dashboard-layout">
    <div class="dashboard-left">
        <!-- Left side content goes here -->


        <div class="d-flex flex-column button-container">
            <div class="mb-2"> <h2>Explore Healthcare Topics</h2></div>
            <div>
                <button class="btn btn-primary">Following</button>
                <button class="btn btn-primary">Family Medicine</button>
                <button class="btn btn-primary">Women's Health</button>
                <button class="btn btn-primary">Pediatrics</button>
                <button class="btn btn-primary">Rare Diseases</button>
                <button class="btn btn-primary">+</button>
            </div>
        </div>
        <br>


        <!-- Topics -->
         <HelpCases />
        
    </div>
    <!-- Topics end-->
    <div class="dashboard-right d-flex flex-column">
        <div class="dashboard-right-top d-flex flex-column p-3 ">
            <!-- Top right content goes here -->
            <div class="mb-3"><h3>Trending Clinical Cases</h3></div>

            <div class="trending-case ">
                <div class="trending-case-img">
                    <a href="profile.html"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcbfVKJItm9_BW4pJtHNj-FWzkuDYLeA6_UA&amp;usqp=CAU" alt=""></a>
                    <p>Kimberly Mastrangelo · Women's Health Specialist</p>
                </div>
                <h6>Warning Signs of Hypertension during Pregnancy?</h6>
                <p>15 Likes · 9 comments</p>
            </div>
            <hr>


        </div>
        <div class="dashboard-right-bottom d-flex flex-column p-3">
            <!-- Bottom right content goes here -->
            <div class="mb-3"><h3>Medical Experts to follow</h3></div>
            <div class="experts-card d-flex">
                <div class="d-flex gap-2">
                    <div class="expert-img">
                        <a href="profile.html"><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQcbfVKJItm9_BW4pJtHNj-FWzkuDYLeA6_UA&amp;usqp=CAU" alt=""></a>
                    </div>
                    <div class="d-flex flex-column">
                        <h6 class="mb-0 fw-bold">Jerry Helfer</h6>
                        <p class="post-meta">Family Medicine Specialist</p>
                        <p class="post-meta">Georgetown Hospital · USA</p>
                    </div>
                </div>
                <div>
                    <button class="btn follow-btn ">Follow</button>
                </div>
            </div>
            <hr>
        </div>
    </div>
</div>














@code {
    [Parameter]
    public int userId { get; set; } = -1; // public ID

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 10;
    public int TotalPages => (int)Math.Ceiling(decimal.Divide(Count, PageSize));
    public List<FTPaginationModel> paginationData = new List<FTPaginationModel>();

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;
    private bool IsLoading = false;
    private string searchString { get; set; } = "";

    private bool showFilters { get; set; } = false;

    private async Task toggleFilters()
    {
        showFilters = !showFilters;
    }
    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
        public string Priority { get; set; } = "-1";
        public bool showTagOnly { get; set; } = false;
    }
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
            new SelectListItem { Value = "-1", Text = "No Filters" }
            };


    private List<CaseViewModel> SearchResults { get; set; } = new List<CaseViewModel>();
    private List<Case> cases { get; set; } = new List<Case>();



    private int actionOptions { get; set; } = 0; // 0 = all, 1 = my posts
    private string mTitle { get; set; } = "Post New Case";
    private bool mIsCreate = true;
    private bool viewMode = true;

    private CaseViewModel pCase { get; set; } = new CaseViewModel();

    private string cssAllActive { get; set; } = "active";
    private string cssMyActive { get; set; } = "";


    private string debug { get; set; } = "";

    private PriorityModel priorityRadio = new PriorityModel();
    public class PriorityModel
    {
        [Range(0, 2)]
        public CaseResponseLevelType Priority { get; set; }
    }

    private PhysicianProfileModel pProfile = new PhysicianProfileModel();
    public class PhysicianProfileModel
    {
        public int ProfileId { get; set; } = -1;
        public string Name { get; set; } = "";
        public string Specialty { get; set; } = "";
        public bool Certified { get; set; } = false;
    }


    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*usr = await UserManager.GetUserAsync(user);*@

            try
            {
                if (userId == -1)
                {
                    userId = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
                }

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }


            await GetSearchResults(CurrentPage);

            if (Count > PageSize)
            {
                for (int i = 1; i <= TotalPages; i++)
                {
                    paginationData.Add(new FTPaginationModel()
                        {
                            id = i
                        });
                }
                var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
                pg.isActive = true;
            }

        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.SubscribeAnimalChange", "animalIcon");
        //}
    }


    private async Task GetSearchResults(int targetPage)
    {
        SearchResults = new List<CaseViewModel>();
        cases = new List<Case>();

        int tSubCategory = -1;
        int tPriority = -1;
        if (!string.IsNullOrEmpty(filters.SubCategory))
        {
            tSubCategory = Int32.Parse(filters.SubCategory);
        }
        if (!string.IsNullOrEmpty(filters.Priority))
        {
            tPriority = Int32.Parse(filters.Priority);
        }

        List<int> caseListContainTag = new List<int>();
        // if (filters.showTagOnly)
        // {
        //     caseListContainTag = await hService.GetCasesIdByTag(searchString);
        // }

        if (actionOptions == 0)
        {
            var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, -1, caseListContainTag);
            cases = searchResults.Cases;
            Count = searchResults.TotalCount;
            //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, -1);
            //Count = await hService.GetCaseCount();
        }
        else
        {
            var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, userId, caseListContainTag);
            cases = searchResults.Cases;
            Count = searchResults.TotalCount;
            //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, usr.PublicId);
            //Count = await hService.GetMyCaseCount(usr.PublicId);
        }

        SearchResults = cases.Select(i => new CaseViewModel()
            {
                ID = i.ID,
                Topic = i.Topic,
                Description = i.Description,
                DateCreated = i.DateCreated,
            }).ToList();

        //history stuffs
        if (searchString != "")
        {
            AddHistoryLogDto newHistory = new AddHistoryLogDto();
            // newHistory.PostID = pCase.ID;
            // newHistory.CreationDate = DateTime.Now;
            // newHistory.UserId = userId;
            // //  newHistory.UserDisplayName = fullName;
            // newHistory.Title = "Hippra";
            // newHistory.HistoryTypes = "searched ";
            // if (filters.showTagOnly)
            // {
            //     newHistory.Detail = "tag [" + searchString + "]";
            // }
            // else
            // {
            //     newHistory.Detail = '"' + searchString + '"';
            // }
            await historyLogService.AddHistory(newHistory);
        }

    }
    private async Task searchHandler()
    {
        IsLoading = true;
        if (actionOptions == 1)
        {
            await ShowMyCases();
        }
        else
        {
            await ShowAllCases();
        }
    }


    private async Task ChangePage(int targetPage)
    {

        await GetSearchResults(targetPage);

        var pg = paginationData.FirstOrDefault(s => s.isActive);
        pg.isActive = false;
        CurrentPage = targetPage;
        pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
        pg.isActive = true;
        this.StateHasChanged();
    }

    private async Task ShowAllCases()
    {
        actionOptions = 0;
        CurrentPage = 1;
        await GetSearchResults(CurrentPage);

        if (Count > PageSize)
        {
            paginationData = new List<FTPaginationModel>();
            for (int i = 1; i <= TotalPages; i++)
            {
                paginationData.Add(new FTPaginationModel()
                    {
                        id = i
                    });
            }
            var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
            pg.isActive = true;
        }

        mTitle = "All Cases";
        cssAllActive = "active";
        cssMyActive = "";

        this.StateHasChanged();
        IsLoading = false;
        //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    }
    private async Task ShowMyCases()
    {
        actionOptions = 1;
        CurrentPage = 1;
        await GetSearchResults(CurrentPage);

        if (Count > PageSize)
        {
            paginationData = new List<FTPaginationModel>();
            for (int i = 1; i <= TotalPages; i++)
            {
                paginationData.Add(new FTPaginationModel()
                    {
                        id = i
                    });
            }
            var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
            pg.isActive = true;
        }

        cssAllActive = "";
        cssMyActive = "active";

        mTitle = "My Cases";
        this.StateHasChanged();
        IsLoading = false;
        //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    }

    // ver 2
    private async Task NavToCreateCase()
    {
        NavigationManager.NavigateTo("/createcase");
    }


    private string verStr { get; set; } = "Page (New)";



}
