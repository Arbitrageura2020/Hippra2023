@page "/profile/{userId}"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Models.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@* @inject HippraService hService *@
@inject ICaseService caseService;
@inject ProfileService pService;
@inject CommonService commonService;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Extensions
@inject IAuthorizationService AuthorizationService
@inject IHttpContextAccessor httpContextAccessor
@inject IFollowService followService;
<div class="profile-layout">
    <!-- Profile Top Frame -->
    <section class="profile-frame no-pad">
        <div class="profile-frame-inner">
            <!-- PRofile Informations -->
            <div class="profile-frame-user">
                <div class="profile-frame-img">
                    <img src="@DisplayProfileUrl" alt="">
                </div>
                <div class="profile-frame-info">
                    <h4>@profile.FullName</h4>
                    <h5>@EnumsHelper.GetDisplayName(profile.MedicalSpecialty)</h5>
                    <p>@profile.ResidencyHospital . @profile.City</p>
                    <div class="profile-frame-social">
                        <div class="profile-social-item">
                            <strong>@NrOfPosts</strong> Posts
                        </div>
                        <div class="profile-social-item">
                            <strong>@NrOfFollowers</strong> Followers
                        </div>
                        <div class="profile-social-item">
                            <strong>@NrOfFollowing</strong> Following
                        </div>
                    </div>
                    @if (!IsMyOwnProfile)
                    {
                        @if (isFollowed)
                        {
                            <button class="prof-f-btn" @onclick="@RemoveFromFollowerList">Followed</button>
                        }
                        else
                        {
                            <button class="prof-f-btn" @onclick="@AddToFollowerList">Follow+</button>
                        }
                    }
                    else
                    {
                        <button type="" class="btn btn-sm btn-green">
                            Edit Profile
                        </button>
                    }
                </div>
            </div>
            <div class="profile-frame-logo">
                <img src="./img/logo-lg.png" alt="">
            </div>
        </div>
    </section>
    <!-- Profile Content -->
    <section class="profile-content">
        <div class="profile-content-left">
            <!-- Profile About -->
            <div class="profile-about">
                <div class="content-heading">
                    <h4>About @profile.FullName</h4>
                </div>
                <p>@profile.Bio</p>
                <hr>
            </div>
            <!--Profile Sepciality  -->
            <div class="profile-speciality">
                <div class="content-heading">
                    <h4>Speciality</h4>
                </div>
                <!-- Profile Sepciality Tag Loop Here -->
                <div class="profile-tags">
                    <ul>
                        <li>  @EnumsHelper.GetDisplayName(profile.MedicalSpecialty)</li>
                    </ul>
                </div>
            </div>
            <!-- Profile Contact -->
            <div class="profile-contact">
                <div class="content-heading">
                    <h4>Contact</h4>
                </div>
                <div class="profile-contact-info">
                    <div class="profile-contact-item">
                        <label for="">Email</label>
                        <div class="profile-contact-box">
                            @profile.Email
                        </div>
                    </div>
                    <div class="profile-contact-item">
                        <label for="">Phone</label>
                        <div class="profile-contact-box">
                            @profile.PhoneNumber
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Past Activities -->
        <div class="profile-content-right">
            <div class="profile-activities">
                <div class="content-heading">
                    <h4>Past Activities</h4>
                </div>
                <div class="profile-activities-list">
                    @foreach (var caseItem in ListOfCases)
                    {
                        <div class="profile-activities-item">
                            <div class="comment-user-info">
                                <div class="comment-author">
                                    
                                        <img src="@caseItem.PosterImg" alt="@caseItem.PosterName">
                                 
                                   
                                </div>
                                <div class="comment-info">
                                    <h6> @caseItem.PosterName </h6>
                                    <h6 class="light-text"> @caseItem.PosterSpeciality </h6>
                                    <h6 class="light-text">@caseItem.TimeDifferenceText</h6>
                                </div>
                                <div class="more-options"> <button> <img src="/frontend/Dashboard/img/icons/three-dots-green.svg" alt=""> </button> </div>
                            </div>
                            <div>
                                <h3>   <a href=@($"/viewcase/{caseItem.ID}")>@caseItem.Topic</a></h3>
                                <p>     @caseItem.Description.Left(200) ...</p>
                            </div>
                            <div class="tags-and-btns">
                                <div class="profile-tags">
                                    <ul>
                                        @if (caseItem.Type == CaseType.ClinicalKnowledge)
                                        {
                                            <li class="knowledge-sharing-case">Clinical Knowledge Sharing Case</li>
                                        }
                                        else
                                        {
                                            <li class="ask-for-help-case">Ask For Help Case</li>
                                        }
                                        @if (caseItem.Tags != null)
                                        {
                                            @foreach (var tag in @caseItem.Tags)
                                            {
                                                <li>@tag.Name</li>
                                            }
                                        }
                                    </ul>
                                </div>
                                <div>
                                    <button><img src="/frontend//Dashboard/img/icons/thumbs-up-hollow.svg" alt=""><span>Like</span></button>
                                    <button><img src="/frontend/Dashboard/img/icons/comment.svg" alt=""><span>Comment</span></button>
                                </div>
                            </div>
                        </div>
                      
                    }

                </div>
            </div>
        </div>
    </section>
</div>

@code {
    [Parameter]
    public string userId { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private IList<CaseViewModel> ListOfCases { get; set; } = new List<CaseViewModel>();
    private ProfileViewModel profile { get; set; } = new ProfileViewModel();
    private string DisplayProfileUrl = "";
    private bool IsLoading = true;
    private string currentUserId { get; set; }
    private bool isFollowed = false;
    private int NrOfFollowers { get; set; }
    private int NrOfFollowing { get; set; }
    public int NrOfPosts { get; set; }
    private bool IsMyOwnProfile { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                currentUserId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
                isFollowed = await followService.CheckFollower(currentUserId, userId);
                NrOfFollowers = await followService.GetNrOfFollowers(userId);
                NrOfFollowing = await followService.GetNrOfFollowing(userId);
                if (userId == currentUserId)
                    IsMyOwnProfile = true;
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        //profile
        profile = new ProfileViewModel();
        profile = await pService.GetProfileById(userId);
        if (profile.ProfileUrl != null)
        {
            DisplayProfileUrl = profile.ProfileUrl;
        }
        else
        {
            DisplayProfileUrl = "/img/hippra/blank-profile.png";
        }

        await GetCases();
    }

    protected override async Task OnParametersSetAsync()
    {
        // authState = await authenticationStateTask;
        // user = authState.User;
    }


    private async Task GetCases()
    {
        ListOfCases = await caseService.GetMyCases(userId);
        NrOfPosts = ListOfCases.Count;
        IsLoading = false;
    }

    private async Task AddToFollowerList()
    {
        await followService.AddFollower(userId, currentUserId);
        isFollowed = true;
        NrOfFollowers++;
        // await addToHistory("followed");
        // await Notify(-1);
        StateHasChanged();
    }

    private async Task RemoveFromFollowerList()
    {
        await followService.RemoveFollower(userId, currentUserId);
        isFollowed = false;
        NrOfFollowers--;
        // await addToHistory("unfollowed");
        StateHasChanged();
    }

}

