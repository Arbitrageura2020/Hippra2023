@page "/tagsearch/{caseId:int}/{tagName}"

@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using Hippra.Pages.MCase
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Components
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService

@inject IAuthorizationService AuthorizationService


<div class="ft-main-px">

    <div class="card">
        <div class="card-body">

            <br />
            <div class="d-block text-center">
                <div class="row">
                    <div class="offset-md-2 col-md-8 offset-md-2 text-left">
                        @if (actionOptions == 1)
                        {
                            <div class="mb-3 display-4 "><span>Tag [</span><span class="tag-search-item">@tagName</span><span>] in My Cases</span></div>
                        }
                        else
                        {
                            <div class="mb-3 display-4 "><span>Tag [</span><span class="tag-search-item">@tagName</span><span>] in All Cases</span></div>
                        }
                        <br />
                        <div class="card text-center">
                            <div class="card-body">
                                <div>
                                    <EditForm Model="@searchString" OnValidSubmit="@searchHandler">
                                        <div class="input-group">
                                            <InputText class="form-control" style="height:40px" placeholder="Search Tag" @bind-Value="@searchString" />
                                            <div class="input-group-append">
                                                <button class="btn btn-outline-secondary" type="submit">Search</button>
                                                <button type="button" class="btn btn-outline-info" @onclick="@toggleFilters"><i class="ms-Icon ms-Icon--Filter" aria-hidden="true"></i></button>
                                            </div>

                                        </div>
                                    </EditForm>

                                </div>
                                @if (showFilters)
                                {
                                    <div class="card-footer text-muted text-left">
                                        <div class="px-4">
                                            <EditForm Model="@filters" OnValidSubmit="@searchHandler">
                                                <div class="row d-flex align-items-center">
                                                    <div class="flex-grow-1 ">
                                                        <div class="form-check">
                                                            <InputCheckbox class="form-check-input" type="checkbox" id="showClosed" @bind-Value="filters.showClosed" />
                                                            <label class="form-check-label" for="showClosed">
                                                                Show Closed Cases
                                                            </label>
                                                        </div>
                                                        <div class="form-check">
                                                            <InputCheckbox class="form-check-input" type="checkbox" id="showTagOnly" @bind-Value="filters.showTagOnly" />
                                                            <label class="form-check-label" for="showTagOnly">
                                                                Show Result Contain Tag
                                                            </label>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col">
                                                                <label for="CategoryFilter">Category</label>
                                                                @*       <select id="CategoryFilter" @onchange=@UpdateSubCategoryFilter>
                                                            <option value="-1">All Categories</option>
                                                            <option value="0">Diagnostics</option>
                                                            <option value="1">Medicine</option>
                                                            <option value="2">Surgery</option>
                                                            </select> *@
                                                                <InputSelect id="SubCategoryFilter" @bind-Value="@filters.SubCategory">
                                                                    @foreach (var h in SubCategoryFilterList)
                                                                    {
                                                                        <option value="@h.Value">@h.Text</option>
                                                                    }
                                                                    /**/
                                                                    /**/
                                                                </InputSelect>

                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col">
                                                                <label for="PriorityFilter">Priority</label>
                                                                <select id="PriorityFilter" @onchange="@UpdatePriority">
                                                                    <option value="-1">All</option>
                                                                    <option value="0">Stat</option>
                                                                    <option value="1">Over Coffee</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div>
                                                        <button class="btn btn-outline-secondary" type="submit">Filter</button>
                                                    </div>
                                                </div>


                                            </EditForm>
                                        </div>

                                    </div>
                                }


                            </div>

                        </div>
                        <br />
                        <hr />
                        <br />

                    </div>
                </div>
                <br /><br />
            </div>
            <br />
            <br />
        </div>
    </div>


</div>
<div class="main-layout">
    <div class="container">
        <div class="search-layout">
            <!-- Search ASK-4-HELP -->
            <div class="search-left">
                <div class="main-header">
                    <div class="heading orange search-page">
                        <h3>ASK-4-HELP CASES</h3>
                        <a href="./search-expand.html#post-ask-4-content"><img src="./img/icons/arrow-right-gray.svg" alt=""></a>
                    </div>
                    <div class="heading-actions active">
                        <h4>Sort By View:</h4>
                        <!-- Recent checkbox and label -->
                        <div class="heading-action-item">
                            <input class="filter-checkbox-search" type="checkbox" id="ask4-search-recent" data-type="ask4" checked="">
                            <label for="ask4-search-recent" class="checkbox-tab" data-type="ask4">Recent</label>
                        </div>

                        <div class="heading-action-item">
                            <input class="filter-checkbox-search" type="checkbox" id="ask4-search-trending" data-type="ask4">
                            <label for="ask4-search-trending" class="checkbox-tab" data-type="ask4">Trending</label>
                        </div>
                    </div>
                </div>
                <!-- Add the "orange" class to the "search-content" to apply the orange theme. -->
                <section class="search-content orange">
                    <div class="search-contents  inside-scroll" style="max-height: 441.6px; padding-bottom: 20px;">
                        <!-- Search Content Loop -->
                        @foreach (var item in AskHelpCases)
                        {
                            <div class="search-content-item">
                                <a href="case-2.html">@item.Topic</a>
                                <p>
                                    @item.Description
                                </p>
                                <div class="search-content-meta">
                                    <ul>
                                        <li class="name">@item.User.FullName</li>
                                        <li class="field">@EnumsHelper.GetDisplayName(@item.User.MedicalSpecialty)</li>
                                        <li class="timestamp">@item.DateCreated.ToString("HH:mm MMMM dd yyyy")</li>
                                    </ul>
                                </div>
                            </div>
                        }

                    </div>
                </section>
            </div>

            <!-- Search CLINICAL KNOWLEDGE SHARING -->
            <div class="search-right">
                <div class="main-header">
                    <div class="heading search-page">
                        <h3>CLINICAL KNOWLEDGE SHARING</h3>
                        <a href="./search-expand.html#post-clinical-content"><img src="./img/icons/arrow-right-gray.svg" alt=""></a>
                    </div>
                    <div class="heading-actions">
                        <h4>Sort By View:</h4>
                        <!-- Recent checkbox and label -->
                        <div class="heading-action-item">
                            <input class="filter-checkbox-search" type="checkbox" id="clinical-search-recent" data-type="clinical" checked="">
                            <label for="clinical-search-recent" class="checkbox-tab" data-type="clinical">Recent</label>
                        </div>

                        <div class="heading-action-item">
                            <input class="filter-checkbox-search" type="checkbox" id="clinical-search-trending" data-type="clinical">
                            <label for="clinical-search-trending" class="checkbox-tab" data-type="clinical">Trending</label>
                        </div>
                    </div>
                </div>
                <section class="search-content">
                    <div class="search-contents no-extend inside-scroll" style="max-height: 441.6px; padding-bottom: 20px;">
                        <!-- Search Content Loop -->
                        @foreach (var item in KnowledgeCases)
                        {
                            <div class="search-content-item">
                                <a href="case-2.html">@item.Topic</a>
                                <p>
                                    @item.Description
                                </p>
                                <div class="search-content-meta">
                                    <ul>
                                        <li class="name">@item.User.FullName</li>
                                        <li class="field">@EnumsHelper.GetDisplayName(@item.User.MedicalSpecialty)</li>
                                        <li class="timestamp">@item.DateCreated.ToString("HH:mm MMMM dd yyyy")</li>
                                    </ul>
                                </div>
                            </div>
                        }

                    </div>
                </section>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int caseId { get; set; } = -1; // public ID
    [Parameter]
    public string tagName { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }


    // Feature Config
    private bool Version2 { get; set; } = true;


    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private string searchString { get; set; } = "";

    private bool showFilters { get; set; } = false;

    private async Task toggleFilters()
    {
        showFilters = !showFilters;
    }

    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
        public string Priority { get; set; } = "-1";
        public bool showTagOnly { get; set; } = false;
    }
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
    new SelectListItem { Value = "-1", Text = "No Filters" }
    };


    private List<Case> AskHelpCases { get; set; } = new List<Case>();
    private List<Case> KnowledgeCases { get; set; } = new List<Case>();
    private int actionOptions { get; set; } = 0; // 0 = all, 1 = my posts
    private string mTitle { get; set; } = "Post New Case";
    private bool mIsCreate = true;
    private bool viewMode = true;



    private string cssAllActive { get; set; } = "active";
    private string cssMyActive { get; set; } = "";



    private string debug { get; set; } = "";


    private int userId = -1;

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;
        searchString = tagName;
        filters.showTagOnly = true;

        if (user.Identity.IsAuthenticated)
        {
            @*usr = await UserManager.GetUserAsync(user);*@
            try
            {

                userId = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
            await GetSearchResults();

        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.SubscribeAnimalChange", "animalIcon");
        //}
    }


    private async Task GetSearchResults()
    {

        var allCases = await hService.GetCasesByTag(searchString);
        if (allCases != null)
        {
            AskHelpCases = allCases.Where(x => x.Type == CaseType.AskForHelp).ToList();
            KnowledgeCases = allCases.Where(x => x.Type == CaseType.ClinicalKnowledge).ToList();
        }

        // int tSubCategory = -1;
        // int tPriority = -1;
        // if (!string.IsNullOrEmpty(filters.SubCategory))
        // {
        //     tSubCategory = Int32.Parse(filters.SubCategory);
        // }
        // if (!string.IsNullOrEmpty(filters.Priority))
        // {
        //     tPriority = Int32.Parse(filters.Priority);
        // }

        // List<int> caseListContainTag = await hService.GetCasesIdByTag(searchString);
        // if (actionOptions == 0)
        // {
        //     var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, -1, caseListContainTag);
        //     cases = searchResults.Cases;
        //     Count = searchResults.TotalCount;
        // }
        // else
        // {
        //     var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, userId, caseListContainTag);
        //     cases = searchResults.Cases;
        //     Count = searchResults.TotalCount;
        // }

        // foreach (var i in cases)
        // {

        //     SearchResults.Add(i.ToParsedCase());
        // }

    }
    private async Task searchHandler()
    {
        if (actionOptions == 1)
        {
            // await ShowMyCases();
        }
        else
        {
            //  await ShowAllCases();
        }
    }

    // private async Task ShowAllCases()
    // {
    //     actionOptions = 0;
    //     CurrentPage = 1;
    //     await GetSearchResults(CurrentPage);

    //     if (Count > PageSize)
    //     {
    //         paginationData = new List<FTPaginationModel>();
    //         for (int i = 1; i <= TotalPages; i++)
    //         {
    //             paginationData.Add(new FTPaginationModel()
    //             {
    //                 id = i
    //             });
    //         }
    //         var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
    //         pg.isActive = true;
    //     }

    //     mTitle = "All Cases";
    //     cssAllActive = "active";
    //     cssMyActive = "";

    //     this.StateHasChanged();
    //     //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    // }
    // private async Task ShowMyCases()
    // {
    //     actionOptions = 1;
    //     CurrentPage = 1;
    //     await GetSearchResults(CurrentPage);

    //     if (Count > PageSize)
    //     {
    //         paginationData = new List<FTPaginationModel>();
    //         for (int i = 1; i <= TotalPages; i++)
    //         {
    //             paginationData.Add(new FTPaginationModel()
    //             {
    //                 id = i
    //             });
    //         }
    //         var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
    //         pg.isActive = true;
    //     }

    //     cssAllActive = "";
    //     cssMyActive = "active";

    //     mTitle = "My Cases";
    //     this.StateHasChanged();
    //     //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    // }

    // ver 2
    private async Task NavToCreateCase()
    {
        NavigationManager.NavigateTo("/createcase");
    }


    private async Task UpdatePriority(ChangeEventArgs e)
    {
        filters.Priority = e.Value.ToString();
    }

    }
