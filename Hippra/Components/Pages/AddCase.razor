@page "/createcase"
@using Hippra.Models.ViewModel
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using Hippra.Pages.MCase
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.Text.RegularExpressions
@using Microsoft.FluentUI.AspNetCore.Components

@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject CommonService commonService
@inject IJSRuntime JSRuntime
@inject IAuthorizationService AuthorizationService

<div class="main-layout @mainItemClass">
    <div class="container">
        <div class="main-tab-layout">
            <!-- Tabs -->
            <div class="post-header">
                <div class="post-head-left">
                    <div class="post-tab">
                        <button class="post-tab-btn @AskHelpCaseClass" data-target="post-ask-4-content" data-action="ask-4-action" @onclick="(() => this.IsAskHelpCase=true)">
                            ASK-4-HELP CASES
                        </button>
                    </div>
                </div>
                <div class="post-head-right">
                    <div class="post-tab">
                        <button class="post-tab-btn  @ClinicalKnowledgeCaseClass" data-target="post-clinical-content" data-action="clinical-action" @onclick="(() => this.IsAskHelpCase=false)">
                            CLINICAL KNOWLEDGE SHARING
                        </button>
                    </div>

                    <div class="heading-actions">
                    </div>
                </div>
            </div>
            <div id="post-ask-4-content" class="post-tab-content active">
                <div class="" style="width:100%">
                    <!-- Ask-4 Form -->
                    <section class="dashboard-content">
                        <div class="content-form inside-scroll" style="padding-bottom: 20px;">
                            <EditForm Model="@CaseModel" OnValidSubmit="@CreateCase">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label for="">Title</label>
                                    @*      <input class="form-control" type="text" placeholder="Title"> *@
                                    <InputText class="form-control" placeholder="Title" @bind-Value="@CaseModel.Topic" />
                                    <ValidationMessage For="() => CaseModel.Topic" />
                                </div>
                                <div class="form-group">
                                    <label for="">Description</label>
                                    <textarea class="form-control textarea" placeholder="Description" @bind="@CaseModel.Description"></textarea>
                                    <ValidationMessage For="() => CaseModel.Description" />
                                </div>

                                <!-- Multi Mini Inputs -->
                                <div class="form-group multi">
                                    <label for="">Patient Information</label>
                                    <div class="form-multi-inputs">
                                        <input class="form-control mini" type="text" placeholder="Age" @bind="@CaseModel.PatientAge">
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Race">
                                                @foreach (RaceType i in Enum.GetValues(typeof(RaceType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Gender" placeholder="Gender">
                                                @foreach (GenderType i in Enum.GetValues(typeof(GenderType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.Ethnicity" placeholder="Ethnicity">
                                                @foreach (EthnicityType i in Enum.GetValues(typeof(EthnicityType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }

                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                    <div class="form-multi-select">
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" @bind="@CaseModel.MedicalCategory" @onclick="()=>SwitchCategory(CaseModel.MedicalCategory)">
                                                <option value="0" selected>Select category</option>
                                                @foreach (MedicalCategory i in Enum.GetValues(typeof(MedicalCategory)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                            <ValidationMessage For="() => CaseModel.MedicalCategory" />
                                        </div>
                                        <div class="form-select-wrapper">
                                            <select class="form-select mini" name="" @bind="@CaseModel.MedicalSubCategoryId">
                                                <option value="0" selected="" hidden="">Medical Specialty</option>
                                                @foreach (var i in @CurrentSubCategoryList)
                                                {
                                                    <option value="@i.ID">@i.Name</option>
                                                }
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                            <ValidationMessage For="() => CaseModel.MedicalSubCategoryId" />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="">Case Information</label>
                                    <textarea class="form-control case-textarea" placeholder="Lab Values" @bind="CaseModel.LabValues"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Current Stage of Disease" @bind="CaseModel.CurrentStageOfDisease"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Current Treatment Administered" @bind="CaseModel.CurrentTreatmentAdministered"></textarea>
                                </div>
                                <div class="form-group">
                                    <textarea class="form-control case-textarea" placeholder="Treatment Outcomes" @bind="CaseModel.TreatmentOutcomes"></textarea>
                                </div>
                                <div class="ask-4-file">
                                    <div class="form-group file">
                                        <TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl"></TestMultiImg>
                                    </div>
                                </div>
                                <div class="form-group post-urgency">
                                    <div class="form-select-wrapper">
                                        <select class="form-select mini" name="" @bind="@CaseModel.ResponseNeeded">
                                            <option value="0" selected="" hidden="">Urgency</option>
                                            @foreach (CaseResponseLevelType i in Enum.GetValues(typeof(CaseResponseLevelType)))
                                            {
                                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                            }
                                        </select>
                                        <img src="./img/icons/chevron-down.svg" alt="">
                                        <ValidationMessage For="() => CaseModel.ResponseNeeded" />
                                    </div>
                                </div>
                                <div class="form-select-wrapper">
                                @*     <InputSelect class="form-select mini" @bind-Value="@CaseModel.SelectedTags">
                                        @foreach (var i in AllTags)
                                        {
                                            <option value="@i.ID">@i.Name</option>
                                        }
                                    </InputSelect>
                                    <img src="./img/icons/chevron-down.svg" alt=""> *@

                                    <FluentAutocomplete Id="my-customized"
                                                        @ref="ContactList"
                                                        TOption="Tag"
                                                        Width="100%"
                                                        Placeholder="search"
                                                        OnOptionsSearch="@OnSearch"
                                                        MaximumSelectedOptions="2"
                                                        OptionText="@(item => item.Name)"
                                                        Virtualize="true"
                                                        OptionStyle="min-height: 40px;"
                                                        @bind-SelectedOptions="@CaseModel.SelectedTagsObjects" />
                                    <ValidationMessage For="() => CaseModel.SelectedTagsObjects" />
                                 
                                </div>



                                <div class="ask-4-file">
                                    <button class="btn btn-sm btn-orange btn-roboto" type="submit">Post</button>
                                </div>
                            </EditForm>
                        </div>
                    </section>

                </div>

            </div>


        </div>

    </div>
</div>


@code {
    [Parameter]
    public int caseId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }

    private bool hasError { get; set; } = false;

    private AddEditCaseViewModel CaseModel { get; set; } = new AddEditCaseViewModel() { };


    private List<MedicalSubCategory> CurrentSubCategoryList { get; set; } = new List<MedicalSubCategory>();
    private List<MedicalSubCategory> AllSubCategoryList { get; set; } = new List<MedicalSubCategory>();
    private List<Tag> AllTags { get; set; } = new List<Tag>();
    private string debug { get; set; } = "";

    private string fileName;
    private string imgUrl;

    private const int MAXTAGS = 25;
    private bool isSubmitted = false;
    private string newTag = "";
    public List<string> tagList = new List<string>();
    private bool isDeleteTag = false;
    private string TagFieldErrorMessage = "";
    private bool isTagOk = true;
    private bool IsAskHelpCase = true;

    private string seletedItems{ get; set; }
    private string AskHelpCaseClass
    {
        get
        {
            if (this.IsAskHelpCase)
                return "active";
            else return "";
        }
    }
    private string ClinicalKnowledgeCaseClass
    {
        get
        {
            if (!this.IsAskHelpCase)
                return "active";
            else return "";
        }
    }
    private string mainItemClass
    {
        get
        {
            if (this.IsAskHelpCase)
                return "orange";
            else return "";
        }
    }

    FluentAutocomplete<Tag> ContactList = default!;
    IEnumerable<Tag> SelectedItems = Array.Empty<Tag>();

    private void OnSearch(OptionsSearchEventArgs<Tag> e)
    {
        e.Items = AllTags.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)).OrderBy(i => i.Name);
    }

    protected override async Task OnInitializedAsync()
    {
        this.AllSubCategoryList = await commonService.GetAllSubcategories();
        this.AllTags = await commonService.GetAllTags();
        //  this.ContactList = await commonService.GetAllTags();
        SwitchCategory(MedicalCategory.MED);
    }


    private async Task Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task CreateCase()
    {
        CaseModel.imgUrl = imgUrl;
        if (this.IsAskHelpCase)
            CaseModel.Type = CaseType.AskForHelp;
        else
            CaseModel.Type = CaseType.ClinicalKnowledge;
        CaseModel.SelectedTags = CaseModel.SelectedTagsObjects.Select(x => x.ID).ToArray();
        var result = await hService.AddNewCase(CaseModel);
        if (result)
            NavigationManager.NavigateTo("/");
        else
            hasError = true;
    }


    private async void SwitchCategory(MedicalCategory category)
    {
        this.CurrentSubCategoryList = this.AllSubCategoryList.Where(x => x.MedicalCategory == category).ToList();
        this.CaseModel.MedicalSubCategoryId = 0;
    }

    private async Task OnSelectionChanged(ChangeEventArgs eventArgs)
    {
        // var selection = await GetSelections(_selectReference);
        // Model.SelectedOptions = selection;
    }

}
