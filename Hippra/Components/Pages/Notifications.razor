@page "/Notifications"

@using System.ComponentModel.DataAnnotations
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@* @inject HippraService hService
@inject ProfileService pService *@
@inject INotificationsService notificationService;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Extensions

<section class="notification-content">

    <div class="notification-layout">
        <!-- Notification Top -->
        <div class="notification-top">
            <h4>Notifications</h4>
            <div class="notification-switch">
                <div class="notification-caption">
                    <!-- <img src="./img/icons/bell-icon.svg" alt="">
                    <h6>Turn on notification badges.</h6> -->
                    <a href="/settings">Edit Notifications</a>
                </div>
                <!-- <label class="form-switch">
                  <input type="checkbox">
                  <span class="form-slider"></span>
                </label> -->

            </div>
        </div>
        <!-- Notification Tabs -->
        <div class="notification-tabs">
            <div class="notification-tab-item active">
                <button data-tab="notification-general" class="active">General</button>
            </div>
            <div class="notification-tab-item">
                <button data-tab="notification-posts" href="notifications-subscriptions.html" class="">My Posts</button>
            </div>
        </div>
        <!-- Notification Content -->
        <!-- General -->
        <div data-content="notification-general" class="notification-inner-content inside-scroll active" style="max-height: 344px; padding-bottom: 20px;">

            @if (Loaded == false)
            {
                <p>Loading</p>
            }
            else
            {
                <ul>
                    <!-- Notification Item Loop Here -->
                    @foreach (var notification in notifications.Where(x => x.IsGeneralNotification))
                    {
                        <li>
                            <a href="@notification.NavigationLink" class="notification-item" @onclick="()=>ReadNotification(notification)">
                                <div class="notification-avatar">
                                    <img src="@notification.SenderImage" alt="">
                                </div>
                                <div class="notification-info">
                                    <h6>@EnumsHelper.GetDisplayName(notification.Type) <span> @notification.PostTitle .</span></h6>
                                    <p>@notification.CreationDate</p>
                                </div>
                                <div class="notification-action">
                                    <!-- Set the "aria-disabled" attribute to "true" to remove the dot from the notification. -->
                                    @if (notification.IsNotificationRead)
                                    {
                                        <span aria-disabled="true"></span>
                                    }
                                    else
                                    {
                                        <span aria-disabled="false"></span>
                                    }
                                    <img src="./img/icons/chevron-right.svg" alt="">
                                </div>
                            </a>
                        </li>
                    }
                </ul>
            }
        </div>

        <!-- Posts : Add the "post" class to the notification-info for the color post title.  -->
        <div data-content="notification-posts" class="notification-inner-content inside-scroll" style="max-height: 586px; padding-bottom: 20px;">
            <ul>
                @if (Loaded == false)
                {
                    <p>Loading</p>
                }
                else
                {
                    @foreach (var notification in notifications.Where(x => !x.IsGeneralNotification))
                    {
                        <li>
                            <a href="@notification.NavigationLink" class="notification-item" @onclick="()=>ReadNotification(notification)">
                                <div class="notification-avatar">
                                    <img src="@notification.SenderImage" alt="">
                                </div>
                                <div class="notification-info">
                                    <h6>@EnumsHelper.GetDisplayName(notification.Type) <span> @notification.PostTitle .</span></h6>
                                    <p>@notification.CreationDate</p>
                                </div>
                                <div class="notification-action">
                                    <!-- Set the "aria-disabled" attribute to "true" to remove the dot from the notification. -->
                                    @if (notification.IsNotificationRead)
                                    {
                                        <span aria-disabled="true"></span>
                                    }
                                    else
                                    {
                                        <span aria-disabled="false"></span>
                                    }
                                    <img src="./img/icons/chevron-right.svg" alt="">
                                </div>
                            </a>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>

</section>

@code {

    [Parameter]
    public int actionOptions { get; set; } = 2; // 0 = profile, 1 = activity log, 2 = Notification


    IList<NotificationViewModel> notifications = new List<NotificationViewModel>();

    private string userId = "";
    private bool Loaded { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
                await GetNotificationResults(userId);
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    private async Task GetNotificationResults(string userId)
    {
        var results = await notificationService.GetAllNotificationsForUser(userId);
        if (results != null)
        {
            notifications = NotificationViewModel.FromEntityList(results);
        }
        else
        {
            notifications = new List<NotificationViewModel>();
        }
        Loaded = true;
        StateHasChanged();
    }

    private async Task ReadNotification(NotificationViewModel notification)
    {
        await notificationService.NotificationRead(notification.ID);
        notification.IsNotificationRead = true;
        NavigationManager.NavigateTo(notification.NavigationLink);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mainScripts.setupNotificationsTabs");
        }
    }

}
