@page "/Register"
@using Hippra.Models.DTO
@using Hippra.Models.Enums
@using Hippra.Models.ViewModel
@using Hippra.Services
@inject ProfileService pService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@layout LoginLayout
@inherits OwningComponentBase
<PageTitle>Register</PageTitle>
<div class="create-an-account">Create an Account</div>

@if (CurrentPage == 1)
{
    <div class="dot-progress">
        <svg class="frame-5004"
             width="794"
             height="43"
             viewBox="0 0 794 43"
             fill="none"
             xmlns="http://www.w3.org/2000/svg">
            <line x1="31"
                  y1="20.125"
                  x2="752.001"
                  y2="20.125"
                  stroke="#DA5810"
                  stroke-width="2" />
            <circle cx="18.5" cy="21.5" r="12.5" fill="#1DA39D" />
            <circle cx="764.5" cy="21.5" r="12.5" fill="#DA5810" />
            <circle cx="397.5" cy="21.5" r="12.5" fill="#DA5810" />
        </svg>
    </div>

    <div class="select-account-type">Select Account Type</div>
    <div class="center-container">
        <div class="form-wrapper-account-type">
            <EditForm EditContext="step1Context">
                <DataAnnotationsValidator />
                @*       <ValidationSummary  /> *@
                <input class="user-cred" type="text" placeholder="Email" @bind="@Step1InputModel.Email" />
                <p class="validation-error"> <ValidationMessage For="() => Step1InputModel.Email" /></p>
                @if (EmailExist)
                {
                    <p class="validation-error">Email is used in the system. </p>
                }
                <input class="user-cred" type="password" placeholder="Password" @bind="@Step1InputModel.Password" />
                <p class="sub-txt">
                    8+ characters, Uppercase, Lowercase, Number, Special characters.
                </p>
                <p class="validation-error"> <ValidationMessage For="() => Step1InputModel.Password" /></p>

                <input class="user-cred"
                       type="password"
                       placeholder="Confirm Password" @bind="@Step1InputModel.ConfirmPassword" />
                <p class="validation-error"> <ValidationMessage For="() => Step1InputModel.ConfirmPassword" /></p>
                <select class="dropdown-account-type" @bind="@Step1InputModel.AccountType" @bind:after="UserTypeSelected">
                    <option value="0" disabled selected>I'm a ...</option>
                    @foreach (UserAccountType i in Enum.GetValues(typeof(UserAccountType)))
                    {
                        <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                    }
                </select>
                <p class="validation-error"> <ValidationMessage For="() => Step1InputModel.AccountType" /></p>
            </EditForm>
        </div>
        <!--------------------------------------------------------------- Edited - End  -->
    </div>
}
@if (CurrentPage == 2)
{

    <div class="profile">Profile</div>
    <div class="form-container">

        <EditForm EditContext="step2Context" class="two-column-form">
            <DataAnnotationsValidator />
                <div class="column column-1 login-container">
                    <div class="input-field">
                        <input type="FirstName" placeholder="First Name" @bind="@Step2InputModel.FirstName">
                        <p class="validation-error">  <ValidationMessage For="() => Step2InputModel.FirstName" /></p>
                    </div>
                    <div class="input-field">
                        <input type="LastName" placeholder="Last Name" @bind="@Step2InputModel.LastName">
                        <p class="validation-error">   <ValidationMessage For="() => Step2InputModel.LastName" /></p>
                    </div>
                    @if (Step1InputModel.AccountType == UserAccountType.Nurse)
                    {

                        <div class="input-field">
                            <input type="ResHosp" placeholder="ID.Me" @bind="@Step2InputModel.IdMe">
                            <p class="validation-error">  <ValidationMessage For="() => Step2InputModel.IdMe" /></p>
                        </div>
                    }

                    <div class="input-field">
                        <input type="ResHosp" placeholder="National Provider Identifier (NPI)" @bind="@Step2InputModel.IdNumber">
                        <p class="validation-error">  <ValidationMessage For="() => Step2InputModel.IdNumber" /></p>
                    </div>

                    <span class="subtext"><i>You can change this later</i></span>

                    <div class="dropdown-container">
                        <select class="dropdown" placeholder="Medical Specialty">
                            <option value="0" disabled="" selected="">Medical Specialty</option>
                            @foreach (MedicalSpecialtyType i in Enum.GetValues(typeof(MedicalSpecialtyType)))
                            {
                                <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                            }
                        </select>
                        <p class="validation-error">   <ValidationMessage For="() => Step2InputModel.MedicalSpecialty" /></p>
                    </div>
                    <span class="subtext"><i>You can change this later</i></span>
                </div>

                <div class="column column-2 login-container">
                    <div class="input-field">
                        <input type="ResHosp" placeholder="Residency Hospital" @bind="@Step2InputModel.ResidencyHospital">
                        <p class="validation-error">  <ValidationMessage For="() => Step2InputModel.ResidencyHospital" /></p>
                    </div>
                    <div class="input-field">
                        <input type="MedSch" placeholder="Medical School Attended" @bind="@Step2InputModel.MedicalSchoolAttended">
                        <p class="validation-error">   <ValidationMessage For="() => Step2InputModel.MedicalSchoolAttended" /></p>
                    </div>
                    <div class="input-field">
                        <input type="Edu" placeholder="Education/Degree" @bind="@Step2InputModel.EducationDegree">
                        <p class="validation-error">   <ValidationMessage For="() => Step2InputModel.EducationDegree" /></p>
                    </div>
                    <div class="check-box">
                        <input type="checkbox" id="remember" name="remember" @bind="@Step2InputModel.AmericanBoardCertified">
                        <label for="remember">American Board Certified</label>
                        <p class="validation-error">   <ValidationMessage For="() => Step2InputModel.AmericanBoardCertified" /></p>
                    </div>
                </div>
        </EditForm>

        <!--------------------------------------------------------------- Edited - End  -->
    </div>
}

@if (CurrentPage == 3)
{

    <svg class="frame-5004" width="794" height="43" viewBox="0 0 794 43" fill="none" xmlns="http://www.w3.org/2000/svg">
        <line x1="387" y1="20.125" x2="752.001" y2="20.125" stroke="#1DA39D" stroke-width="2"></line>
        <line x1="31" y1="20.125" x2="391.5" y2="20.125" stroke="#1DA39D" stroke-width="2"></line>
        <circle cx="18.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
        <circle cx="764.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
        <circle cx="391.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
    </svg>

    <div class="profile">Contact</div>
    <div class="form-container">

        <EditForm EditContext="step3Context" OnValidSubmit="SubmitSignUp" class="two-column-form">
            <DataAnnotationsValidator />


            <div class="column column-1 login-container">
                <div class="input-field">
                    <input type="Address" placeholder="Address" @bind="@Step3InputModel.Address">
                    <p class="validation-error">   <ValidationMessage For="() => Step3InputModel.Address" /></p>
                </div>
                <div class="input-field">
                    <input type="City" placeholder="City" @bind="@Step3InputModel.City">
                    <p class="validation-error">    <ValidationMessage For="() => Step3InputModel.City" /> </p>
                </div>

                <div class="input-field">
                    <input type="State" placeholder="State" @bind="@Step3InputModel.State">
                    <p class="validation-error">   <ValidationMessage For="() => Step3InputModel.State" /></p>
                </div>
            </div>

            <div class="column column-2 login-container">
                <div class="input-field">
                    <input type="Zipcode" placeholder="Zipcode" @bind="@Step3InputModel.Zipcode">
                    <p class="validation-error">   <ValidationMessage For="() => Step3InputModel.Zipcode" /></p>
                </div>
                <div class="input-field">
                    <input type="City" placeholder="Country" @bind="@Step3InputModel.Country">
                    <p class="validation-error">  <ValidationMessage For="() => Step3InputModel.Country" /></p>
                </div>
                <div class="input-field">
                    <input type="Num" placeholder="Phone Number" @bind="@Step3InputModel.PhoneNumber">
                    <p class="validation-error">  <ValidationMessage For="() => Step3InputModel.PhoneNumber" /></p>
                </div>
            </div>

            <div class="check-box-agreement">
                <input type="checkbox" id="lolremember" name="lolremember" @bind="@Step3InputModel.AgreedTerm">
                <label for="lolremember">
                    I have read and agree to the terms presented in the
                    <span class="t-and-c"><a href="">Terms and Conditions</a></span>
                    agreement
                </label>
                <p class="validation-error">  <ValidationMessage For="() => Step3InputModel.AgreedTerm" /> </p>
            </div>

            <div class="sub-btn">
                <button type="submit" class="submit-btn btn">Submit</button>
            </div>
           
        </EditForm>

        <!--------------------------------------------------------------- Edited - End  -->
    </div>
    @if (hasError && ErrorMessages != null)
    {
        foreach (var error in ErrorMessages)
        {
            <p>@error</p>
        }
    }
}
@if (CurrentPage == 4)
{

    <svg class="frame-5004" width="794" height="43" viewBox="0 0 794 43" fill="none" xmlns="http://www.w3.org/2000/svg">
        <line x1="387" y1="20.125" x2="752.001" y2="20.125" stroke="#1DA39D" stroke-width="2"></line>
        <line x1="31" y1="20.125" x2="391.5" y2="20.125" stroke="#1DA39D" stroke-width="2"></line>
        <circle cx="18.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
        <circle cx="764.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
        <circle cx="391.5" cy="21.5" r="12.5" fill="#1DA39D"></circle>
    </svg>

    <div class="profile">Email Confirmation is sent. Please check your emails.</div>


}


<div class="h-logo">
    <svg class="h-color"
         width="241"
         height="196"
         viewBox="0 0 241 196"
         fill="none"
         xmlns="http://www.w3.org/2000/svg">
        <path d="M0 10.8737C0 4.90905 4.83532 0.0737305 10.8 0.0737305H25.6573C31.622 0.0737305 36.4573 4.90906 36.4573 10.8737V185.18C36.4573 191.145 31.622 195.98 25.6573 195.98H10.8C4.83533 195.98 0 191.145 0 185.18V10.8737Z"
              fill="#1DA39D"
              fill-opacity="0.1" />
        <path d="M236.93 79.1435H164.763C162.858 79.1435 161.314 77.5887 161.314 75.6713V3.47222C161.314 1.55478 159.77 0 157.865 0H128.305C126.401 0 124.857 1.55478 124.857 3.47222V75.6713C124.857 77.5887 123.312 79.1435 121.408 79.1435H49.2442C47.3397 79.1435 45.7954 80.6983 45.7954 82.6157V112.377C45.7954 114.294 47.3397 115.849 49.2442 115.849H121.412C123.316 115.849 124.86 117.404 124.86 119.321V192.438C124.86 194.356 126.405 195.91 128.309 195.91H157.869C159.773 195.91 161.318 194.356 161.318 192.438V119.321C161.318 117.404 162.862 115.849 164.766 115.849H236.934C238.838 115.849 240.383 114.294 240.383 112.377V82.6157C240.383 80.6983 238.838 79.1435 236.934 79.1435L236.93 79.1435Z"
              fill="#DA5810"
              fill-opacity="0.1" />
    </svg>
</div>

<!--------------------------------------------------------------- Edited - Start  -->
<div class="footer-acc-type">
    @*     <div class="footer-btn"><span>Next &gt;</span></div> *@
    @if (showLoading)
    {
        <p>Validating </p>
    }
    else
    {
        @if (CurrentPage > 1 && CurrentPage < 4)
        {
            <div class="footer-btn" @onclick="PreviousPage"><span>&lt; Back</span></div>
        }
        @if (CurrentPage < 3)
        {
            <div class="footer-btn" @onclick="NextPage"><span>Next &gt;</span></div>
        }
    }
</div>
<!--------------------------------------------------------------- Edited - End  -->
@code {
    private int CurrentPage { get; set; } = 1;
    private bool hasError { get; set; }
    private bool IsValid = true;
    private IList<String> ErrorMessages { get; set; }
    private bool showLoading = false;
    private RegisterAccountTypeViewModel Step1InputModel { get; set; } = new RegisterAccountTypeViewModel();
    private RegisterProfileViewModel Step2InputModel { get; set; } = new RegisterProfileViewModel();
    private RegisterContactViewModel Step3InputModel { get; set; } = new RegisterContactViewModel();

    private EditContext step1Context;
    private EditContext step2Context;
    private EditContext step3Context;
    private bool EmailExist { get; set; } = false;
    public async Task NextPage()
    {
        showLoading = true;
        if (await IsCurrentStepValid())
        {
            if (CurrentPage < 3)
                CurrentPage++;
        }
        showLoading = false;
    }

    private async Task<bool> IsCurrentStepValid()
    {
        var isValid = true;
        if (CurrentPage == 1)
        {
            if (!String.IsNullOrEmpty(Step1InputModel.Email))
            {
                EmailExist = await pService.IsEmailUsedInTheSystem(Step1InputModel.Email);
            }

            var isFormvalid = step1Context.Validate();
            isValid = !EmailExist && isFormvalid;
        }
        if (CurrentPage == 2)
        {
            isValid = step2Context.Validate();
        }
        if (CurrentPage == 3)
        {
            isValid = step3Context.Validate();
        }
        return isValid;
    }

    public void PreviousPage()
    {
        if (CurrentPage > 1)
            CurrentPage--;
    }

    protected override void OnInitialized()
    {

        //        profileService = (ProfileService)ScopedServices.GetService(typeof(ProfileService));
        step1Context = new(Step1InputModel);
        step2Context = new(Step2InputModel);
        step3Context = new(Step3InputModel);
    }

    private async Task SubmitSignUp()
    {
        hasError = false;

        var baseurl = NavigationManager.Uri;
        baseurl = baseurl.Remove(baseurl.Length - 10);

        var createUserRequestItem = new CreateUserRequestDto()
            {
                AccountType = Step1InputModel.AccountType,
                Email = Step1InputModel.Email,
                UserName = Step1InputModel.Email,
                Password = Step1InputModel.Password,
                ConfirmPassword = Step1InputModel.ConfirmPassword,
                FirstName = Step2InputModel.FirstName,
                LastName = Step2InputModel.LastName,
                IdMe = Step2InputModel.IdMe,
                IdNumber = Step2InputModel.IdNumber,
                MedicalSchoolAttended = Step2InputModel.MedicalSchoolAttended,
                MedicalSpecialty = Step2InputModel.MedicalSpecialty,
                ResidencyHospital = Step2InputModel.ResidencyHospital,
                EducationDegree = Step2InputModel.EducationDegree,
                AmericanBoardCertified = Step2InputModel.AmericanBoardCertified,
                Address = Step3InputModel.Address,
                City = Step3InputModel.City,
                AgreedTerm = Step3InputModel.AgreedTerm,
                Country = Step3InputModel.Country,
                PhoneNumber = Step3InputModel.PhoneNumber,
                State = Step3InputModel.State,
                Zipcode = Step3InputModel.Zipcode,
            };

        var result = await pService.RegisterUser(createUserRequestItem, baseurl);
        if (result.Item1 == true)
        {
            // 0 already signed in (this is me)
            // 1 PendingApproval
            // 2 RegisterConfirmation

            CurrentPage = 4;
            this.StateHasChanged();
        }
        else
        {
            ErrorMessages = result.Item2;
            hasError = true;
        }
    }

    private void UserTypeSelected()
    {
        // if (InputModel.AccountType >= UserAccountType.Nurse)
        //     NextPage();
    }


}
