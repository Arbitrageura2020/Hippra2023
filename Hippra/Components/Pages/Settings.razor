@page "/settings"

@using System.ComponentModel.DataAnnotations
@using Hippra.Components.Account
@using Hippra.Models.DTO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Models.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject HippraService hService
@inject ProfileService pService;
@inject CommonService commonService;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Extensions
@inject IAuthorizationService AuthorizationService
@inherits OwningComponentBase


<div class="main-layout">
    <section class="settings-content">
        <div>
            <div class="settings-layout">
                <div class="settings-nav">
                    <div class="settings-nav-item active">
                        <a href="settings.html" class="active">Profile &amp; Contact</a>
                    </div>
                    <div class="settings-nav-item">
                        <a href="account-password.html">Account &amp; Password</a>
                    </div>
                    <div class="settings-nav-item">
                        <a href="notifications-subscriptions.html">Notifications &amp; Subscriptions</a>
                    </div>

                </div>

                <div class="settings-profile">
                    <div class="settings-profile-form inside-scroll" style="max-height: 574px; padding-bottom: 20px;">
                        <EditForm  Model="UserProfile" OnValidSubmit="SaveProfile">
                            <!-- Profile Picture -->
                            <div class="settings-title">
                                <h4>Profile</h4>
                            </div>
                            <div class="settings-profile-top">

                                <div class="settings-profile-picture">
                                    <label for="uploadProfilePicture">Your Profile Picture</label>
                                    @*   <input id="uploadProfilePictureInput" type="file" hidden=""> *@
                                    <div class="settings-profile-preview">
                                        <img style="background-image: url('@DisplayProfileUrl');background-size: 100%;" alt="">

                                    </div>
                                    <button id="uploadProfilePictureBtn" type="button" @onclick="OpenFileClick">
                                        <img src="./img/icons/edit.svg" alt="">
                                        <span>Edit</span>
                                        <InputFile id="uploadProfilePictureInput" hidden="" type="file" OnChange="@HandleUploadProf" @ref="_filePicker" />
                                    </button>
                                  @*   @ref="_filePicker" *@
                                </div>
                                <div class="settings-profile-inputs">
                                    <div class="form-group">
                                        <label for="">First Name</label>
                                        <input type="text" class="form-control" placeholder="First Name" @bind="UserProfile.FirstName">
                                    </div>
                                    <div class="form-group">
                                        <label for="">Last Name</label>
                                        <input type="text" class="form-control" placeholder="Last Name" @bind="UserProfile.LastName">
                                    </div>
                                </div>
                            </div>
                            <!-- Profile Details -->
                            <div class="settings-details">
                                <div class="settings-row">
                                    <div class="form-group">
                                        <label for="">Profession</label>
                                        <div class="form-select-wrapper">
                                            <select class="form-select main" name="">
                                                <option value="" selected="" disabled="" hidden="">Please select your profession</option>
                                                <option value="option1">Option 1</option>
                                                <option value="option2">Option 2</option>
                                                <option value="option3">Option 3</option>
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="">Medical Specialty</label>
                                        <input type="text" class="form-control" placeholder="First Name" @bind="UserProfile.State">
                                    </div>
                                    <div class="form-group">
                                        <label for="">Medical Specialty</label>
                                        <div class="form-select-wrapper">
                                            <select class="form-select main" name="" @bind="UserProfile.MedicalSpecialty">
                                                <option value="0" disabled="" selected="">Please select your medical specialty</option>
                                                @foreach (MedicalSpecialtyType i in Enum.GetValues(typeof(MedicalSpecialtyType)))
                                                {
                                                    <option value="@i">@EnumsHelper.GetDisplayName(i)</option>
                                                }
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label for="">Timezone</label>
                                        <div class="form-select-wrapper">
                                            <select class="form-select main" name="">
                                                <option value="" selected="" disabled="" hidden="">Please select your country of residence</option>
                                                <option value="option1">Option 1</option>
                                                <option value="option2">Option 2</option>
                                                <option value="option3">Option 3</option>
                                            </select>
                                            <img src="./img/icons/chevron-down.svg" alt="">
                                        </div>
                                    </div>
                                    <div class="form-group settings-single">
                                        <label for="">Bio</label>
                                        <textarea class="form-control bio-textarea" placeholder="Tell us a bit about yourself" @bind="UserProfile.Bio"></textarea>
                                    </div>
                                </div>
                                <!-- Contact Settings -->
                                <div class="settings-contact">
                                    <div class="settings-title">
                                        <h4>Contact</h4>
                                    </div>
                                    <div class="settings-row">
                                        <div class="form-group phone">
                                            <label for="">Phone Number</label>
                                            <input type="number" class="form-control phone" placeholder="Please enter your phone number" @bind="UserProfile.PhoneNumber">
                                        </div>
                                        <div class="form-group">
                                            <label for="">Email</label>
                                            <input type="text" class="form-control" placeholder="Please enter your email" @bind="UserProfile.Email">
                                        </div>
                                        <div class="form-group">
                                            <label for="">State</label>
                                            <input type="text" class="form-control" placeholder="Please enter your state" @bind="UserProfile.City">
                                        </div>
                                        <div class="form-group">
                                            <label for="">City</label>
                                            <input type="text" class="form-control" placeholder="Please enter your city" @bind="UserProfile.State">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-submit">
                                <button type="submit" class="btn btn-lg btn-green">Update</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private string fileName = "";
    private string imgUrl = "";
    private string savedImgUrl = "";
    private string displayImgUrl = "";
    private bool isDeleted { get; set; } = false;
    private Profile UserProfile { get; set; } = new Profile();
    private string DisplayProfileUrl = "";
    private string guid { get; set; }

    private int lastHistoryID = -1;

    private string userId { get; set; }

    private bool Dataloaded = false;
    public ProfileService profileService;
    protected override async Task OnInitializedAsync()
    {


        authState = await authenticationStateTask;
        var user = authState.User;

        profileService = (ProfileService)ScopedServices.GetService(typeof(ProfileService));

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userId = user.Claims.FirstOrDefault(s => s.Type == "UserId")?.Value;
                if (!Dataloaded)
                {
                    UserProfile = await profileService.GetProfileById(userId);
                    Dataloaded = true;
                }
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
        }

        savedImgUrl = hService.GetImgStorageUrl() + "img";



        if (UserProfile.ProfileUrl != null)
        {
            DisplayProfileUrl = UserProfile.ProfileUrl;
        }
        else
        {
            DisplayProfileUrl = "/img/hippra/blank-profile.png";
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
      
    }

    private async Task OpenFileClick()
    {
        await JSRuntime.InvokeVoidAsync("HandleUploadButtonClick");
    }
    

    private InputFile _filePicker;
    private async Task OpenFilePicker()
        => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call",
            _filePicker.Element);

    public async Task HandleUploadProf(InputFileChangeEventArgs e)
    {
        if (UserProfile.ProfileUrl != null)
        {
            var deleteFile = UserProfile.ProfileUrl.Substring(57, UserProfile.ProfileUrl.Length - 57);
            var response = await hService.DeleteImage(deleteFile);
        }
        UserProfile.ProfileUrl = await HandleFileSelected(e);
        DisplayProfileUrl = UserProfile.ProfileUrl;
        await SaveProfile();
        //  await commonService.addToHistory("updated background picture", CurrentUser);
        StateHasChanged();
    }

    public async Task<string> HandleFileSelected(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (imageFile == null || imageFile.Size < 100)
            {
                StateHasChanged();
                return "";
            }

            if (imageFile.Name.Contains("png") ||
                imageFile.Name.Contains("jpg") ||
                imageFile.Name.Contains("jpeg") ||
                imageFile.Name.Contains("gif"))
            {
                //                string extension = imageFile.Name.Remove(0, 6);
                guid = Guid.NewGuid().ToString();
                //fileName = fileName + guid + "." + extension;
                fileName = fileName + guid + imageFile.Name;
                await hService.UploadImgToAzureAsync(imageFile.OpenReadStream(), fileName);

                return savedImgUrl + fileName;
            }
            else
            {

                return "";
            }

        }
        return "";


    }
    private async Task SaveProfile()
    {
        try
        {
            await pService.UpdateUserProfile(UserProfile);
        }
        catch (Exception e)
        {

            this.StateHasChanged();
            return;
        }
        @*
			PostHistory newHistory = new PostHistory();
			newHistory.ID = 0;
			newHistory.PostID = -1;
			newHistory.CreationDate = DateTime.Now;
			newHistory.UserID = usr.PublicId;
			newHistory.UserDisplayName = usr.FirstName + " " + usr.LastName;
			newHistory.Title = "Hippra";
			newHistory.Detail = "Profile updated";
			newHistory.HistoryTypes = "edited profile";
			await hService.AddHistory(newHistory);*@

     //   NavigationManager.NavigateTo("FTRefreshSignIn?returnUrl=PersonalPage/-1", true);
        this.StateHasChanged();
        return;

    }

    public async Task DeleteFile()
    {
        var response = await hService.DeleteImage(fileName);
        if (response)
        {
            isDeleted = true;
            imgUrl = "";
            displayImgUrl = "";
        }
        StateHasChanged();
    }


    private async Task viewPage(int id)
    {
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("/Settings");
    }

  
}

