@page "/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Hippra.Data

@inject SignInManager<AppUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>


<div class="log-in">Log In</div>
<StatusMessage Message="@errorMessage" />
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <div class="in-put">
        <div class="input-field">
            <InputText type="email" class="logininput" @bind-Value="Input.Email" placeholder="Email" />
            <p class="validation-error">
                <ValidationMessage For="() => Input.Email" />
            </p>
           
        </div>
        <div class="input-field">
            <InputText type="password" class="logininput" @bind-Value="Input.Password" placeholder="Password" />
            <p class="validation-error">
                <ValidationMessage For="() => Input.Password" />
            </p>
        </div>

    </div>

    <div class="remember-me">
        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
        <label for="remember">Remember my Account</label>
    </div>

    <button class="login-btn" type="submit">Log In</button>
</EditForm>
<div class="or-div">
    <p>Or</p>
    <a href="/forgotpassword" class="">Forgot Password</a><br><br>
    <a href="/register" class="">Register as New User</a>
</div>

<div class="h-logo">
    <svg class="h-color" width="241" height="196" viewBox="0 0 241 196" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M0 10.8737C0 4.90905 4.83532 0.0737305 10.8 0.0737305H25.6573C31.622 0.0737305 36.4573 4.90906 36.4573 10.8737V185.18C36.4573 191.145 31.622 195.98 25.6573 195.98H10.8C4.83533 195.98 0 191.145 0 185.18V10.8737Z" fill="#1DA39D" fill-opacity="0.1"></path>
        <path d="M236.93 79.1435H164.763C162.858 79.1435 161.314 77.5887 161.314 75.6713V3.47222C161.314 1.55478 159.77 0 157.865 0H128.305C126.401 0 124.857 1.55478 124.857 3.47222V75.6713C124.857 77.5887 123.312 79.1435 121.408 79.1435H49.2442C47.3397 79.1435 45.7954 80.6983 45.7954 82.6157V112.377C45.7954 114.294 47.3397 115.849 49.2442 115.849H121.412C123.316 115.849 124.86 117.404 124.86 119.321V192.438C124.86 194.356 126.405 195.91 128.309 195.91H157.869C159.773 195.91 161.318 194.356 161.318 192.438V119.321C161.318 117.404 162.862 115.849 164.766 115.849H236.934C238.838 115.849 240.383 114.294 240.383 112.377V82.6157C240.383 80.6983 238.838 79.1435 236.934 79.1435L236.93 79.1435Z" fill="#DA5810" fill-opacity="0.1"></path>
    </svg>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
