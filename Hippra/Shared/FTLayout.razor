@inherits LayoutComponentBase
@using Hippra.Models.FTDesign.Enums
@using Hippra.Pages.FTDesign
@using Hippra.Pages.FTDesign.Base
@using Hippra.Pages.FTDesign.Components
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign.Pages
@implements IDisposable

<CascadingValue Value="@IsDemoMode" Name="DEMO_MODE">
    <CascadingValue Value=@this Name="FT_LAYOUT">
        <CascadingValue Value="theme" Name="FT_THEME">
            <FTLayerHost>
                @if (IsDemoMode)
                {
                    // customization
                    @if (HasSidebar)
                    {
                        <FTSidebar />
                    }
                }
                else
                {
                    // customization
                    @if (HasSidebar)
                    {
                        <FTSidebar />
                    }
                }

                <div class="flex-grow-1 ft-main-bg">
                    <FTNavBar IsFixTop="NavFixTop" HasTopControls="HasTopControls" />
                    <div class="ft-main-nopad">
                        <FTCookieConsent />
                        @Body
                        

                    </div>
                    @if (HasFooter)
                    {
                        <FTFooter />
                    }
                </div>
            </FTLayerHost>
        </CascadingValue>

    </CascadingValue>
</CascadingValue>



@code{
    // configures
    public bool IsDemoMode = false;

    public ThemeOption theme = ThemeOption.LIGHT;
    public bool HasSidebar = false;
    public bool HasFooter = true;
    public bool NavFixTop = true;
    public bool HasTopControls = true;

    protected override async Task OnInitializedAsync()
    {

        if (IsDemoMode)
        {
            HasSidebar = true;
            HasFooter = true;
            NavFixTop = true;
            HasTopControls = true;
        }
    }

    private bool isDisposed { get; set; } = false;
    public void Dispose()
    {
        isDisposed = true;
    }

    public void ChangeTheme(ThemeOption newOption)
    {
        theme = newOption;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }

    public void ToggleSidebar()
    {
        HasSidebar = !HasSidebar;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }

    public void ToggleFooter()
    {
        HasFooter = !HasFooter;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }
    public void ToggleNavFixTop()
    {
        NavFixTop = !NavFixTop;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }
    public void ToggleTopControls()
    {
        HasTopControls = !HasTopControls;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }

    public void ToggleDemoMode()
    {
        IsDemoMode = !IsDemoMode;
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }





}