
@if (IsMinMode)
{
    <button class="btn @BtnCustomCssClass ft-sidebar-expand-btn" @onclick="ToggleMode"><i class="ms-Icon ms-Icon--ExpandMenu" aria-hidden="true"></i></button>
}
else
{
<div class="ft-sidebar-header-container">
    <i class="ms-Icon ms-Icon--Rocket @TextColorCustomCssClass mr-2" aria-hidden="true"></i>
    <div class="flex-grow-1 @TextColorCustomCssClass ">
        <span class="ms-fontWeight-regular ms-fontSize-24">  FTDesign</span>
    </div>
    <button class="btn @BtnCustomCssClass ft-btn-round" @onclick="ToggleMode"><i class="ms-Icon ms-Icon--CollapseMenu" aria-hidden="true"></i></button>
</div>
}





@code {
    [Parameter]
    public EventCallback ToggleMode { get; set; }
    [Parameter]
    public bool IsMinMode { get; set; } = false;

    [CascadingParameter(Name="FT_THEME")]
    public ThemeOption themeOption { get; set; } = ThemeOption.DARK;
    private string BtnCustomCssClass { get; set; } = "";
    private string TextColorCustomCssClass { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        switch (themeOption)
        {
            case ThemeOption.LIGHT:
                BtnCustomCssClass = "btn-light";
                TextColorCustomCssClass = "text-dark";
                break;
            case ThemeOption.FT_LIGHT:
                BtnCustomCssClass  = "ft-btn-light";
                TextColorCustomCssClass = "text-dark";
                break;
            case ThemeOption.FT_DARK:
                BtnCustomCssClass = "ft-btn-dark";
                TextColorCustomCssClass = "text-white";
                break;
            default:
            case ThemeOption.DARK:
                BtnCustomCssClass = "btn-dark";
                TextColorCustomCssClass = "text-white";
                break;
        }


    }
}
