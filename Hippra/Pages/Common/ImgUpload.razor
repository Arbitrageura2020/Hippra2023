@using Hippra.API
@using Hippra.Services
@inject HippraService hService


@using Hippra.Services

@inject HippraService hService

    <InputFile OnChange="HandleFileSelected" />

    @if (!string.IsNullOrWhiteSpace(displayImgUrl))
    {
        <p><img src="@displayImgUrl" /></p>
        <div class="btn btn-outline-danger" @onclick="DeleteFile">
            delete
        </div>
    }
    else
    {
        if (isDeleted)
        {
            <p>File Deleted</p>
        }
    }

@code {
    [Parameter]
    public string fileName { get; set; } = "";
    [Parameter]
    public string imgUrl { get; set; } = "";

    private string savedImgUrl = "";
    private string displayImgUrl = "";

    [Parameter]
    public EventCallback<string> fileNameChanged { get; set; }
    [Parameter]
    public EventCallback<string> imgUrlChanged { get; set; }

    IFileListEntry file;

    private bool isDeleted { get; set; } = false;
    private int counter { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        displayImgUrl = imgUrl;
        savedImgUrl = hService.GetImgStorageUrl() + "img" + fileName;
    }

    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();

        if (file == null)
        {
            StateHasChanged();
            return;
        }
        if (file.Size < 100)
        {
            StateHasChanged();
            return;
        }
        if (file.Type.Contains("png") || file.Type.Contains("jpg") || file.Type.Contains("jpeg") || file.Type.Contains("gif"))
        {
            string extension = file.Type.Remove(0, 6);
            fileName = fileName + "." + extension;
            await hService.UploadImgToAzureAsync(file.Data, fileName);
            imgUrl = savedImgUrl;
            displayImgUrl = imgUrl + "?" + counter++;
            isDeleted = false;
            imgUrlChanged.InvokeAsync(imgUrl);
            StateHasChanged();
            return;
        }
        else
        {
            StateHasChanged();
            return;
        }
    }

    public async Task DeleteFile()
    {
        var response = await hService.DeleteImage(fileName);
        if (response)
        {
            isDeleted = true;
            imgUrl = "";
            displayImgUrl = "";
            imgUrlChanged.InvokeAsync(imgUrl);
        }
        StateHasChanged();
    }
    private Task OnfileNameChanged(ChangeEventArgs e)
    {
        fileName = e.Value.ToString();
        return fileNameChanged.InvokeAsync(fileName);
    }

    private Task OnimgUrlChanged(ChangeEventArgs e)
    {
        imgUrl = e.Value.ToString();
        return imgUrlChanged.InvokeAsync(imgUrl);
    }


}








@*<InputFile multiple OnChange="HandleFileSelected" />

@if (selectedFiles != null)
{
    //foreach (var file in selectedFiles)
    for (int i = 0; i < selectedFiles.Count(); i++)
    {
        <div>
            <h2>@selectedFiles[i].Name</h2>
            Size: <strong>@selectedFiles[i].Size bytes</strong>;
            Last modified: <strong>@selectedFiles[i].LastModified.ToShortDateString()</strong>;
            Type: <strong>@selectedFiles[i].Type</strong>
            <img src=@img_names.ElementAt(i) height=10% width=10% />
        </div>
    }
}


@code {
    // reference code https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/
    IFileListEntry[] selectedFiles;

    List<string> img_names = new List<string>();



    [Parameter]
    public int CaseId { get; set; } = -1;

    private async Task<string> HandleFileSelected(IFileListEntry[] files)
    {

        selectedFiles = files;
        Console.WriteLine(selectedFiles);

        int i = 0;
        foreach (var file in files)
        {

            // file = files.FirstOrDefault();
            if ((file.Type == "image/jpeg" || file.Type == "image/png" || file.Type == "image/gif") && file.Size > 0)
            {
                Console.WriteLine("This is a valid file");

                string extension = file.Type.Remove(0, 6);
                string img_url = CaseId + "_" + i++ + "_." + extension;

                string image_uri = "http://127.0.0.1:10000/devstoreaccount1/hipprastorage/img_" + img_url;
                img_names.Add(image_uri);

                Console.WriteLine("Count is " + img_names.Count);

                img_names.ForEach(Console.WriteLine);
                await hService.ImageUploadFunc(file.Data, img_url);
                // do something after validation

            }
            Console.WriteLine(file.Type);
            Console.WriteLine(file.Name);
            Console.WriteLine(file.Size);
        }

        return "done!";
    }
}*@
