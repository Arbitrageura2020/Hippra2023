@using Hippra.Services
@inject HippraService hService
@*<InputFile OnChange="HandleFileSelected" />*@
<InputFile OnChange="@HandleFileSelected" />

@if (!string.IsNullOrWhiteSpace(displayImgUrl))
{
    <p><img src="@displayImgUrl" width="40%" /></p>
    <div class="btn btn-outline-danger" @onclick="DeleteFile">
        delete
    </div>
}
else
{
    if (isDeleted)
    {
        <p>File Deleted</p>
    }
}

@code {
    [Parameter]
    public string fileName { get; set; } = "";
    [Parameter]
    public string imgUrl { get; set; } = "";

    private string savedImgUrl = "";
    private string displayImgUrl = "";

    [Parameter]
    public EventCallback<string> fileNameChanged { get; set; }
    [Parameter]
    public EventCallback<string> imgUrlChanged { get; set; }

    @*IFileListEntry file;*@

private bool isDeleted { get; set; } = false;
private int counter { get; set; } = 0;

protected override async Task OnInitializedAsync()
{
    displayImgUrl = imgUrl;
    savedImgUrl = hService.GetImgStorageUrl() + "img" + fileName;
}

public async Task HandleFileSelected(InputFileChangeEventArgs e)
{
    var maxAllowedFiles = 1;
    var format = "image/png";

    foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
    {
        if (imageFile == null || imageFile.Size < 100)
        {
            StateHasChanged();
            return;
        }

        if (imageFile.Name.Contains("png") ||
            imageFile.Name.Contains("jpg") ||
            imageFile.Name.Contains("jpeg") ||
            imageFile.Name.Contains("gif"))
        {
            string extension = imageFile.Name.Remove(0, 6);
            fileName = fileName + "." + extension;

            var buffer = new byte[imageFile.Size];
            await hService.UploadImgToAzureAsync(imageFile.OpenReadStream(), fileName);

            imgUrl = savedImgUrl + "." + extension;
            displayImgUrl = imgUrl + "?" + counter++;
            isDeleted = false;
            imgUrlChanged.InvokeAsync(imgUrl);


            StateHasChanged();
            return;
        }
        else
        {
            StateHasChanged();
            return;
        }



            @*var buffer = new byte[imageFile.Size];

                var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                    100, 100);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                var imageDataUrl =
                    $"data:{format};base64,{Convert.ToBase64String(buffer)}";

                imageDataUrls.Add(imageDataUrl);*@
        }


    }

    public async Task DeleteFile()
    {
        var response = await hService.DeleteImage(fileName);
        if (response)
        {
            isDeleted = true;
            imgUrl = "";
            displayImgUrl = "";
            imgUrlChanged.InvokeAsync(imgUrl);
        }
        StateHasChanged();
    }
    private Task OnfileNameChanged(ChangeEventArgs e)
    {
        fileName = e.Value.ToString();
        return fileNameChanged.InvokeAsync(fileName);
    }

    private Task OnimgUrlChanged(ChangeEventArgs e)
    {
        imgUrl = e.Value.ToString();
        return imgUrlChanged.InvokeAsync(imgUrl);
    }
}