@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Services
@using Hippra.Pages.FTDesign.Features
@using Hippra.Models.Enums
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IOptions<AppSettings> settings
@inject HippraService hService
@inject IJSRuntime JSRuntime
@inject ProfileService pService
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager

<div class="m-2">
    @if (CommentList == null || CommentList.Count == 0)
    {
        <div class="d-block text-black-50 text-right mb-2">
            0 Comments
        </div>
    }
    else
    {
        if (isOpened)
        {
            <div class="d-block text-black-50 text-right ">
                @CommentList.Count Comments
            </div>
            <hr />
            @foreach (var c in CommentList)
            {
                if (c.ID != EditThis)
                {
                    <div class="row">
                        <div class="col vote-bar">
                            <div class="row-md-1 wrap-button-up">
                                <button class="btn vote-button-up bg-light" @onclick="(e => { UpdateComment(c, -3); })"><span class="fa fa-caret-square-o-up"></span></button>
                                <div class="up-content"><p>This answer is useful.</p></div>
                            </div>
                            <div class="row-md-1" style="color:red">
                                @c.VoteUp
                            </div>
                            <div class="row-md-1" style="color:black">
                                @c.VoteDown
                            </div>
                            <div class="row-md-1 wrap-button-down">
                                <button class="btn vote-button-down bg-light" @onclick="(e => { UpdateComment(c, -4); })"><span class="fa fa-caret-square-o-down"></span></button>
                                <div class="down-content">This answer is not useful.</div>
                            </div>
                        </div>
                        <div class="col justify-content-start" style="margin-bottom:90px;">
                            <div class="p-4 mb-4 bg-light rounded">
                                <div style="margin-bottom: 10px;">
                                    <button class="circle-pic-personal circle-badge" style="background-image:url('@c.ProfileUrl') ;background-size: 100%;" @onclick="(e => { viewPage(c.PosterId); })"></button>
                                    <strong class="comment-pic-item"> @c.PosterName </strong> <span class="text-black-50 comment-pic-item">( @c.posterSpeciality )</span>
                                </div>
                                <div class="px-4">
                                    @c.Comment
                                </div>
                                <div class="px-4">
                                    @if (!string.IsNullOrWhiteSpace(c.imgUrl))
                                    {
                                        <label class="label-img">
                                            <input type="checkbox">
                                            <img id="caseImg" src="@c.imgUrl" width="20%" height="20%" />
                                        </label>
                                    }
                                </div>
                                <div class="text-right text-black-50">
                                    <small>@c.LastUpdatedDate</small>
                                </div>
                            </div>

                            <div>
                                @if (dataReady && c.PosterId == usr.PublicId)
                                {
                                    <button class="comment-button" @onclick="(e => { EditComment(c.ID); })">Edit</button>
                                    <button class="comment-button" @onclick="(e => { DeleteComment(c); })">Delete</button>
                                }
                            </div>

                        </div>
                    </div>

                }
                else
                {
                    <div class="p-2 mb-2 bg-warning rounded">

                        <div style="color: Black">New Comment:</div>
                        <div>
                            <EditForm Model="@newComment" OnValidSubmit="(e => { UpdateComment(c,-2); })">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="input-group mb-3">
                                    <InputText class="form-control" id="" required placeholder="Write a Comment" @bind-Value="@c.Comment" aria-label="Comment" aria-describedby="Edit a Comment" />
                                    <div class="input-group-append">
                                        <button id="comment-button" type="submit" class="btn btn-primary">Save</button>
                                    </div>
                                </div>
                                <div class="px-4">
                                    @if (!string.IsNullOrWhiteSpace(c.imgUrl))
                                    {
                                        <label class="label-img">
                                            <input type="checkbox">
                                            <img id="caseImg" src="@c.imgUrl" width="20%" height="20%" />
                                        </label>
                                        <div class="btn btn-outline-danger" @onclick="(e => { DeleteFile(c); })">
                                            delete
                                        </div>
                                    }
                                    else
                                    {
                                        <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>

                                    }
                                </div>

                            </EditForm>
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <div class="d-block text-right text-black-50 mb-2" @onclick="OpenComment">
                @CommentList.Count Comments
            </div>
        }
    }
    <div>
        <EditForm Model="@newComment" OnValidSubmit="@AddComment">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group mb-3">
                <InputText class="form-control" id="" required placeholder="Write a Comment" @bind-Value="@newComment.Comment" aria-label="Comment" aria-describedby="Write a Comment" />
                <div class="input-group-append">
                    <button id="comment-button" type="submit" class="btn btn-primary">Comment</button>
                </div>
            </div>
            <div class="border">
                <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int postId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private AppUser usr { get; set; }
    [Parameter]
    public List<CaseComment> CommentList { get; set; }
    [Parameter]
    public bool isOpened { get; set; }
    private CaseComment newComment = new CaseComment();
    private Profile profile { get; set; } = new Profile();

    private int EditThis = -1;
    private string fileName;
    private string imgUrl;
    private bool isSubmitted;
    private string[] imgUrls;
    private Case caseInfo = new Case();
    private int lastHistoryID = -1;
    private bool dataReady = false;

    public async Task EditComment(int ID)
    {
        EditThis = ID;
        this.StateHasChanged();
    }
    public async Task DeleteComment(CaseComment c)
    {

        isSubmitted = false;
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);
            if (usr != null)
            {
                await hService.DeleteComment(c.ID);

                isSubmitted = true;
            }
        }
        CommentList = await hService.GetCommentsNoTracking(postId);
        await getProfilePic();
        await addToHistory("deleted a comment on", c);
        await addNotification();
        this.StateHasChanged();
    }
    public async Task DeleteFile(CaseComment c)
    {
        c.imgUrl = "";
    }
    protected override async Task OnInitializedAsync()
    {
        
        authState = await authenticationStateTask;
        user = authState.User;
        caseInfo = await hService.GetCase(postId);

        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);
        }
        await getProfilePic();
        dataReady = true;
        OpenComment();
    }

    private async Task OpenComment()
    {
        isOpened = true;
        isSubmitted = false;
        this.StateHasChanged();
    }
    private async Task AddComment()
    {
        isSubmitted = false;
        authState = await authenticationStateTask;
        user = authState.User;
        CaseComment addComment = new CaseComment();
        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);
            if (usr != null)
            {
                addComment.PosterId = usr.PublicId;
                addComment.PosterName = usr.FirstName + " " + usr.LastName;
                addComment.PostedDate = DateTime.Now;
                addComment.LastUpdatedDate = newComment.PostedDate;
                addComment.posterSpeciality = ParseMedicalSpecialty((MedicalSpecialtyType)usr.MedicalSpecialty);
                addComment.CaseID = postId;
                addComment.ID = 0;
                addComment.Comment = newComment.Comment;
                if (profile.ProfileUrl != null)
                {
                    addComment.ProfileUrl = profile.ProfileUrl;
                }
                else
                {
                    addComment.ProfileUrl = "/img/hippra/blank-profile.png";
                }
                if (!string.IsNullOrWhiteSpace(imgUrl))
                {
                    addComment.imgUrl = imgUrl;
                }

                await hService.AddComment(addComment);

                isSubmitted = true;
            }
        }
        newComment.Comment = "";
        CommentList = await hService.GetCommentsNoTracking(postId);
        await getProfilePic();
        imgUrl = "";
        newComment.imgUrl = "";
        isOpened = true;
        await addToHistory("added a comment on", newComment);
        await addNotification();
        this.StateHasChanged();
    }
    private async Task UpdateComment(CaseComment c, int updateType)
    {
        isSubmitted = false;
        authState = await authenticationStateTask;
        user = authState.User;
        CaseComment addComment = new CaseComment();
        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);
            if (usr != null)
            {
                addComment.ID = c.ID;
                addComment.Comment = c.Comment;
                addComment.ProfileUrl = c.ProfileUrl;
                if (!string.IsNullOrWhiteSpace(imgUrl))
                {
                    addComment.imgUrl = imgUrl;
                }
                else if (!string.IsNullOrWhiteSpace(c.imgUrl))
                {
                    addComment.imgUrl = c.imgUrl;
                }
                if (updateType == -2)
                {
                    addComment.PostedDate = c.PostedDate;
                    addComment.LastUpdatedDate = newComment.PostedDate;
                    addComment.CaseID = postId;
                    addComment.VoteUp = c.VoteUp;
                    addComment.VoteDown = c.VoteDown;
                    await addToHistory("updated a comment on", c);
                    await addNotification();
                    await hService.EditComment(addComment, updateType);
                }
                else if ((updateType == -3 || updateType == -4) && usr.PublicId != c.PosterId)
                {
                    bool isVoted = await hService.CheckVoter(c.PosterId, usr.PublicId, c.ID);
                    if (!isVoted)
                    {
                        if (updateType == -3)
                        {
                            addComment.VoteUp = c.VoteUp + 1;
                            await addToHistory("added an up vote on", c);
                            await addNotification();
                        }
                        else
                        {
                            addComment.VoteDown = c.VoteDown + 1;
                            await addToHistory("added a down vote on", c);
                            await addNotification();
                        }
                        Vote newVote = new Vote();
                        newVote.ID = 0;
                        newVote.CID = c.ID;
                        newVote.VoteType = updateType;
                        newVote.PosterID = c.PosterId;
                        newVote.VoterID = usr.PublicId;
                        newVote.VoteDate = DateTime.Now;
                        await hService.AddVote(newVote);
                        await hService.EditComment(addComment, updateType);
                    }

                }
                isSubmitted = true;
            }
        }
        EditThis = -1;
        newComment.Comment = "";
        CommentList = await hService.GetCommentsNoTracking(postId);
        await getProfilePic();
        imgUrl = "";
        newComment.imgUrl = "";
        newComment.ProfileUrl = "";
        isOpened = true;
        this.StateHasChanged();
    }
    private async Task addToHistory(string historyType, CaseComment c)
    {
        //history stuffs
        PostHistory newHistory = new PostHistory();
        newHistory.ID = 0;
        newHistory.PostID = postId;
        newHistory.UserID = c.PosterId;
        newHistory.CreationDate = DateTime.Now;
        newHistory.PosterID = usr.PublicId;
        newHistory.UserDisplayName = usr.FirstName + " " + usr.LastName;
        newHistory.UserDisplayName2 = c.PosterName;
        newHistory.Title = caseInfo.Topic;
        newHistory.Detail = caseInfo.Description;
        newHistory.HistoryTypes = historyType;
        lastHistoryID = await hService.AddHistory(newHistory);
    }
    private async Task addNotification()
    {
        bool hasPoster = false;
        List<Follow> followerList = new List<Follow>();
        followerList = await hService.GetAllFollowers(usr.PublicId);
        foreach (var follower in followerList)
        {
            if(follower.FollowerUserID == caseInfo.PosterID || usr.PublicId != caseInfo.PosterID)
            {
                hasPoster = true;
            }
            Notification newNotifs = new Notification();
            newNotifs.ID = 0;
            newNotifs.SenderID = follower.FollowingUserID;
            newNotifs.ReceiverID = follower.FollowerUserID;
            newNotifs.NotificationID = lastHistoryID;
            newNotifs.IsRead = -1;
            newNotifs.IsResponseNeeded = -1;
            newNotifs.CreationDate = DateTime.Now;
            await hService.AddNotification(newNotifs);
        }
        if (!hasPoster && usr.PublicId != caseInfo.PosterID)
        {
            Notification newNotifs = new Notification();
            newNotifs.ID = 0;
            newNotifs.SenderID = usr.PublicId;
            newNotifs.ReceiverID = caseInfo.PosterID;
            newNotifs.NotificationID = lastHistoryID;
            newNotifs.IsRead = -1;
            newNotifs.IsResponseNeeded = -1;
            newNotifs.CreationDate = DateTime.Now;
            await hService.AddNotification(newNotifs);
        }
    }
    private async Task viewPage(int id)
    {
        NavigationManager.NavigateTo("/PersonalPage/" + id);
    }
    private string ParseMedicalSpecialty(MedicalSpecialtyType MedicalSpecialty)
    {

        string medicalSpecialty = "";
        switch (MedicalSpecialty)
        {
            case MedicalSpecialtyType.Anesthesiology:
                medicalSpecialty = "Anesthesiology";
                break;
            case MedicalSpecialtyType.AnatomicPathologyAndClinicalPathology:
                medicalSpecialty = "Anatomic Pathology And Clinical Pathology";
                break;
            case MedicalSpecialtyType.ColonAndRectalSurgery:
                medicalSpecialty = "Colon And Rectal Surgery";
                break;
            case MedicalSpecialtyType.Dermatology:
                medicalSpecialty = "Dermatology";
                break;
            case MedicalSpecialtyType.EmergencyMedicine:
                medicalSpecialty = "Emergency Medicine";
                break;
            case MedicalSpecialtyType.FamilyMedicine:
                medicalSpecialty = "Family Medicine";
                break;
            case MedicalSpecialtyType.HospiceAndPalliativeMedicine:
                medicalSpecialty = "Hospice And Palliative Medicine";
                break;
            case MedicalSpecialtyType.InternalMedicine:
                medicalSpecialty = "Internal Medicine";
                break;
            case MedicalSpecialtyType.MedicalGenetics:
                medicalSpecialty = "Medical Genetics";
                break;
            case MedicalSpecialtyType.MedicalNuclearPhysics:
                medicalSpecialty = "Medical Nuclear Physics";
                break;
            case MedicalSpecialtyType.Neurology:
                medicalSpecialty = "Neurology";
                break;
            case MedicalSpecialtyType.Neurosurgery:
                medicalSpecialty = "Neurosurgery";
                break;
            case MedicalSpecialtyType.NuclearMedicine:
                medicalSpecialty = "NuclearMedicine";
                break;
            case MedicalSpecialtyType.ObstetricsAndGynecology:
                medicalSpecialty = "Obstetrics And Gynecology";
                break;
            case MedicalSpecialtyType.Ophthalmology:
                medicalSpecialty = "Ophthalmology";
                break;
            case MedicalSpecialtyType.OrthopedicSurgery:
                medicalSpecialty = "Orthopedic Surgery";
                break;
            case MedicalSpecialtyType.Otolaryngology:
                medicalSpecialty = "Otolaryngology";
                break;
            case MedicalSpecialtyType.Pediatrics:
                medicalSpecialty = "Pediatrics";
                break;
            case MedicalSpecialtyType.PhysicalMedicineAndRehibilitation:
                medicalSpecialty = "Physical Medicine And Rehibilitation";
                break;
            case MedicalSpecialtyType.PlasticSurgery:
                medicalSpecialty = "Plastic Surgery";
                break;
            case MedicalSpecialtyType.Psychiatry:
                medicalSpecialty = "Psychiatry";
                break;
            case MedicalSpecialtyType.PublicHealthAndGeneralPreventive:
                medicalSpecialty = "Public Health And General Preventive";
                break;
            case MedicalSpecialtyType.Radiology:
                medicalSpecialty = "Radiology";
                break;
            case MedicalSpecialtyType.Surgery:
                medicalSpecialty = "Surgery";
                break;
            case MedicalSpecialtyType.ThoracicSurgery:
                medicalSpecialty = "Thoracic Surgery";
                break;
            case MedicalSpecialtyType.Urology:
                medicalSpecialty = "Urology";
                break;
            case MedicalSpecialtyType.VascularSurgery:
                medicalSpecialty = "Vascular Surgery";
                break;
            default:
                break;
        }
        return medicalSpecialty;
    }
    private async Task getProfilePic()
    {
        foreach (var c in CommentList)
        {
            profile = new Profile();
            profile = await pService.GetProfile(c.PosterId);
            if (profile.ProfileUrl != null)
            {
                c.ProfileUrl = profile.ProfileUrl;
            }
            else
            {
                c.ProfileUrl = "/img/hippra/blank-profile.png";
            }
        }

    }
}
