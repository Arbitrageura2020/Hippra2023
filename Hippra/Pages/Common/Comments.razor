@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Services
@using Hippra.Pages.FTDesign.Features
@using Hippra.Models.Enums
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IOptions<AppSettings> settings
@inject HippraService hService
@inject IJSRuntime JSRuntime

<div class="m-2">
    @if (CommentList == null || CommentList.Count == 0)
    {
        <div class="d-block text-black-50 text-right mb-2">
            0 Comments
        </div>
    }
    else
    {
        if (isOpened)
        {
            <div class="d-block text-black-50 text-right ">
                @CommentList.Count Comments
            </div>
            <hr />
            @foreach (var c in CommentList)
            {
<div class="p-2 mb-2 bg-light rounded">
    <div class="">
        <strong> @c.PosterName </strong> <span class="text-black-50">( @c.posterSpeciality )</span>
    </div>
    <div class="px-4">
        @c.Comment
    </div>
    <div class="px-4">
        @if (!string.IsNullOrWhiteSpace(c.imgUrl))
        {
        <label class="label-img">
            <input type="checkbox">
            <img id="caseImg" src="@c.imgUrl" width="20%" height="20%" />
        </label>
        }
    </div>
    <div class="text-right text-black-50">
        <small>@c.LastUpdatedDate</small>
    </div>
</div>
            }
        }
        else
        {
            <div class="d-block text-right text-black-50 mb-2" @onclick="OpenComment">
                @CommentList.Count Comments
            </div>
        }
    }
    <div>
        <EditForm Model="@newComment" OnValidSubmit="@AddComment">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group mb-3">
                <InputText class="form-control" id="" required placeholder="Write a Comment" @bind-Value="@newComment.Comment" aria-label="Comment" aria-describedby="Write a Comment" />
                <div class="input-group-append">
                    <button id="comment-button" type="submit" class="btn btn-primary">Comment</button>
                </div>
            </div>
            <div class="border">
                <CmtImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl" @bind-isSubmitted="isSubmitted"></CmtImgUpload>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int postId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private AppUser usr { get; set; }
    [Parameter]
    public List<CaseComment> CommentList { get; set; }
    [Parameter]
    public bool isOpened { get; set; }
    private CaseComment newComment = new CaseComment();

    private string fileName;
    private string imgUrl;
    private bool isSubmitted;

    protected override async Task OnInitializedAsync()
    {
        OpenComment();
    }

    private async Task OpenComment()
    {
        isOpened = true;
        isSubmitted = false;
        this.StateHasChanged();
    }
    private async Task AddComment()
    {
        isSubmitted = false;
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);
            if (usr != null)
            {
                newComment.PosterId = usr.PublicId;
                newComment.PosterName = usr.FirstName + " " + usr.LastName;
                newComment.PostedDate = DateTime.Now;
                newComment.LastUpdatedDate = newComment.PostedDate;
                newComment.posterSpeciality = ParseMedicalSpecialty((MedicalSpecialtyType)usr.MedicalSpecialty);
                newComment.CaseID = postId;
                newComment.ID = 0;

                if (!string.IsNullOrWhiteSpace(imgUrl))
                {
                    newComment.imgUrl = imgUrl;
                }

                await hService.AddComment(newComment);

                isSubmitted = true;
            }
        }
        newComment.Comment = "";
        CommentList = await hService.GetCommentsNoTracking(postId);
        imgUrl = "";
        newComment.imgUrl = "";
        isOpened = true;
        this.StateHasChanged();
    }
    private string ParseMedicalSpecialty(MedicalSpecialtyType MedicalSpecialty)
    {

        string medicalSpecialty = "";
        switch (MedicalSpecialty)
        {
            case MedicalSpecialtyType.Anesthesiology:
                medicalSpecialty = "Anesthesiology";
                break;
            case MedicalSpecialtyType.AnatomicPathologyAndClinicalPathology:
                medicalSpecialty = "Anatomic Pathology And Clinical Pathology";
                break;
            case MedicalSpecialtyType.ColonAndRectalSurgery:
                medicalSpecialty = "Colon And Rectal Surgery";
                break;
            case MedicalSpecialtyType.Dermatology:
                medicalSpecialty = "Dermatology";
                break;
            case MedicalSpecialtyType.EmergencyMedicine:
                medicalSpecialty = "Emergency Medicine";
                break;
            case MedicalSpecialtyType.FamilyMedicine:
                medicalSpecialty = "Family Medicine";
                break;
            case MedicalSpecialtyType.HospiceAndPalliativeMedicine:
                medicalSpecialty = "Hospice And Palliative Medicine";
                break;
            case MedicalSpecialtyType.InternalMedicine:
                medicalSpecialty = "Internal Medicine";
                break;
            case MedicalSpecialtyType.MedicalGenetics:
                medicalSpecialty = "Medical Genetics";
                break;
            case MedicalSpecialtyType.MedicalNuclearPhysics:
                medicalSpecialty = "Medical Nuclear Physics";
                break;
            case MedicalSpecialtyType.Neurology:
                medicalSpecialty = "Neurology";
                break;
            case MedicalSpecialtyType.Neurosurgery:
                medicalSpecialty = "Neurosurgery";
                break;
            case MedicalSpecialtyType.NuclearMedicine:
                medicalSpecialty = "NuclearMedicine";
                break;
            case MedicalSpecialtyType.ObstetricsAndGynecology:
                medicalSpecialty = "Obstetrics And Gynecology";
                break;
            case MedicalSpecialtyType.Ophthalmology:
                medicalSpecialty = "Ophthalmology";
                break;
            case MedicalSpecialtyType.OrthopedicSurgery:
                medicalSpecialty = "Orthopedic Surgery";
                break;
            case MedicalSpecialtyType.Otolaryngology:
                medicalSpecialty = "Otolaryngology";
                break;
            case MedicalSpecialtyType.Pediatrics:
                medicalSpecialty = "Pediatrics";
                break;
            case MedicalSpecialtyType.PhysicalMedicineAndRehibilitation:
                medicalSpecialty = "Physical Medicine And Rehibilitation";
                break;
            case MedicalSpecialtyType.PlasticSurgery:
                medicalSpecialty = "Plastic Surgery";
                break;
            case MedicalSpecialtyType.Psychiatry:
                medicalSpecialty = "Psychiatry";
                break;
            case MedicalSpecialtyType.PublicHealthAndGeneralPreventive:
                medicalSpecialty = "Public Health And General Preventive";
                break;
            case MedicalSpecialtyType.Radiology:
                medicalSpecialty = "Radiology";
                break;
            case MedicalSpecialtyType.Surgery:
                medicalSpecialty = "Surgery";
                break;
            case MedicalSpecialtyType.ThoracicSurgery:
                medicalSpecialty = "Thoracic Surgery";
                break;
            case MedicalSpecialtyType.Urology:
                medicalSpecialty = "Urology";
                break;
            case MedicalSpecialtyType.VascularSurgery:
                medicalSpecialty = "Vascular Surgery";
                break;
            default:
                break;
        }
        return medicalSpecialty;
    }
}
