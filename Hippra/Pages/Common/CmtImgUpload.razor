@using Hippra.Services

@inject HippraService hService
<InputFile OnChange="HandleFileSelected" /> 

@if (!string.IsNullOrWhiteSpace(displayImgUrl))
{
    if (!isSubmitted)
    {
        <p><img src="@displayImgUrl" width="50%" height="auto" /></p>
        <div class="btn btn-outline-danger" @onclick="DeleteFile">
            delete
        </div>
    }
}
else
{
    if (isDeleted)
    {
        <p>File Deleted</p>
    }
}


@code {
    [Parameter]
    public string fileName { get; set; } = "";
    [Parameter]
    public string imgUrl { get; set; } = "";
    [Parameter]
    public bool isSubmitted { get; set; }

    private string savedImgUrl = "";
    private string displayImgUrl = "";
    private string fileName2 = "";
    private string guid = "";


    [Parameter]
    public EventCallback<string> fileNameChanged { get; set; }
    [Parameter]
    public EventCallback<string> imgUrlChanged { get; set; }
    [Parameter]
    public EventCallback<bool> isSubmittedChanged { get; set; }

    IFileListEntry file;


    private bool isDeleted { get; set; } = false;
    private int counter { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {

        displayImgUrl = imgUrl;
        savedImgUrl = hService.GetImgStorageUrl() + "img";
        Console.WriteLine("value of isSubmitted is " + isSubmitted);
    }



    public async Task HandleFileSelected(IFileListEntry[] files)
    {
        isSubmitted = false;
        isSubmittedChanged.InvokeAsync(isSubmitted);
        imgUrl = "";
        file = files.FirstOrDefault();

        Console.WriteLine("value of isSubmitted inside HandleFilesSelected is " + isSubmitted);

        if (file == null)
        {

            StateHasChanged();
            return;
        }
        if (file.Size < 100)
        {
            StateHasChanged();
            return;
        }
        if (file.Type.Contains("png") || file.Type.Contains("jpg") || file.Type.Contains("jpeg") || file.Type.Contains("gif"))
        {
            string extension = file.Type.Remove(0, 6);
            guid = Guid.NewGuid().ToString();

            fileName = fileName + guid + "." + extension;
            fileName2 = fileName;
            await hService.UploadImgToAzureAsync(file.Data, fileName2);

            imgUrl = savedImgUrl + fileName2;
            displayImgUrl = imgUrl + "?" + counter++;
            isDeleted = false;
            imgUrlChanged.InvokeAsync(imgUrl);

            Console.WriteLine("savedImgUrl is " + savedImgUrl);
            Console.WriteLine("displayImgUrl is " + displayImgUrl);
            Console.WriteLine("imgUrl is " + imgUrl);
            Console.WriteLine("fileName is " + fileName);
            Console.WriteLine("fileName2 is " + fileName2);

            if (isSubmitted)
            {
                Console.WriteLine("isSubmitted is TRUEEEE");
                isSubmitted = false;
                displayImgUrl = "";
                imgUrlChanged.InvokeAsync(imgUrl);
            }

            savedImgUrl = hService.GetImgStorageUrl() + "img";

            StateHasChanged();
            return;
        }
        else
        {
            StateHasChanged();
            return;
        }

    }



    public async Task DeleteFile()
    {

        Console.WriteLine("The filename deleted is " + fileName2);
        var response = await hService.DeleteImage(fileName2);
        if (response)
        {
            isDeleted = true;

            imgUrl = "";
            displayImgUrl = "";

            imgUrlChanged.InvokeAsync(imgUrl);
        }

        StateHasChanged();
    }
    private Task OnfileNameChanged(ChangeEventArgs e)
    {
        fileName = e.Value.ToString();

        return fileNameChanged.InvokeAsync(fileName);
    }

    private Task OnimgUrlChanged(ChangeEventArgs e)
    {
        imgUrl = e.Value.ToString();

        return imgUrlChanged.InvokeAsync(imgUrl);
    }

    private Task OnisSubmittedChanged(ChangeEventArgs e)
    {
        isSubmitted = (bool)e.Value;
        return isSubmittedChanged.InvokeAsync(isSubmitted);
    }
}