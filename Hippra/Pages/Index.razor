@page "/"

@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Hippra.Models.ViewModel
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions

@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
	@inject UserManager<AppUser> UserManager*@
@inject NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IHistoryLogService historyLogService;
@inject IAuthorizationService AuthorizationService


<AuthorizeView>
    <Authorized Context="HomeContext">
        @* 	<DashboardIndex></DashboardIndex> *@

    </Authorized>
    <NotAuthorized>
        @* <Landing></Landing> *@

    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int userId { get; set; } = -1; // public ID

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    @*private AppUser usr { get; set; } = new AppUser();*@

    // Feature Config
    private bool Version2 { get; set; } = true;

    public int CurrentPage { get; set; } = 1;
    public int Count { get; set; }
    public int PageSize { get; set; } = 10;
    public int TotalPages => (int)Math.Ceiling(decimal.Divide(Count, PageSize));
    public List<FTPaginationModel> paginationData = new List<FTPaginationModel>();

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;
    private bool IsLoading = false;
    private string searchString { get; set; } = "";

    private bool showFilters { get; set; } = false;

    private async Task toggleFilters()
    {
        showFilters = !showFilters;
    }
    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
        public string Priority { get; set; } = "-1";
        public bool showTagOnly { get; set; } = false;
    }
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
            new SelectListItem { Value = "-1", Text = "No Filters" }
            };


    private List<CaseViewModel> SearchResults { get; set; } = new List<CaseViewModel>();
    private List<Case> cases { get; set; } = new List<Case>();

    private int actionOptions { get; set; } = 0; // 0 = all, 1 = my posts
    private string mTitle { get; set; } = "Post New Case";
    private bool mIsCreate = true;
    private bool viewMode = true;

    private CaseViewModel pCase { get; set; } = new CaseViewModel();

    private string cssAllActive { get; set; } = "active";
    private string cssMyActive { get; set; } = "";

    private List<SelectListItem> specialtyList { get; set; }

    //private List<SelectListItem> CategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> GenderList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> RaceList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> EthnicityList { get; set; } = new List<SelectListItem>();


    private string bCategory { get; set; } = "0";
    private string bSubCategory { get; set; } = "0";
    private string bGender { get; set; } = "0";
    private string bRace { get; set; } = "6";
    private string bEthnicity { get; set; } = "3";

    private string debug { get; set; } = "";

    private PriorityModel priorityRadio = new PriorityModel();
    public class PriorityModel
    {
        [Range(0, 2)]
        public CaseResponseLevelType Priority { get; set; }
    }

    private PhysicianProfileModel pProfile = new PhysicianProfileModel();
    public class PhysicianProfileModel
    {
        public int ProfileId { get; set; } = -1;
        public string Name { get; set; } = "";
        public string Specialty { get; set; } = "";
        public bool Certified { get; set; } = false;
    }

    @*private int userId = -1;*@
    private string posterSpeciality = "";
    private string fullName = "";

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*usr = await UserManager.GetUserAsync(user);*@

            try
            {
                if (userId == -1)
                {
                    userId = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
                }

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }


            // await GetSearchResults(CurrentPage);

            // if (Count > PageSize)
            // {
            //     for (int i = 1; i <= TotalPages; i++)
            //     {
            //         paginationData.Add(new FTPaginationModel()
            //             {
            //                 id = i
            //             });
            //     }
            //     var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
            //     pg.isActive = true;
            // }

            NavigationManager.NavigateTo("dashboardindex");


        }
        else
            NavigationManager.NavigateTo("landing");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.SubscribeAnimalChange", "animalIcon");
        //}
    }


    private async Task GetSearchResults(int targetPage)
    {
        SearchResults = new List<CaseViewModel>();
        cases = new List<Case>();

        int tSubCategory = -1;
        int tPriority = -1;
        if (!string.IsNullOrEmpty(filters.SubCategory))
        {
            tSubCategory = Int32.Parse(filters.SubCategory);
        }
        if (!string.IsNullOrEmpty(filters.Priority))
        {
            tPriority = Int32.Parse(filters.Priority);
        }

        List<int> caseListContainTag = new List<int>();
        // if (filters.showTagOnly)
        // {
        //     caseListContainTag = await hService.GetCasesIdByTag(searchString);
        // }

        if (actionOptions == 0)
        {
            var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, -1, caseListContainTag);
            cases = searchResults.Cases;
            Count = searchResults.TotalCount;
            //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, -1);
            //Count = await hService.GetCaseCount();
        }
        else
        {
            var searchResults = await hService.GetCasesNoTracking(searchString, filters.showClosed, filters.showTagOnly, tSubCategory, tPriority, targetPage, PageSize, userId, caseListContainTag);
            cases = searchResults.Cases;
            Count = searchResults.TotalCount;
            //cases = await hService.GetCasesNoTracking(searchString, filters.showClosed, tSubCategory, targetPage, PageSize, usr.PublicId);
            //Count = await hService.GetMyCaseCount(usr.PublicId);
        }

        SearchResults = cases.Select(i => new CaseViewModel()
            {
                ID = i.ID,
                Topic = i.Topic,
                Description = i.Description,
                DateCreated = i.DateCreated,
            }).ToList();

        //history stuffs
        if (searchString != "")
        {
            AddHistoryLogDto newHistory = new AddHistoryLogDto();
            // newHistory.ID = 0;
            // newHistory.PostID = pCase.ID;
            // newHistory.CreationDate = DateTime.Now;
            // newHistory.PosterID = userId;
            // newHistory.UserDisplayName = fullName;
            // newHistory.Title = "Hippra";
            // newHistory.HistoryTypes = "searched ";
            // if (filters.showTagOnly)
            // {
            //     newHistory.Detail = "tag [" + searchString + "]";
            // }
            // else
            // {
            //     newHistory.Detail = '"' + searchString + '"';
            // }
          await  historyLogService.AddHistory(newHistory);
        }

    }
    private async Task searchHandler()
    {
        IsLoading = true;
        if (actionOptions == 1)
        {
            await ShowMyCases();
        }
        else
        {
            await ShowAllCases();
        }
    }


    private async Task ChangePage(int targetPage)
    {

        await GetSearchResults(targetPage);

        var pg = paginationData.FirstOrDefault(s => s.isActive);
        pg.isActive = false;
        CurrentPage = targetPage;
        pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
        pg.isActive = true;
        this.StateHasChanged();
    }
    private async Task ShowAllCases()
    {
        actionOptions = 0;
        CurrentPage = 1;
        await GetSearchResults(CurrentPage);

        if (Count > PageSize)
        {
            paginationData = new List<FTPaginationModel>();
            for (int i = 1; i <= TotalPages; i++)
            {
                paginationData.Add(new FTPaginationModel()
                    {
                        id = i
                    });
            }
            var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
            pg.isActive = true;
        }

        mTitle = "All Cases";
        cssAllActive = "active";
        cssMyActive = "";

        this.StateHasChanged();
        IsLoading = false;
        //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    }
    private async Task ShowMyCases()
    {
        actionOptions = 1;
        CurrentPage = 1;
        await GetSearchResults(CurrentPage);

        if (Count > PageSize)
        {
            paginationData = new List<FTPaginationModel>();
            for (int i = 1; i <= TotalPages; i++)
            {
                paginationData.Add(new FTPaginationModel()
                    {
                        id = i
                    });
            }
            var pg = paginationData.FirstOrDefault(s => s.id == CurrentPage);
            pg.isActive = true;
        }

        cssAllActive = "";
        cssMyActive = "active";

        mTitle = "My Cases";
        this.StateHasChanged();
        IsLoading = false;
        //await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
    }

    // ver 2
    private async Task NavToCreateCase()
    {
        NavigationManager.NavigateTo("/createcase");
    }

    private async Task OpenViewModal(int i)
    {
        if (Version2)
        {
            NavigationManager.NavigateTo("/viewcase/" + i);
        }
        else
        {
            viewMode = true;

            var tCase = cases.FirstOrDefault(p => p.ID == i);
            if (tCase == null)
            {
                // didn't find it, should flag for error
                return;
            }
            await PopulateModel(tCase);
         //   pCase.Comments = await hService.GetCommentsNoTracking(i);
            // get comments

            // implementation to do edit using postModal
            //if(tCase.PosterID == usr.PublicId)
            //{
            //    // creator go to edit mode
            //    mIsCreate = false;
            //    mTitle = "Edit Case";
            //    PopulateLists();
            //    this.StateHasChanged();
            //    await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "mPostModal");
            //}
            //else
            //{
            // others just view and comment
            this.StateHasChanged();
            await JSRuntime.InvokeAsync<string>("blazorExtensions.toggleModal", "viewPostModal");
            //}
        }


    }

    // implementation to do edit using viewModal
    private async Task switchEditMode()
    {

        viewMode = false;
        this.StateHasChanged();
    }
    private async Task CloseCase()
    {

        //debug = "Case Closed";

        await hService.CloseCase(pCase.ID);
        await GetSearchResults(CurrentPage);
        this.StateHasChanged();

    }
    private async Task toggerVersion()
    {
        Version2 = !Version2;
        if (Version2)
        {
            verStr = "Page (New)";
        }
        else
        {
            verStr = "Popup (Old)";
        }
    }
    private string verStr { get; set; } = "Page (New)";




    #region PopulateData
    // POPULATE MODELS

    private async Task PopulateModel(Case tCase)
    {
        pCase = CaseViewModel.FromEntity(tCase);

        priorityRadio = new PriorityModel();
        bGender = tCase.Gender.ToString();
        bEthnicity = tCase.Ethnicity.ToString();
        bRace = tCase.Race.ToString();

    }


    #endregion


}
