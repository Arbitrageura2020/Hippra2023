
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Models.FTDesign;
@using Hippra.Services;
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;
@using Hippra.Models.SQL;
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@using System.Security.Claims

<AuthorizeView>
    <Authorized>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                        <br /><br />
                        <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Already Signed In!</div>
                        <br /><br />
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized Context="SignInContext">
        <div class="card">
            <div class="card-body">
                <br />
                <br />
                <div class="d-block text-center">
                    <EditForm Model="@inputModel" OnValidSubmit="@SubmitSignIn">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Sign to Account</div>
                                <br />
                                <div class="mb-3">
                                    <label for="Email">Email</label>
                                    <InputText class="form-control" id="Email" required placeholder="Enter Email" @bind-Value="@inputModel.Email" aria-label="Email" aria-describedby="Email" />
                                </div>
                                <div class="">
                                    <label for="Password">Password</label>
                                    <InputText class="form-control" id="Password" type="password" required placeholder="Enter Password" @bind-Value="@inputModel.Password" aria-label="Password" aria-describedby="Password" />
                                </div>
                                <div class="mb-3">
                                    <a href="/Identity/Account/ForgotPassword">Forgot your password?</a>

                                </div>
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" type="checkbox" id="gc1" @bind-Value="inputModel.RememberMe" />
                                    <label class="form-check-label" for="gc1">
                                        Remember Me
                                    </label>
                                </div>
                                <br />
                                
                                <br />
                                <div class="mx-2">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-outline-dark" type="submit">Sign In</button>
                                        <button class="btn btn-outline-info" @onclick="resendVerificationEmail">Resend email confirmation</button>
                                    </div>

                                    @if (hasError)
                                    {
                                        <div class="alert alert-danger">Something went wrong. Please try again.</div>
                                    }
                                    <br />

                                    @if (sentVerification)
                                    {
                                        <div class="alert alert-info">Verification Email Sent.</div>
                                    }
                                    <br />
                                    <br />
                                </div>



                            </div>

                        </div>
                    </EditForm>

                    @switch (status)
                    {
                        case 2:
                            <div>
                                <div class="alert alert-info">Pending Account Approval.</div>
                            </div>
                            break;
                        case 4:
                            <div>
                                <div class="alert alert-info">Lockout.</div>
                            </div>
                            break;
                        default:

                            break;
                    }

                </div>
                <br />
                <br />
            </div>
        </div>



    </NotAuthorized>
</AuthorizeView>





@code {
    private FTLoginModel inputModel { get; set; } = new FTLoginModel();
    private bool hasError { get; set; } = false;
    private bool sentVerification { get; set; } = false;
    private int status { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {

        authState = await authenticationStateTask;
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            var baseurl = NavigationManager.Uri;
            baseurl = baseurl.Remove(baseurl.Length - 8); // it's FTSignIn not FTLogin
                                                          //NavigationManager.NavigateTo(baseurl + "");
            var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.FTHTTPRedirect", baseurl + "FTRZLogin");

        }

    }




    private async Task SubmitSignIn()
    {
        hasError = false;
        var baseurl = NavigationManager.Uri;
        baseurl = baseurl.Remove(baseurl.Length - 7);


        var result = await pService.LoginAccount(inputModel);
        if (result != -1)
        {

            // 2 Pending Account Approval
            // 3 LoginWith2fa
            // 4 Lockout

            if (status == 1)
            {
                NavigationManager.NavigateTo(baseurl);
                //redirect home
            }
            if (status == 3)
            {
                NavigationManager.NavigateTo(baseurl + "Identity/Account/LoginWith2fa");
                //redirect Loginwith2fa
            }

            status = result;
            this.StateHasChanged();
        }
        else
        {
            hasError = true;
        }


    }
    private async Task resendVerificationEmail()
    {
        hasError = false;
        var baseurl = NavigationManager.Uri;
        baseurl = baseurl.Remove(baseurl.Length - 7);
        await pService.SendVerificationEmail(inputModel.Email, baseurl);
        sentVerification = true;
        this.StateHasChanged();
    }
}
