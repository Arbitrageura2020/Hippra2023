@page "/PersonalPage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Hippra.Models.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject HippraService hService
@inject ProfileService pService;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Extensions
<div class="ft-main-px">

    <div class="card">
        <div class="card-body p-body">
            <div class="p-body">
                <div class="row" style="justify-content: center">
                    <div class="Personal-page-display">
                        <div id="item1" class="profile-col side col-xs-1 right-col" style="background-color: @DisplayHonorbg">

                            <button class="circle-pic @badgeType" style="background-image:url('@DisplayBadgeUrl'); @ResidencyPosition">
                            </button>
                            <button class="square-pic bb" style="background:@DisplayRankBg;">
                            </button>
                            <button class="square-pic-rank bb" style="background-image:url('@DisplayRankUrl') ;background-size: 100%;">
                            </button>
                        </div>
                        <div id="item2" class="profile-col mid">
                            <div class="pf-top">
                                <div class="wrap">
                                    <div class="mid-top-bar" style="background-image:url('@DisplayBackgroundUrl') ;background-size: 100%;">
                                        @if (usr.PublicId == userId)
                                        {
                                            <button class="image-upload upload-bg">
                                                <label for="file-input-bg">
                                                    <span class="fa fa-photo"></span>
                                                </label>

                                                <InputFile id="file-input-bg" type="file" OnChange="@HandleUploadBg" />
                                            </button>
                                        }
                                    </div>
                                    <div class="image-upload circle-pic" style="background-image: url('@DisplayProfileUrl');background-size: 100%;">
                                        @if (usr.PublicId == userId)
                                        {
                                            <button class="image-upload upload-bg">
                                                <label for="file-input-prof">
                                                    <span class="fa fa-photo"></span>
                                                </label>

                                                <InputFile id="file-input-prof" type="file" OnChange="@HandleUploadProf" />
                                            </button>
                                        }
                                    </div>
                                    <h4 class="usr-name">@profile.FirstName @profile.LastName</h4>
                                    @if (@profile.ResidencyHospital != null)
                                    {
                                        <h6 class="usr-loc">@medicalSpecialty at @profile.ResidencyHospital</h6>
                                    }
                                    else
                                    {
                                        <h6 class="usr-loc">@medicalSpecialty</h6>
                                    }
                                    @if (@profile.EducationDegree != null && @profile.MedicalSchoolAttended != null)
                                    {
                                        <h6 class="usr-title">@profile.EducationDegree - @profile.MedicalSchoolAttended</h6>
                                    }
                                    else
                                    {
                                        <h6 class="usr-title">@profile.EducationDegree @profile.MedicalSchoolAttended</h6>
                                    }
                                    @if (usr.PublicId != userId)
                                    {
                                        @if (connectStatus == "C")
                                        {
                                            <button class="prof-c-btn" @onclick="@RemoveConnection">Connected</button>
                                        }
                                        else if (connectStatus == "NC")
                                        {
                                            <button class="prof-c-btn" @onclick="@SendAnInvitation">Connect+</button>
                                        }
                                        else
                                        {
                                            <button class="prof-c-btn" @onclick="@RemoveConnection">Pending</button>
                                        }
                                        @if (isFollowed)
                                        {
                                            <button class="prof-f-btn" @onclick="@RemoveFromFollowerList">Followed</button>
                                        }
                                        else
                                        {
                                            <button class="prof-f-btn" @onclick="@AddToFollowerList">Follow+</button>
                                        }

                                    }
                                </div>

                                <div class="filter-bar">
                                    <button class="bar-btn & @cssAbout" @onclick="(e => ShowAboutTab())">About</button>
                                    <button class="bar-btn @cssPost" @onclick="(e => ShowPostTab())">Post</button>
                                    <button class="bar-btn @cssConn" @onclick="(e => ShowConnTab())">Connection</button>
                                </div>
                                @if (actionOptions == 0)
                                {
                                    <div class="profile-tab">
                                        <p class=" text-dark"> Biography</p>

                                        <div>
                                            @if (editBio)
                                            {
                                                <EditForm Model="@profile" OnValidSubmit="@SaveBio">
                                                    <div class="">
                                                        <div class="">
                                                            <InputTextArea class="form-control" required placeholder="About me..." @bind-Value="@profile.Bio" />
                                                            <hr />
                                                            <div class="mx-4 d-flex justify-content-between">
                                                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                                                <button id="create-button" type="submit" class="btn btn-primary" @onclick="Submitted">Save</button>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </EditForm>

                                            }
                                            else
                                            {
                                                @if (usr.PublicId != userId)
                                                {
                                                    @if (@profile.Bio == null)
                                                    {
                                                        <div class="show-bio">This user has not added biography to their Hippra profile yet.</div>

                                                    }
                                                    else
                                                    {
                                                        <div class="show-bio">
                                                            <p>@profile.Bio</p>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    @if (@profile.Bio == null)
                                                    {
                                                        <div class="show-bio">
                                                            <button class="bio-edit" @onclick="@EditBio"><span class="fa fa-edit"></span></button>
                                                            Let other people know about your story...
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="show-bio">
                                                            <button class="bio-edit" @onclick="@EditBio"><span class="fa fa-edit"></span></button>
                                                            <p>@profile.Bio</p>
                                                        </div>
                                                    }
                                                }


                                            }
                                        </div>
                                    </div>


                                }
                                else if (actionOptions == 1)
                                {
                                    @if (stats.NumCase > 0)
                                    {

                                        foreach (var c in SearchResults)
                                        {
                                            <div class="border rounded p-4 mb-2 hover-class bg-white" @onclick="(e => OpenViewModal(c.ID))">
                                                <div class="row">
                                                    <div class="col-md-9 align-self-center">
                                                        <h4 class="">@c.Topic</h4>

                                                        <hr />
                                                    </div>
                                                    <div class="col-md-3 text-right">

                                                        <div class="p-case-detail">Priority: @c.Priority</div>
                                                        <div class="p-case-detail">@c.DateCreated</div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col">
                                                        @*<div class=""><strong>Category: </strong> @c.ParsedCategory · @c.ParsedSubCategory</div>*@
                                                        <div class="p-case-detail"><strong>Description:</strong> @c.Description.Left(200)</div>
                                                    </div>
                                                </div>

                                            </div>

                                        }
                                    }
                                    else
                                    {
                                        <div class="profile-tab">No Case.</div>
                                    }
                                }
                                else
                                {
                                    @if (connList.Count != 0)
                                    {
                                        @foreach (var c in connList)
                                        {
                                            <div class="profile-tab" style="margin-bottom: 3px; padding: 20px;">
                                                <button class="circle-pic-personal circle-badge" style="background-image:url('@c.FProfileUrl') ;background-size: 100%;" @onclick="(e => { viewPage(c.FriendID); })"></button>
                                                <strong class="comment-pic-item"> @c.FullName </strong>
                                                <div>
                                                    @c.CurrentPosition
                                                </div>
                                                <div>
                                                    @c.Location
                                                </div>
                                                <hr />
                                            </div>

                                        }
                                        @if (CountConn > PageSize)
                                        {
                                            <div class="mb-3 text-left">
                                                <br />
                                                <hr />
                                                <br />
                                                <FTPagination paginationData="paginationConnData" ChangePage="ChangePageConn" />
                                                <br />
                                            </div>

                                        }
                                        <br />
                                    }
                                    else
                                    {
                                        <div class="profile-tab">
                                            No Connection yet.
                                        </div>
                                    }
                                }
                            </div>

                        </div>
                        <div id="item3" class="profile-col side">
                            <div class="">
                                <h5 class="stats">Stats:</h5>

                                <h6><span class="fa fa-newspaper-o"></span> Cases: @stats.NumCase</h6>
                                <h6><span class="fa fa-comments-o"></span> Answers: @stats.Answers</h6>
                                <h6><span class="fa fa-thumbs-o-up"></span> Up Vote: @stats.UpVote</h6>
                                <h6><span class="fa fa-unsorted"></span> Votes: @stats.Votes</h6>
                                <h6><span class="fa fa-users"></span> Reputation: @stats.Reputation</h6>
                                <h6><span class="fa fa-user-md"></span> Rank: @stats.Rank</h6>
                                <h6><span class="fa fa-trophy"></span> badge: @stats.Badge</h6>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int userId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private AppUser usr { get; set; }
    private Stats stats = new Stats();
    private List<ParsedCase> SearchResults { get; set; } = new List<ParsedCase>();
    private List<Case> cases { get; set; } = new List<Case>();
    private List<Connection> connList { get; set; } = new List<Connection>();
    public List<FTPaginationModel> paginationConnData = new List<FTPaginationModel>();
    public int PageSize { get; set; } = 10;
    public int CountConn { get; set; }
    public int TotalConnPages => (int)Math.Ceiling(decimal.Divide(CountConn, PageSize));
    public int CurrentConnPage { get; set; } = 1;
    private string fileName = "";
    private string imgUrl = "";
    private string savedImgUrl = "";
    private string displayImgUrl = "";
    private bool isDeleted { get; set; } = false;
    private Profile profile { get; set; } = new Profile();
    private string DisplayProfileUrl = "";
    private string DisplayBackgroundUrl = "";
    private string DisplayBadgeUrl = "";
    private string DisplayRankUrl = "";
    private string DisplayRankBg = "";
    private string DisplayHonorbg = "";
    private string badgeType = "";
    private string guid = "";
    private int actionOptions { get; set; } = 0; // 0 = about, 1 = post, 2 = connection
    private string cssAbout = "";
    private string cssPost = "";
    private string cssConn = "";
    private string medicalSpecialty = "";
    private string ResidencyPosition = "";
    private string bio = "";
    private bool editBio = false;
    private bool isSubmitted = false;
    private string connectStatus = "";
    private bool isFollowed = false;
    private int lastHistoryID = -1;

    public class ParsedCase : Case
    {
        public string Priority { get; set; } = "";
        public string ParsedCategory { get; set; } = "";
        public string ParsedSubCategory { get; set; } = "";
        public string ParsedGender { get; set; } = "";
        public string ParsedRace { get; set; } = "";
        public string ParsedEthnicity { get; set; } = "";
        public string ParsedStatus { get; set; } = "";


    }

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            usr = await UserManager.GetUserAsync(user);

            if (usr != null)
            {
                profile = new Profile();
                profile = await pService.GetProfile(usr.PublicId);

                userId = profile.PublicId;
            }


        }
        savedImgUrl = hService.GetImgStorageUrl() + "img";
        await GetStats(userId);
        //profile
        profile = new Profile();
        profile = await pService.GetProfile(userId);
        if (profile.ProfileUrl != null)
        {
            DisplayProfileUrl = profile.ProfileUrl;
        }
        else
        {
            DisplayProfileUrl = "/img/hippra/blank-profile.png";
        }
        if (profile.BackgroundUrl != null)
        {
            DisplayBackgroundUrl = profile.BackgroundUrl;
        }
        else
        {
            DisplayBackgroundUrl = "/img/hippra/blank-background.jpg";
        }
        medicalSpecialty = getMedicalSpeciality(profile.MedicalSpecialty);
        if(usr.PublicId != userId)
        {
            connectStatus = await hService.CheckConnection(usr.PublicId, userId);
            isFollowed = await hService.CheckFollower(usr.PublicId, userId);
        }
        await GetConnResults(userId, CurrentConnPage);
        if (CountConn > PageSize)
        {
            for (int i = 1; i <= TotalConnPages; i++)
            {
                paginationConnData.Add(new FTPaginationModel()
                {
                    id = i
                });
            }
            var pg = paginationConnData.FirstOrDefault(s => s.id == CurrentConnPage);
            pg.isActive = true;
        }
        foreach (var c in connList)
        {
            Profile prof = new Profile();
            if(c.FriendID == profile.PublicId)
            {
                prof = await pService.GetProfile(c.UserID);
            }
            else
            {
                prof = await pService.GetProfile(c.FriendID);
            }
            c.FullName = prof.FirstName + " " + prof.LastName;
            c.CurrentPosition = getMedicalSpeciality(prof.MedicalSpecialty);
            c.Location = prof.State;
            if (prof.ProfileUrl != null)
            {
                c.FProfileUrl = prof.ProfileUrl;
            }
            else
            {
                c.FProfileUrl = "/img/hippra/blank-profile.png";
            }
        }

    }
    private async Task GetStats(int userId)
    {
        //cases
        cases = new List<Case>();
        stats = new Stats();
        var searchResults = await hService.GetCasesNoTracking("", false, false, -1, -1, 1, 10, userId, null);
        cases = searchResults.Cases;
        stats.NumCase = searchResults.TotalCount;
        foreach (var i in cases)
        {

            SearchResults.Add(new ParsedCase()
            {
                ID = i.ID,
                Topic = i.Topic,
                Description = i.Description,
                DateCreated = i.DateCreated,
                Priority = ParsePriority(i.ResponseNeeded)
            });
        }
        // count comment
        // count Votes form others for me
        // count my vote for others
        var result = await hService.GetStats(userId);
        stats.Answers = result.Answers;
        stats.UpVote = result.UpVote;
        stats.Votes = result.Votes;
        stats.Reputation = stats.UpVote * 5;
        stats.Rank = GetRank(stats.UpVote);
        stats.Badge = GetBadge(stats.UpVote);

    }

    public string GetRank(int rep)
    {
        if (rep < 25)
        {
            DisplayRankUrl = "/img/hippra/rank-D.jpg";
            return "D";
        }
        else if (rep >= 25 && rep < 100)
        {
            DisplayRankUrl = "/img/hippra/Rank-C.jpg";
            return "C";
        }
        else if (rep >= 100 && rep < 500)
        {
            DisplayRankUrl = "/img/hippra/Rank-B.jpg";
            return "B";
        }
        else if (rep >= 500 && rep < 10000)
        {
            DisplayRankUrl = "/img/hippra/Rank-A.jpg";
            return "A";
        }
        else
        {
            DisplayRankUrl = "/img/hippra/Rank-S.jpg";
            return "S";
        }

    }
    public string GetBadge(int rep)
    {
        ResidencyPosition = "";
        badgeType = "badge-pic";
        DisplayRankBg = "repeating-linear-gradient(45deg, black, transparent 100px)";
        if (rep >= 5 && rep < 10 || rep >= 40 && rep < 50 || rep >= 150 && rep < 250 || rep >= 3700 && rep < 6000 || rep >= 20000 && rep < 40000)
        {
            DisplayBadgeUrl = "/img/hippra/bronze-badge.png";
            DisplayHonorbg = "saddlebrown";
            return "Bronze";

        }
        else if (rep >= 10 && rep < 20 || rep >= 50 && rep < 65 || rep >= 250 && rep < 300 || rep >= 6000 && rep < 8000 || rep >= 40000 && rep < 80000)
        {
            DisplayBadgeUrl = "/img/hippra/silver-badge.png";
            DisplayHonorbg = "cornflowerblue";
            return "Silver";
        }
        else if (rep >= 20 && rep < 25 || rep >= 65 && rep < 85 || rep >= 300 && rep < 400 || rep >= 8000 && rep < 10000 || rep >= 80000 && rep < 160000)
        {
            DisplayBadgeUrl = "/img/hippra/gold-badge.png";
            DisplayHonorbg = "forestgreen";
            return "Gold";
        }
        else if (rep >= 160000 && rep < 500000)
        {
            DisplayBadgeUrl = "/img/hippra/platinum-badge.png";
            DisplayHonorbg = "orange";
            return "Platinum";
        }
        else if (rep >= 500000)
        {
            DisplayBadgeUrl = "/img/hippra/diamon-badge.png";
            DisplayHonorbg = "maroon";
            badgeType = "badge-pic-diamon";
            return "Diamon";
        }
        else
        {
            DisplayBadgeUrl = "/img/hippra/green-badge.png";
            DisplayHonorbg = "mintcream";
            ResidencyPosition = "bottom: 20%";
            DisplayRankBg = "repeating-linear-gradient(45deg, lightgrey, transparent 100px)";
            return "Residency";
        }

    }
    public async Task HandleUploadBg(InputFileChangeEventArgs e)
    {
        if (profile.ProfileUrl != null)
        {
            var deleteFile = profile.ProfileUrl.Substring(57, profile.ProfileUrl.Length - 57);
            var response = await hService.DeleteImage(deleteFile);
        }
        profile.BackgroundUrl = await HandleFileSelected(e);
        DisplayBackgroundUrl = profile.BackgroundUrl;
        await SaveProfile();
        await addToHistory("updated background picture");
        StateHasChanged();
    }
    public async Task HandleUploadProf(InputFileChangeEventArgs e)
    {
        if (profile.ProfileUrl != null)
        {
            var deleteFile = profile.ProfileUrl.Substring(57, profile.ProfileUrl.Length - 57);
            var response = await hService.DeleteImage(deleteFile);
        }
        profile.ProfileUrl = await HandleFileSelected(e);
        DisplayProfileUrl = profile.ProfileUrl;
        await SaveProfile();
        await addToHistory("updated profile pricture");
        StateHasChanged();
    }
    public async Task<string> HandleFileSelected(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (imageFile == null || imageFile.Size < 100)
            {
                StateHasChanged();
                return "";
            }

            if (imageFile.Name.Contains("png") ||
                imageFile.Name.Contains("jpg") ||
                imageFile.Name.Contains("jpeg") ||
                imageFile.Name.Contains("gif"))
            {
                //                string extension = imageFile.Name.Remove(0, 6);
                guid = Guid.NewGuid().ToString();
                //fileName = fileName + guid + "." + extension;
                fileName = fileName + guid + imageFile.Name;
                await hService.UploadImgToAzureAsync(imageFile.OpenReadStream(), fileName);

                return savedImgUrl + fileName;
            }
            else
            {

                return "";
            }

        }
        return "";


    }
    private async Task SaveProfile()
    {
        usr.FirstName = profile.FirstName;
        usr.LastName = profile.LastName;
        usr.NPIN = profile.NPIN;
        usr.MedicalSpecialty = Int32.Parse(profile.MedicalSpecialty.ToString());
        usr.AmericanBoardCertified = profile.AmericanBoardCertified;

        usr.ResidencyHospital = profile.ResidencyHospital;
        usr.MedicalSchoolAttended = profile.MedicalSchoolAttended;
        usr.EducationDegree = profile.EducationDegree;
        usr.Address = profile.Address;
        usr.Zipcode = profile.Zipcode;
        usr.State = profile.State;
        usr.City = profile.City;
        usr.PhoneNumber = profile.PhoneNumber; // check this
        usr.ProfileUrl = profile.ProfileUrl;
        usr.BackgroundUrl = profile.BackgroundUrl;
        usr.Bio = profile.Bio;
        try
        {
            await UserManagerExtensions.UpdateUserProfile(UserManager, user, usr);
        }
        catch (Exception e)
        {
            editBio = false;
            this.StateHasChanged();
            return;
        }
        @*
        PostHistory newHistory = new PostHistory();
        newHistory.ID = 0;
        newHistory.PostID = -1;
        newHistory.CreationDate = DateTime.Now;
        newHistory.UserID = usr.PublicId;
        newHistory.UserDisplayName = usr.FirstName + " " + usr.LastName;
        newHistory.Title = "Hippra";
        newHistory.Detail = "Profile updated";
        newHistory.HistoryTypes = "edited profile";
        await hService.AddHistory(newHistory);*@
    editBio = false;
    this.StateHasChanged();
    return;

}

public async Task DeleteFile()
{
    var response = await hService.DeleteImage(fileName);
    if (response)
    {
        isDeleted = true;
        imgUrl = "";
        displayImgUrl = "";
    }
    StateHasChanged();
}
private async Task ShowAboutTab()
{
    actionOptions = 0;
    cssAbout = "active";
    cssPost = "";
    cssConn = "";
    this.StateHasChanged();
}
private async Task ShowPostTab()
{
    actionOptions = 1;
    cssAbout = "";
    cssPost = "active";
    cssConn = "";
    this.StateHasChanged();
}
private async Task ShowConnTab()
{
    actionOptions = 2;
    cssAbout = "";
    cssPost = "";
    cssConn = "active";
    this.StateHasChanged();
}
private async Task OpenViewModal(int i)
{
    NavigationManager.NavigateTo("/viewcase/" + i);
}
private string getMedicalSpeciality(int usr)
{
    string medicalSpecialty = "";
    switch ((MedicalSpecialtyType)usr)
    {
        case MedicalSpecialtyType.Anesthesiology:
            medicalSpecialty = "Anesthesiology";
            break;
        case MedicalSpecialtyType.AnatomicPathologyAndClinicalPathology:
            medicalSpecialty = "Anatomic Pathology And Clinical Pathology";
            break;
        case MedicalSpecialtyType.ColonAndRectalSurgery:
            medicalSpecialty = "Colon And Rectal Surgery";
            break;
        case MedicalSpecialtyType.Dermatology:
            medicalSpecialty = "Dermatology";
            break;
        case MedicalSpecialtyType.EmergencyMedicine:
            medicalSpecialty = "Emergency Medicine";
            break;
        case MedicalSpecialtyType.FamilyMedicine:
            medicalSpecialty = "Family Medicine";
            break;
        case MedicalSpecialtyType.HospiceAndPalliativeMedicine:
            medicalSpecialty = "Hospice And Palliative Medicine";
            break;
        case MedicalSpecialtyType.InternalMedicine:
            medicalSpecialty = "Internal Medicine";
            break;
        case MedicalSpecialtyType.MedicalGenetics:
            medicalSpecialty = "Medical Genetics";
            break;
        case MedicalSpecialtyType.MedicalNuclearPhysics:
            medicalSpecialty = "Medical Nuclear Physics";
            break;

        case MedicalSpecialtyType.Neurology:
            medicalSpecialty = "Neurology";
            break;
        case MedicalSpecialtyType.Neurosurgery:
            medicalSpecialty = "Neurosurgery";
            break;
        case MedicalSpecialtyType.NuclearMedicine:
            medicalSpecialty = "NuclearMedicine";
            break;
        case MedicalSpecialtyType.ObstetricsAndGynecology:
            medicalSpecialty = "Obstetrics And Gynecology";
            break;
        case MedicalSpecialtyType.Ophthalmology:
            medicalSpecialty = "Ophthalmology";
            break;
        case MedicalSpecialtyType.OrthopedicSurgery:
            medicalSpecialty = "Orthopedic Surgery";
            break;
        case MedicalSpecialtyType.Otolaryngology:
            medicalSpecialty = "Otolaryngology";
            break;
        case MedicalSpecialtyType.Pediatrics:
            medicalSpecialty = "Pediatrics";
            break;
        case MedicalSpecialtyType.PhysicalMedicineAndRehibilitation:
            medicalSpecialty = "Physical Medicine And Rehibilitation";
            break;
        case MedicalSpecialtyType.PlasticSurgery:
            medicalSpecialty = "PlasticSurgery";
            break;
        case MedicalSpecialtyType.Psychiatry:
            medicalSpecialty = "Psychiatry";
            break;
        case MedicalSpecialtyType.PublicHealthAndGeneralPreventive:
            medicalSpecialty = "Public Health And General Preventive";
            break;
        case MedicalSpecialtyType.Radiology:
            medicalSpecialty = "Radiology";
            break;
        case MedicalSpecialtyType.Surgery:
            medicalSpecialty = "Surgery";
            break;
        case MedicalSpecialtyType.ThoracicSurgery:
            medicalSpecialty = "Thoracic Surgery";
            break;
        case MedicalSpecialtyType.Urology:
            medicalSpecialty = "Urology";
            break;
        case MedicalSpecialtyType.VascularSurgery:
            medicalSpecialty = "Vascular Surgery";
            break;
        default:
            break;
    }
    return medicalSpecialty;
}


private string ParsePriority(int priority)
{
    string rValue = "";
    switch (priority)
    {
        case 1:
            rValue = "Over Coffee";
            break;
        /*case 2:
            rValue = "Low";
            break;*/
        default:
            rValue = "Stat";
            break;
    }
    return rValue;
}
private async Task addToHistory(string historyType)
{
    //history stuffs
    PostHistory newHistory = new PostHistory();
    newHistory.ID = 0;
    newHistory.PostID = userId;
    newHistory.CreationDate = DateTime.Now;
    newHistory.PosterID = usr.PublicId;
    newHistory.UserID = userId;
    newHistory.UserDisplayName = usr.FirstName + " " + usr.LastName;
    newHistory.UserDisplayName2 = profile.FirstName + " " + profile.LastName;
    if (historyType == "Invited")
    {
        newHistory.Title = profile.FirstName + " " + profile.LastName + "to connect.";
    }
    else
    {
        newHistory.Title = "on " + usr.FirstName + " " + usr.LastName + "'s Hippra page";
    }

    newHistory.Detail = "";
    newHistory.HistoryTypes = historyType;
    lastHistoryID = await hService.AddHistory(newHistory);
}
private async Task EditBio()
{
    editBio = true;
    StateHasChanged();
}
private async Task SaveBio()
{
    if (isSubmitted)
    {
        await addToHistory("updated biography");
        SaveProfile();
    }
}
private async Task AddToBio()
{

}
private async Task Cancel()
{
    editBio = false;
    StateHasChanged();
}
private async Task Submitted()
{
    isSubmitted = true;
}

private async Task RemoveConnection()
{
    await hService.RemoveConnection(usr.PublicId, userId);
    connectStatus = "NC";
    await addToHistory("disconnected with");
    await GetConnResults(userId, CurrentConnPage);
    StateHasChanged();
}
private async Task viewPage(int id)
{
    NavigationManager.NavigateTo("/");
    NavigationManager.NavigateTo("/PersonalPage/" + id);

}
private async Task SendAnInvitation()
{
    Connection newConn = new Connection();
    newConn.ID = 0;
    newConn.UserID = usr.PublicId;
    newConn.FriendID = userId;
    newConn.Status = -1;
    connectStatus = "P";
    await hService.AddConnection(newConn);
    await addToHistory("invited");
    await Notify(1);
    StateHasChanged();
}
private async Task AddToFollowerList()
{
    Follow newF = new Follow();
    newF.ID = 0;
    newF.FollowerUserID = usr.PublicId;
    newF.FollowingUserID = userId;
    await hService.AddFollower(newF);
    isFollowed = true;
    await addToHistory("followed");
    await Notify(-1);
    StateHasChanged();
}
private async Task RemoveFromFollowerList()
{
    await hService.RemoveFollower(usr.PublicId, userId);
    isFollowed = false;
    await addToHistory("unfollowed");
    StateHasChanged();
}
private async Task Notify(int type)
{
    //    int id = await hService.GetHistoryID(userId, usr.PublicId);
    Notification newNotifs = new Notification();
    newNotifs.ID = 0;
    newNotifs.SenderID = usr.PublicId;
    newNotifs.ReceiverID = userId;
    newNotifs.NotificationID = lastHistoryID;
    newNotifs.IsRead = -1;
    if(type == 1)
    {
        newNotifs.IsResponseNeeded = 1;
    }
    else
    {
        newNotifs.IsResponseNeeded = -1;
    }
    newNotifs.CreationDate = DateTime.Now;
    await hService.AddNotification(newNotifs);
}
private async Task ChangePageConn(int targetPage)
{

    await GetConnResults(userId, targetPage);

    var pg = paginationConnData.FirstOrDefault(s => s.isActive);
    pg.isActive = false;
    CurrentConnPage = targetPage;
    pg = paginationConnData.FirstOrDefault(s => s.id == CurrentConnPage);
    pg.isActive = true;
    this.StateHasChanged();
}
private async Task GetConnResults(int id, int targetPage)
{
    var result = await hService.GetAllConnections(id, targetPage, PageSize);
    connList = result.Connections;
    CountConn = result.TotalCount;
}
}

