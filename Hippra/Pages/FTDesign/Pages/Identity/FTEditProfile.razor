@page "/FTEditProfile"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;
@inject HippraService hService
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Extensions
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized Context="SaveProfileContext">
        <FTSubHeaderBar Title="Edit Profile" HasSeparator="false">
            <div class="flex-grow-1"></div>
            <a href="FTProfile/-1/0">View</a>
        </FTSubHeaderBar>
        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row ">
                        <div class="offset-md-2 col-md-8 offset-md-2 ">

                            <br />
                            <h4 class="display-4 text-center">Edit Profile</h4>
                            <br />
                            @if(dataReady)
                            {
                                                        <EditForm Model="@inputModel" OnValidSubmit="@SaveProfile">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                        @*<div class="mb-3">
                                                <label for="Email">Username</label>
                                                <InputText disabled class="form-control" id="Username" type="text" required placeholder="Enter Username" @bind-Value="@inputModel.UserName" aria-label="Username" aria-describedby="Username" />
                                            </div>*@


                                        <div class=" mb-3">
                                            <label for="FirstName">First Name</label>
                                            <InputText class="form-control" id="FirstName" required placeholder="First Name" @bind-Value="@inputModel.FirstName" aria-label="First Name" aria-describedby="First Name" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="LastName">Last Name</label>
                                            <InputText class="form-control" id="LastName" required placeholder="Last Name" @bind-Value="@inputModel.LastName" aria-label="Last Name" aria-describedby="Last Name" />

                                        </div>
                                        <div class="mb-3">
                                            <label for="Email">Email</label>
                                            <InputText disabled class="form-control" id="Email" type="email" required placeholder="Enter Email" @bind-Value="@inputModel.Email" aria-label="Email" aria-describedby="Email" />
                                        </div>
                                        <div class="mb-3">
                                            <label for="Password">Password</label>
                                            <InputText class="form-control" id="Password" type="password" required placeholder="Enter Password" @bind-Value="@inputModel.Password" aria-label="Password" aria-describedby="Password" />
                                            <div class="small text-muted">
                                                8+ characters, Uppercase, Lowercase, Number, Special characters. You can change this later
                                            </div>
                                        </div>
                                        @*<div class="mb-3">
                                                <label for="ConfirmPassword">Confirm Password</label>
                                                <InputText class="form-control" id="ConfirmPassword" type="password" required placeholder="Confirm Password" @bind-Value="@inputModel.ConfirmPassword" aria-label="Confirm Password" aria-describedby="Confirm Password" />
                                                <div class="small text-muted">
                                                    You can change this later
                                                </div>
                                            </div>*@
                                        <br />

                                    </div>

                                </div>

                                <div class=" row">
                                    <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                        <div class="ms-fontWeight-semibold ms-fontSize-24 ">Professional Profile</div>

                                        <div class=" mb-3">
                                            <label for="NPIN">National Provider Identifier Number</label>
                                            <InputNumber class="form-control" id="NPIN" required placeholder="National Provider Identifier Number" @bind-Value="@inputModel.NPIN" aria-label="National Provider Identifier Number" aria-describedby="National Provider Identifier Number" />
                                        </div>
                                        <div class=" mb-3">
                                            @*<label for="MedicalSpecialty">Medical Specialty</label>*@
                                            <InputSelect id="MedicalSpecialty" @bind-Value="@inputModel.mSpecialty">
                                                @foreach (var i in specialtyList)
                                                {
                                                    <option value="@i.Value">@i.Text</option>
                                                }
                                            </InputSelect>

                                        </div>
                                        <div class=" mb-3">
                                            <div class="form-check">
                                                <InputCheckbox class="form-check-input" type="checkbox" id="BoardCertified" @bind-Value="inputModel.AmericanBoardCertified" />
                                                <label class="form-check-label" for="BoardCertified" checked>
                                                    American Board Certified
                                                </label>
                                            </div>
                                        </div>
                                        <div class=" mb-3">
                                            <label for="Residency">Residency Hospital</label>
                                            <InputText class="form-control" id="Residency" placeholder="Residency Hospital" @bind-Value="@inputModel.ResidencyHospital" aria-label="Residency" aria-describedby="Residency" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="MedicalSchool">Medical School Attended</label>
                                            <InputText class="form-control" id="MedicalSchool" placeholder="Medical School Attended" @bind-Value="@inputModel.MedicalSchoolAttended" aria-label="MedicalSchool" aria-describedby="MedicalSchool" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="Education">Education/Degree</label>
                                            <InputText class="form-control" id="Education" placeholder="Education/Degree" @bind-Value="@inputModel.EducationDegree" aria-label="Education" aria-describedby="Education" />

                                        </div>
                                        <br />

                                    </div>


                                </div>

                                <div class="">
                                    <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                        <div class="ms-fontWeight-semibold ms-fontSize-24 ">Contact</div>
                                        <br />

                                        <div class=" mb-3">
                                            <label for="Address">Address</label>
                                            <InputText class="form-control" id="Address" placeholder="Address" @bind-Value="@inputModel.Address" aria-label="Address" aria-describedby="Address" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="City">City</label>
                                            <InputText class="form-control" id="City" placeholder="City" @bind-Value="@inputModel.City" aria-label="City" aria-describedby="City" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="State">State</label>
                                            <InputText class="form-control" id="State" placeholder="State" @bind-Value="@inputModel.State" aria-label="State" aria-describedby="State" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="Zipcode">Zipcode</label>
                                            <InputText class="form-control" id="Zipcode" placeholder="Zipcode" @bind-Value="@inputModel.Zipcode" aria-label="Zipcode" aria-describedby="Zipcode" />

                                        </div>
                                        <div class=" mb-3">
                                            <label for="PhoneNumber">Phone Number</label>
                                            <InputText class="form-control" id="PhoneNumber" placeholder="Phone Number" @bind-Value="@inputModel.PhoneNumber" aria-label="PhoneNumber" aria-describedby="PhoneNumber" />

                                        </div>
                                        <br />
                                    </div>


                                </div>

                                <div class="">
                                    <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                        <br />
                                        <div class="d-flex justify-content-between">

                                            <button class="btn btn-dark" type="submit">Save</button>
                                        </div>
                                    </div>
                                    @if (hasError)
                                    {
                                        <div class="alert alert-danger">Something went wrong. Please try again.</div>
                                    }
                                    @if (status == 1)
                                    {
                                        <div class="alert alert-success">Saved.</div>
                                    }
                                </div>



                            </EditForm>
                            }


                        </div>
                    </div>
                    <br />
                    <br />
                    <br />
                    <br />
                </div>
            </div>
        </div>


    </Authorized>
    <NotAuthorized>
        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                            <br /><br />
                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                            <br /><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>



    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int userId { get; set; } = -1; // public ID

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    //private FTRegisterModel userInfo { get; set; }


    private bool hasError { get; set; } = false;
    private bool sentVerification { get; set; } = false;
    private int status { get; set; } = 0;
    private bool dataReady =  false;

    private FTEditProfileModel inputModel { get; set; } = new FTEditProfileModel();

    public class FTEditProfileModel : FTEditModel
    {
        public MedicalSpecialtyType mSpecialty { get; set; }
    }

    /*
         private ERTWUserModel userInfo { get; set; }

    public class ERTWUserModel: ERTWUser
    {
        public string avatar{ get; set; }
    }

         */


    private List<SelectListItem> specialtyList { get; set; }

    private int usrID { get; set; }
    private MedicalSpecialtyType posterSpeciality = 0;
	private int NPIN = 0;
	private bool AmericanBoardCertified = false;
	private string fullName = "";

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;
        AppUser usr;
        if (user.Identity.IsAuthenticated)
        {
            @*usr = await UserManager.GetUserAsync(user);*@
            try
            {

                usrID = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
                posterSpeciality = (MedicalSpecialtyType)Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "MedicalSpecialty")?.Value);
                NPIN = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "NPIN")?.Value);
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
            fullName = user.Claims.FirstOrDefault(s => s.Type == "FirstName")?.Value + " " + user.Claims.FirstOrDefault(s => s.Type == "LastName")?.Value;
            if (user.Claims.FirstOrDefault(s => s.Type == "AmericanBoardCertified")?.Value == "1")
            {
                AmericanBoardCertified = true;
            }

        }
        @* else
        {
            usr = await Hippra.Extensions.UserManagerExtensions.FindByPublicIDNoTrackAsync(UserManager, userId);
        }*@
        inputModel = new FTEditProfileModel()
            {
                UserName = user.Claims.FirstOrDefault(s => s.Type == "UserName")?.Value,
                Email = user.Claims.FirstOrDefault(s => s.Type == "Email")?.Value,

                FirstName = user.Claims.FirstOrDefault(s => s.Type == "FirstName")?.Value,
                LastName = user.Claims.FirstOrDefault(s => s.Type == "LastName")?.Value,
                NPIN = NPIN,
            @*MedicalSpecialty = posterSpeciality,*@
    AmericanBoardCertified = AmericanBoardCertified,
                ResidencyHospital = user.Claims.FirstOrDefault(s => s.Type == "ResidencyHospital")?.Value,// usr.ResidencyHospital,
                MedicalSchoolAttended = user.Claims.FirstOrDefault(s => s.Type == "MedicalSchoolAttended")?.Value,//usr.MedicalSchoolAttended,
                EducationDegree = user.Claims.FirstOrDefault(s => s.Type == "EducationDegree")?.Value,//usr.EducationDegree,
                Address = user.Claims.FirstOrDefault(s => s.Type == "Address")?.Value,//usr.Address,
                Zipcode = user.Claims.FirstOrDefault(s => s.Type == "Zipcode")?.Value,//usr.Zipcode,
                State = user.Claims.FirstOrDefault(s => s.Type == "State")?.Value,//usr.State,
                City = user.Claims.FirstOrDefault(s => s.Type == "City")?.Value,//usr.City,
                PhoneNumber = user.Claims.FirstOrDefault(s => s.Type == "PhoneNumber")?.Value,//usr.PhoneNumber



                mSpecialty = posterSpeciality

        };

        specialtyList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "Anesthesiology" },
                new SelectListItem { Value = "1", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "2", Text = "Dermatology" },
                new SelectListItem { Value = "3", Text = "Emergency Medicine" },
                new SelectListItem { Value = "4", Text = "Family Medicine" },

                new SelectListItem { Value = "5", Text = "Internal Medicine" },
                new SelectListItem { Value = "6", Text = "Medical Genetics" },
                new SelectListItem { Value = "7", Text = "Neurology" },
                new SelectListItem { Value = "8", Text = "Neurosurgery" },
                new SelectListItem { Value = "9", Text = "Nuclear Medicine" },

                new SelectListItem { Value = "10", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "11", Text = "Ophthalmology" },
                new SelectListItem { Value = "12", Text = "OrthopedicSurgery" },
                new SelectListItem { Value = "13", Text = "Otolaryngology" },
                new SelectListItem { Value = "14", Text = "Anatomic Pathology and Clinical Pathology" },

                new SelectListItem { Value = "15", Text = "Pediatrics" },
                new SelectListItem { Value = "16", Text = "Physical Medicine and Rehibilitation" },
                new SelectListItem { Value = "17", Text = "PlasticSurgery" },
                new SelectListItem { Value = "18", Text = "Public Health and General Preventive" },
                new SelectListItem { Value = "19", Text = "Psychiatry" },

                new SelectListItem { Value = "20", Text = "Radiology" },
                new SelectListItem { Value = "21", Text = "Hospice and Palliative Medicine" },
                new SelectListItem { Value = "22", Text = "Hospice and Palliative Medicine" },
                new SelectListItem { Value = "23", Text = "Surgery" },
                new SelectListItem { Value = "24", Text = "Vascular Surgery" },

                new SelectListItem { Value = "25", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "26", Text = "Urology" }
        };
        dataReady = true;
        StateHasChanged();

    }
    private string ParseMedicalSpecialty(MedicalSpecialtyType MedicalSpecialty)
    {

        string medicalSpecialty = "";
        switch (MedicalSpecialty)
        {
            case MedicalSpecialtyType.Anesthesiology:
                medicalSpecialty = "Anesthesiology";
                break;
            case MedicalSpecialtyType.AnatomicPathologyAndClinicalPathology:
                medicalSpecialty = "Anatomic Pathology And Clinical Pathology";
                break;
            case MedicalSpecialtyType.ColonAndRectalSurgery:
                medicalSpecialty = "Colon And Rectal Surgery";
                break;
            case MedicalSpecialtyType.Dermatology:
                medicalSpecialty = "Dermatology";
                break;
            case MedicalSpecialtyType.EmergencyMedicine:
                medicalSpecialty = "Emergency Medicine";
                break;
            case MedicalSpecialtyType.FamilyMedicine:
                medicalSpecialty = "Family Medicine";
                break;
            case MedicalSpecialtyType.HospiceAndPalliativeMedicine:
                medicalSpecialty = "Hospice And Palliative Medicine";
                break;
            case MedicalSpecialtyType.InternalMedicine:
                medicalSpecialty = "Internal Medicine";
                break;
            case MedicalSpecialtyType.MedicalGenetics:
                medicalSpecialty = "Medical Genetics";
                break;
            case MedicalSpecialtyType.MedicalNuclearPhysics:
                medicalSpecialty = "Medical Nuclear Physics";
                break;

            case MedicalSpecialtyType.Neurology:
                medicalSpecialty = "Neurology";
                break;
            case MedicalSpecialtyType.Neurosurgery:
                medicalSpecialty = "Neurosurgery";
                break;
            case MedicalSpecialtyType.NuclearMedicine:
                medicalSpecialty = "NuclearMedicine";
                break;
            case MedicalSpecialtyType.ObstetricsAndGynecology:
                medicalSpecialty = "Obstetrics And Gynecology";
                break;
            case MedicalSpecialtyType.Ophthalmology:
                medicalSpecialty = "Ophthalmology";
                break;
            case MedicalSpecialtyType.OrthopedicSurgery:
                medicalSpecialty = "Orthopedic Surgery";
                break;
            case MedicalSpecialtyType.Otolaryngology:
                medicalSpecialty = "Otolaryngology";
                break;
            case MedicalSpecialtyType.Pediatrics:
                medicalSpecialty = "Pediatrics";
                break;
            case MedicalSpecialtyType.PhysicalMedicineAndRehibilitation:
                medicalSpecialty = "Physical Medicine And Rehibilitation";
                break;
            case MedicalSpecialtyType.PlasticSurgery:
                medicalSpecialty = "PlasticSurgery";
                break;
            case MedicalSpecialtyType.Psychiatry:
                medicalSpecialty = "Psychiatry";
                break;
            case MedicalSpecialtyType.PublicHealthAndGeneralPreventive:
                medicalSpecialty = "Public Health And General Preventive";
                break;
            case MedicalSpecialtyType.Radiology:
                medicalSpecialty = "Radiology";
                break;
            case MedicalSpecialtyType.Surgery:
                medicalSpecialty = "Surgery";
                break;
            case MedicalSpecialtyType.ThoracicSurgery:
                medicalSpecialty = "Thoracic Surgery";
                break;
            case MedicalSpecialtyType.Urology:
                medicalSpecialty = "Urology";
                break;
            case MedicalSpecialtyType.VascularSurgery:
                medicalSpecialty = "Vascular Surgery";
                break;
            default:
                break;
        }
        return medicalSpecialty;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        //    var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.SubscribeAnimalChange", "animalIcon");
        //}
    }

    private async Task SaveProfile()
    {
        hasError = false;
        //if (string.IsNullOrWhiteSpace(userInfo.CoolName))
        //{
        //    hasError = true;
        //    this.StateHasChanged();
        //    return;
        //}

        authState = await authenticationStateTask;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            @*var usr = await UserManager.GetUserAsync(user);*@
            AppUser usr = new AppUser();
            usr.PublicId = usrID;

            usr.FirstName = inputModel.FirstName;
            usr.LastName = inputModel.LastName;
            usr.IdNumber = inputModel.NPIN;
            usr.MedicalSpecialty = inputModel.mSpecialty;
            usr.AmericanBoardCertified = inputModel.AmericanBoardCertified;

            usr.ResidencyHospital = inputModel.ResidencyHospital;
            usr.MedicalSchoolAttended = inputModel.MedicalSchoolAttended;
            usr.EducationDegree = inputModel.EducationDegree;
            usr.Address = inputModel.Address;
            usr.Zipcode = inputModel.Zipcode;
            usr.State = inputModel.State;
            usr.City = inputModel.City;
            usr.PhoneNumber = inputModel.PhoneNumber; // check this

            try
            {
               // await pService.UpdateUserProfile( profile);
            }
            catch (Exception e)
            {
                hasError = true;
                this.StateHasChanged();
                return;
            }
            status = 1;
            PostHistory newHistory = new PostHistory();
            newHistory.ID = 0;
            newHistory.PostID = -1;
            newHistory.CreationDate = DateTime.Now;
            newHistory.PosterID = usrID;
            newHistory.UserDisplayName = fullName;
            newHistory.Title = "Hippra";
            newHistory.Detail = "Profile updated";
            newHistory.HistoryTypes = "edited profile";
            await hService.AddHistory(newHistory);

            NavigationManager.NavigateTo("FTRefreshSignIn?returnUrl=FTEditProfile", true);

            this.StateHasChanged();
            return;
        }
        hasError = true;
        this.StateHasChanged();
        return;


    }
}
