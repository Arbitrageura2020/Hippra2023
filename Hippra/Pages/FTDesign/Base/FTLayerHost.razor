@using Hippra.Models.FTDesign

@implements IDisposable

<CascadingValue Value=@this Name="LayerHost">
    <div class="@ADClassName ft-layer-manager" style=@ADStyle id="lmgr">
        @ChildContent
    </div>

    @if (LayerList != null)
    {
        @foreach (var layer in LayerList)
        {

            if (layer.Active)
            {
                <div class="ft-layer1-container" style="z-index:@layer.z">
                    @layer.Content;
                </div>
            }

        }
    }



</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    //[Parameter] public RenderFragment HostedContent { get; set; }

    [Parameter] public string ADClassName { get; set; }
    [Parameter] public string ADStyle { get; set; }

    protected List<LayerDefinition> LayerList { get; set; }
    private int CurrentLayer { get; set; } = 2100;
    private int Incremental { get; set; } = 100;

    private bool isDisposed { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        LayerList = new List<LayerDefinition>();
    }

    public void Dispose()
    {
        //LayerList.Clear();
        isDisposed = true;
    }

    public int AddLayer(RenderFragment content)
    {
        LayerDefinition layer = new LayerDefinition();
        layer.Content = content;
        layer.Active = false;
        layer.ID = LayerList.Count;
        layer.z = 0;
        LayerList.Add(layer);
        this.StateHasChanged();
        return layer.ID;
    }

    public void RemoveLayer(int Id)
    {
        var layer = LayerList.FirstOrDefault(s => s.ID == Id);
        if (layer != null)
        {
            LayerList.Remove(layer);
        }
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
        
    }
    public void ActiveLayer(int Id)
    {

        var layer = LayerList.FirstOrDefault(s => s.ID == Id);
        if (layer != null)
        {
            CurrentLayer = CurrentLayer + Incremental;
            layer.z = CurrentLayer;
            layer.Active = true;
        }
        this.StateHasChanged();
    }
    public void DisableLayer(int Id)
    {
        var layer = LayerList.FirstOrDefault(s => s.ID == Id);
        if (layer != null)
        {
            CurrentLayer = CurrentLayer - Incremental;
            layer.z = 0;
            layer.Active = false;
        }
        
        if (!isDisposed)
        {
            this.StateHasChanged();
        }
    }
    public  List<LayerDefinition> GetLayerList()
    {
        return LayerList;
    }
}
