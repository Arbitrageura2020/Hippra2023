
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Models.FTDesign;
@using Hippra.Services;
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;
@using Hippra.Models.SQL;
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@using System.Security.Claims
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized Context="DeleteAccountContext">
        <div class="card">
            <div class="card-body">
                <br />
                <br />
                <div class="d-block text-center">


                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                            <div class="mb-3 display-4 ">Personal Data</div>
                            <br />
                            <div class="mb-3">
                                Your account contains personal data that you have given us. This page allows you to download or delete that data.
                            </div>
                            <div class="mb-3">
                                <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
                            </div>
                            <hr />
                            <br />
                            <div class="mx-2">
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-outline-primary" @onclick="DownloadPersonalData">Download</button>
                                </div>

                                <br />

                            </div>

                        </div>

                    </div>


                    @if (hasDownloadData)
                    {
                        <div class="row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                <div class="card">
                                    <div class="card-header">Personal Data</div>
                                    <div class="card-body">
                                        <div class="card-text">
                                            @downloadData
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                    }
                    <br />
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                            <div class="mx-2">
                                <div class="d-flex justify-content-between">
                                    <a class="btn btn-outline-danger" href="FTDeleteAccount">Delete</a>
                                </div>
                            </div>

                        </div>

                    </div>
                    <br /><br />
                </div>
                <br />
                <br />
            </div>
        </div>


    </Authorized>
    <NotAuthorized>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                        <br /><br />
                        <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                        <br /><br />
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private tempModel inputModel { get; set; } = new tempModel();
    private bool hasError { get; set; } = false;
    private bool sentVerification { get; set; } = false;
    private int status { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    private bool hasDownloadData { get; set; } = false;
    private string downloadData { get; set; } = "";

    public class tempModel
    {
        public int nada { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*var usr = await UserManager.GetUserAsync(user);*@

        }


    }

    private async Task DownloadPersonalData()
    {

        authState = await authenticationStateTask;
        user = authState.User;
        hasDownloadData = true;
        if (user.Identity.IsAuthenticated)
        {
            @*var usr = await UserManager.GetUserAsync(user);*@
            try
            {
                int numVal = Int32.Parse( user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value );
                downloadData = await pService.DownloadPersonalData(numVal);
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }

            this.StateHasChanged();
            return;
        }

        downloadData = "No Personal Data downloaded";

    }

}
