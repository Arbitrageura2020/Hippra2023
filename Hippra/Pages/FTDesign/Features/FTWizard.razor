@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Models.FTDesign;
@using Hippra.Models.SQL
@using Hippra.Models.Enums;
@using Hippra.Services;
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;
@inject HippraService hService
@using Microsoft.AspNetCore.Mvc.Rendering;

<AuthorizeView>
    <Authorized>
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                        <br /><br />
                        <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Already Signed In!</div>
                        <br /><br />
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized Context="SignUpContext">

        <div class="card">
            <div class="card-body">
                <br />
                @if (ShowTabs)
                {
                    <FTWizardMenu count="tabCount" MenuClicked="tabClicked" current="currentTab" />
                }

                <br />
                <hr />
                <br />
                <div class="d-block text-center">
                    <EditForm Model="@inputModel" OnValidSubmit="@SubmitSignUp">


                        <div class="@menuArray.ElementAt(0).cssClass row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Create New Account</div>
                                <br />

                                <div class="d-none mb-3">
                                    <label for="Email">* Username</label>
                                    <InputText class="form-control" id="Username" type="text" placeholder="Enter Username (email for now)" @bind-Value="@inputModel.UserName" aria-label="Username" aria-describedby="Username" />
                                </div>
                                <div class="mb-3">
                                    <label for="Email">* Username / Email</label>
                                    <InputText class="form-control" id="Email" type="email" required placeholder="Enter Email" @bind-Value="@inputModel.Email" aria-label="Email" aria-describedby="Email" />
                                    <div class="small text-muted">
                                        We'll never share your email with anyone else
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="Password">* Password</label>
                                    <InputText class="form-control" id="Password" type="password" required placeholder="Enter Password" @bind-Value="@inputModel.Password" aria-label="Password" aria-describedby="Password" />
                                    <div class="small text-muted">
                                        8+ characters, Uppercase, Lowercase, Number, Special characters. You can change this later
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="ConfirmPassword">* Confirm Password</label>
                                    <InputText class="form-control" id="ConfirmPassword" type="password" required placeholder="Confirm Password" @bind-Value="@inputModel.ConfirmPassword" aria-label="Confirm Password" aria-describedby="Confirm Password" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <br /><hr /><br />
                                @if (ShowTabs)
                                {

                                    <div class="d-flex justify-content-end">
                                        <button type="button" class="btn btn-dark" @onclick="nextTab">Next Step</button>
                                    </div>
                                }


                            </div>

                        </div>

                        <div class="@menuArray.ElementAt(1).cssClass row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                <div class="ms-fontWeight-semibold ms-fontSize-24 ">Setup Profile</div>
                                <br />
                                <div class=" mb-3">
                                    <label for="FirstName">* First Name</label>
                                    <InputText class="form-control" id="FirstName" required placeholder="First Name" @bind-Value="@inputModel.FirstName" aria-label="First Name" aria-describedby="First Name" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="LastName">* Last Name</label>
                                    <InputText class="form-control" id="LastName" required placeholder="Last Name" @bind-Value="@inputModel.LastName" aria-label="Last Name" aria-describedby="Last Name" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="NPIN">National Provider Identifier Number</label>
                                    <InputNumber class="form-control" id="NPIN" placeholder="National Provider Identifier Number" @bind-Value="@inputModel.NPIN" aria-label="National Provider Identifier Number" aria-describedby="National Provider Identifier Number" />
                                    <div class="small text-muted">
                                        You can change this later
                                    </div>
                                </div>
                                <div class=" mb-3">
                                    <label for="MedicalSpecialty">Medical Specialty</label>
                                    <InputSelect id="MedicalSpecialty" @bind-Value="@bMedicalSpecialty">
                                        @foreach (var i in specialtyList)
                                        {
                                            <option value="@i.Value">@i.Text</option>
                                        }
                                    </InputSelect>
                                    <div class="small text-muted">
                                        You can change this later
                                    </div>
                                </div>
                                <div class=" mb-3">
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" type="checkbox" id="BoardCertified" @bind-Value="inputModel.AmericanBoardCertified" />
                                        <label class="form-check-label" for="BoardCertified" checked>
                                            American Board Certified
                                        </label>
                                    </div>
                                </div>
                                <div class=" mb-3">
                                    <label for="Residency">Residency Hospital</label>
                                    <InputText class="form-control" id="Residency" placeholder="Residency Hospital" @bind-Value="@inputModel.ResidencyHospital" aria-label="Residency" aria-describedby="Residency" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="MedicalSchool">Medical School Attended</label>
                                    <InputText class="form-control" id="MedicalSchool" placeholder="Medical School Attended" @bind-Value="@inputModel.MedicalSchoolAttended" aria-label="MedicalSchool" aria-describedby="MedicalSchool" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="Education">Education/Degree</label>
                                    <InputText class="form-control" id="Education" placeholder="Education/Degree" @bind-Value="@inputModel.EducationDegree" aria-label="Education" aria-describedby="Education" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <br /><hr /><br />
                                @if (ShowTabs)
                                {

                                    <div class="d-flex justify-content-between">
                                        <button type="button" class="btn btn-outline-dark" @onclick="prevTab">Previous</button>
                                        <button type="button" class="btn btn-dark" @onclick="nextTab">Next Step</button>
                                    </div>
                                }


                            </div>


                        </div>

                        <div class="@menuArray.ElementAt(2).cssClass">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                <div class="ms-fontWeight-semibold ms-fontSize-24 ">Contact</div>
                                <br />

                                <div class=" mb-3">
                                    <label for="Address">Address</label>
                                    <InputText class="form-control" id="Address" placeholder="Address" @bind-Value="@inputModel.Address" aria-label="Address" aria-describedby="Address" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="City">City</label>
                                    <InputText class="form-control" id="City" placeholder="City" @bind-Value="@inputModel.City" aria-label="City" aria-describedby="City" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="State">State</label>
                                    <InputText class="form-control" id="State" placeholder="State" @bind-Value="@inputModel.State" aria-label="State" aria-describedby="State" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="Zipcode">Zipcode</label>
                                    <InputText class="form-control" id="Zipcode" placeholder="Zipcode" @bind-Value="@inputModel.Zipcode" aria-label="Zipcode" aria-describedby="Zipcode" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <div class=" mb-3">
                                    <label for="PhoneNumber">Phone Number</label>
                                    <InputText class="form-control" id="PhoneNumber" placeholder="Phone Number" @bind-Value="@inputModel.PhoneNumber" aria-label="PhoneNumber" aria-describedby="PhoneNumber" />
                                    @*<div class="small text-muted">
                                            You can change this later
                                        </div>*@
                                </div>
                                <br /><hr /><br />
                                @if (ShowTabs)
                                {

                                    <div class="d-flex justify-content-between">
                                        <button type="button" class="btn btn-outline-dark" @onclick="prevTab">Previous</button>
                                        <button type="button" class="btn btn-dark" @onclick="nextTab">Next Step</button>
                                    </div>
                                }

                            </div>


                        </div>

                        <div class="@menuArray.ElementAt(3).cssClass">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                                <div class="ms-fontWeight-semibold ms-fontSize-24 ">Terms & Conditions</div>
                                <br />
                                <div class="form-check">

                                    <InputCheckbox class="form-check-input" type="checkbox" id="gc1" @bind-Value="inputModel.AgreedTerm" @onclick="toggleSubmitCSS" />
                                    <label class="form-check-label" for="gc1">
                                        Click here to indicate that you have read and agree to the terms presented in the <a class="text-black" href="/terms">Terms and Conditions</a> agreement
                                    </label>
                                </div>

                                <br /><hr /><br />
                                @if (ShowTabs)
                                {
                                    <div class="d-flex justify-content-between">
                                        <button type="button" class="btn btn-outline-dark" @onclick="prevTab">Previous</button>
                                        <button class="btn btn-dark" disabled="@submitBtnCss" type="submit">Submit</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-end">
                                        <button class="btn btn-dark" disabled="@submitBtnCss" type="submit">Submit</button>
                                    </div>
                                }
                                <div>
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    @if (hasPasswordError)
                                    {
                                        <div class="alert alert-danger">The Password must contains a Uppercase, a Lowercase, a Number, and a Special characters. Please try again.</div>
                                    }
                                </div>

                            </div>
                            @if (hasError)
                            {
                                <div class="alert alert-danger">Something went wrong. Please try again.</div>
                            }

                        </div>



                    </EditForm>

                    <div class="@menuArray.ElementAt(4).cssClass row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Registered!</div>
                            <br />
                            <div class="mb-3">
                                Welcome! Please check your email to confirm your account. Your account is pending approval. Should be done within 24-hours. Meanwhile, feel free to browse around.
                            </div>
                            <a class="btn btn-dark" href="/">Return to Home</a>
                        </div>
                    </div>
                </div>
                <br />

            </div>
        </div>


    </NotAuthorized>
</AuthorizeView>




@code {
    private bool submitBtnCss { get; set; } = true;

    private FTRegisterModel inputModel { get; set; }
    private MedicalSpecialtyType bMedicalSpecialty { get; set; } = MedicalSpecialtyType.Anesthesiology;

    private List<SelectListItem> specialtyList { get; set; }


    private int tabCount { get; set; } = 5;
    private int currentTab { get; set; } = 0;
    private List<array> menuArray { get; set; }
    private class array
    {
        public string cssClass { get; set; }
    }
    private bool hasError { get; set; } = false;
    private bool hasPasswordError { get; set; } = false;


    // CONFIG
    private bool ShowTabs { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {

        inputModel = new FTRegisterModel();
        currentTab = 0;
        menuArray = new List<array>();
        for (int i = 0; i < tabCount; i++)
        {
            if (ShowTabs)
            {

                menuArray.Add(new array { cssClass = "d-none" });
            }
            else
            {
                menuArray.Add(new array { cssClass = "" });

            }
        }
        menuArray.ElementAt(currentTab).cssClass = "";

        if (!ShowTabs)
        {
            menuArray.ElementAt(4).cssClass = "d-none";
        }

        //specialtyList = new List<SelectListItem> {
        //        new SelectListItem { Value = "0", Text = "Anesthesiology" },
        //        new SelectListItem { Value = "1", Text = "Colon and Rectal Surgery" },
        //        new SelectListItem { Value = "2", Text = "Dermatology" },
        //        new SelectListItem { Value = "3", Text = "Emergency Medicine" },
        //        new SelectListItem { Value = "4", Text = "Family Medicine" },

        //        new SelectListItem { Value = "5", Text = "Internal Medicine" },
        //        new SelectListItem { Value = "6", Text = "Medical Genetics" },
        //        new SelectListItem { Value = "7", Text = "Neurology" },
        //        new SelectListItem { Value = "8", Text = "Neurosurgery" },
        //        new SelectListItem { Value = "9", Text = "Nuclear Medicine" },

        //        new SelectListItem { Value = "10", Text = "Obstetrics and Gynecology" },
        //        new SelectListItem { Value = "11", Text = "Ophthalmology" },
        //        new SelectListItem { Value = "12", Text = "OrthopedicSurgery" },
        //        new SelectListItem { Value = "13", Text = "Otolaryngology" },
        //        new SelectListItem { Value = "14", Text = "Anatomic Pathology and Clinical Pathology" },

        //        new SelectListItem { Value = "15", Text = "Pediatrics" },
        //        new SelectListItem { Value = "16", Text = "Physical Medicine and Rehibilitation" },
        //        new SelectListItem { Value = "17", Text = "Plastic Surgery" },
        //        new SelectListItem { Value = "18", Text = "Public Health and General Preventive" },
        //        new SelectListItem { Value = "19", Text = "Psychiatry" },

        //        new SelectListItem { Value = "20", Text = "Radiology" },
        //        new SelectListItem { Value = "21", Text = "Hospice and Palliative Medicine" },
        //        new SelectListItem { Value = "22", Text = "Medical Nuclear Physics" },
        //        new SelectListItem { Value = "23", Text = "Surgery" },
        //        new SelectListItem { Value = "24", Text = "Vascular Surgery" },

        //        new SelectListItem { Value = "25", Text = "Thoracic Surgery" },
        //        new SelectListItem { Value = "26", Text = "Urology" }
        //    };

        specialtyList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "Anesthesiology" },
                new SelectListItem { Value = "1", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "2", Text = "Dermatology" },
                new SelectListItem { Value = "3", Text = "Emergency Medicine" },
                new SelectListItem { Value = "4", Text = "Family Medicine" },

                new SelectListItem { Value = "5", Text = "Internal Medicine" },
                new SelectListItem { Value = "6", Text = "Medical Genetics" },
                new SelectListItem { Value = "7", Text = "Neurology" },
                new SelectListItem { Value = "8", Text = "Neurosurgery" },
                new SelectListItem { Value = "9", Text = "Nuclear Medicine" },

                new SelectListItem { Value = "10", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "11", Text = "Ophthalmology" },
                new SelectListItem { Value = "12", Text = "OrthopedicSurgery" },
                new SelectListItem { Value = "13", Text = "Otolaryngology" },
                new SelectListItem { Value = "14", Text = "Anatomic Pathology and Clinical Pathology" },

                new SelectListItem { Value = "15", Text = "Pediatrics" },
                new SelectListItem { Value = "16", Text = "Physical Medicine and Rehibilitation" },
                new SelectListItem { Value = "17", Text = "Plastic Surgery" },
                new SelectListItem { Value = "18", Text = "Public Health and General Preventive" },
                new SelectListItem { Value = "19", Text = "Psychiatry" },

                new SelectListItem { Value = "20", Text = "Radiology" },
                new SelectListItem { Value = "21", Text = "Hospice and Palliative Medicine" },
                new SelectListItem { Value = "22", Text = "Medical Nuclear Physics" },
                new SelectListItem { Value = "23", Text = "Surgery" },
                new SelectListItem { Value = "24", Text = "Vascular Surgery" },

                new SelectListItem { Value = "25", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "26", Text = "Urology" }
            };

    }

    private async Task SubmitSignUp()
    {
        hasError = false;
        hasPasswordError = false;
        //validate password
        if (inputModel.Password.All(Char.IsLetterOrDigit))
        {
            hasPasswordError = true;
            return;
        }

        var baseurl = NavigationManager.Uri;
        baseurl = baseurl.Remove(baseurl.Length - 10);

        // fill bMedicalSpecialty back to inputModel
        inputModel.UserName = inputModel.Email;
        inputModel.MedicalSpecialty = bMedicalSpecialty;

        // var result = await pService.RegisterUser(inputModel);
        // if (result != -1)
        // {
        //     // 0 already signed in (this is me)
        //     // 1 PendingApproval
        //     // 2 RegisterConfirmation
        //     if (result == 0)
        //     {
        //         PostHistory newHistory = new PostHistory();
        //         newHistory.ID = 0;
        //         newHistory.PostID = -1;
        //         newHistory.CreationDate = DateTime.Now;
        //         newHistory.PosterID = await pService.GetUserIdByEmail(inputModel.Email);
        //         newHistory.UserDisplayName = inputModel.FirstName + " " + inputModel.LastName;
        //         newHistory.Title = "Welcome to Hippra!";
        //         newHistory.Detail = "Account created on " + newHistory.CreationDate.ToShortDateString();
        //         newHistory.HistoryTypes = "joined Hippra";
        //         await hService.AddHistory(newHistory);
        //     }
        //     if (ShowTabs)
        //     {
        //         menuArray.ElementAt(currentTab).cssClass = "d-none";
        //         currentTab = currentTab + 1;
        //         menuArray.ElementAt(currentTab).cssClass = "";
        //     }
        //     else
        //     {
        //         menuArray.ElementAt(0).cssClass = "d-none";
        //         menuArray.ElementAt(1).cssClass = "d-none";
        //         menuArray.ElementAt(2).cssClass = "d-none";
        //         menuArray.ElementAt(3).cssClass = "d-none";
        //         menuArray.ElementAt(4).cssClass = "";
        //     }

        //     this.StateHasChanged();
        // }
        // else
        // {
        //     hasError = true;
        // }


    }

    private async Task tabClicked(int id)
    {
        //if (currentTab == 0 && (string.IsNullOrWhiteSpace(inputModel.Email)||string.IsNullOrWhiteSpace(inputModel.Password)||string.IsNullOrWhiteSpace(inputModel.ConfirmPassword)))
        //{
        //    return;
        //}
        //if (currentTab == 1 && (string.IsNullOrWhiteSpace(inputModel.CoolName)))
        //{
        //    return;
        //}
        //if (currentTab == 2 && (string.IsNullOrWhiteSpace(inputModel.School)||string.IsNullOrWhiteSpace(inputModel.Year)||string.IsNullOrWhiteSpace(inputModel.Profession)))
        //{
        //    return;
        //}
        //menuArray.ElementAt(currentTab).cssClass = "d-none";
        //currentTab = id;
        //menuArray.ElementAt(currentTab).cssClass = "";
        //this.StateHasChanged();

    }
    private async Task nextTab()
    {

        //if (currentTab == 0 && (string.IsNullOrWhiteSpace(inputModel.Email) || string.IsNullOrWhiteSpace(inputModel.Password) || string.IsNullOrWhiteSpace(inputModel.ConfirmPassword)))
        //{
        //    return;
        //}
        //if (currentTab == 1 && (string.IsNullOrWhiteSpace(inputModel.CoolName)))
        //{
        //    return;
        //}
        //if (currentTab == 2 && (string.IsNullOrWhiteSpace(inputModel.School) || string.IsNullOrWhiteSpace(inputModel.Year) || string.IsNullOrWhiteSpace(inputModel.Profession)))
        //{
        //    return;
        //}
        menuArray.ElementAt(currentTab).cssClass = "d-none";
        currentTab = currentTab + 1;
        menuArray.ElementAt(currentTab).cssClass = "";

        this.StateHasChanged();
    }
    private async Task prevTab()
    {
        menuArray.ElementAt(currentTab).cssClass = "d-none";
        currentTab = currentTab - 1;
        menuArray.ElementAt(currentTab).cssClass = "";
        this.StateHasChanged();
    }
    private async Task toggleSubmitCSS()
    {
        submitBtnCss = !submitBtnCss;
    }

}
