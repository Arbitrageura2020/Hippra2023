
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Models.FTDesign;
@using Hippra.Services;
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;
@using Hippra.Models.SQL;
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized Context="DeleteAccountContext">
        <div class="card">
            <div class="card-body">
                <br />
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-left">
                        <div class="alert alert-warning" role="alert">
                            <p>
                                <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
                            </p>
                        </div>
                    </div>
                </div>


                <br />
                <div class="d-block text-center">
                    <EditForm Model="@inputModel" OnValidSubmit="@SubmitDeleteAccount">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                <div class="mb-3 display-4 ">Delete Account</div>
                                <br />
                                <div class="mb-3">
                                    <label for="Password">Password</label>
                                    <InputText class="form-control" id="Password" type="password" required placeholder="Enter Password" @bind-Value="@inputModel.password" aria-label="Old Password" aria-describedby="Old Password" />
                                </div>
                                <br />
                                <hr />
                                <br />
                                <div class="mx-2">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-danger" type="submit">Delete data and close my account</button>

                                    </div>

                                    @if (hasError)
                                    {
                                        <div class="alert alert-danger">Something went wrong. Please try again.</div>
                                    }

                                    <br />
                                    <br />
                                </div>



                            </div>

                        </div>
                    </EditForm>

                </div>
                <br />
                <br />
            </div>
        </div>


    </Authorized>
    <NotAuthorized>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                        <br /><br />
                        <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                        <br /><br />
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>





@code {
    private FTDeleteAccountModel inputModel { get; set; } = new FTDeleteAccountModel();
    private bool hasError { get; set; } = false;
    private bool sentVerification { get; set; } = false;
    private int status { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var usr = await UserManager.GetUserAsync(user);
        }
    }

    private async Task SubmitDeleteAccount()
    {
        hasError = false;
        var baseurl = NavigationManager.Uri;
        baseurl = baseurl.Remove(baseurl.Length - 15);

        authState = await authenticationStateTask;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var usr = await UserManager.GetUserAsync(user);
            var result = await pService.DeleteAccount(usr, inputModel.password);
            if (result == -1)
            {
                hasError = true;
            }
            else
            {
                var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.FTHTTPRedirect", baseurl + "FTLogoff");
            }

        }
        //status = 0;

        //if (result != -1)
        //{

        //    //0 ok
        //    //1 unchanged

        //    if (result == 0)
        //    {
        //        status = 2;
        //    }
        //    if (result == 1)
        //    {
        //        status = 1;
        //    }

        //    this.StateHasChanged();
        //}
        //else
        //{
        //    hasError = true;
        //}


    }

}
