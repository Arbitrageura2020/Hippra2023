
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using System.Text.Encodings.Web;
@using Hippra.Models.FTDesign;
@using Hippra.Services;
@using Hippra.Models.SQL;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService;


<AuthorizeView>
    <Authorized Context="ChangePwdContext">
        <div class="card">
            <div class="card-body">
                <br />
                <br />
                <div class="d-block text-center">
                    <EditForm Model="@inputModel" OnValidSubmit="@SubmitChangePassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="offset-md-3 col-md-6 offset-md-3 text-left">

                                <div class="mb-3 display-4 ">Manage Password</div>
                                <br />
                                <div class="mb-3">
                                    <label for="currentPassword">Current Password</label>
                                    <InputText class="form-control" id="currentPassword" type="password" required @bind-Value="@inputModel.OldPassword" aria-label="Old Password" aria-describedby="Old Password" />
                                </div>
                                <div class="mb-3">
                                    <label for="newPassword">New Password</label>
                                    <InputText class="form-control" id="newPassword" type="password" required @bind-Value="@inputModel.NewPassword" aria-label="New Password" aria-describedby="New Password" />
                                </div>
                                <div class="mb-3">
                                    <label for="confirmNewPassword">Confirm New Password</label>
                                    <InputText class="form-control" id="confirmNewPassword" type="password" required @bind-Value="@inputModel.ConfirmPassword" aria-label="Confirm New Password" aria-describedby="Confirm New Password" />
                                </div>
                                <br />
                                <hr />
                                <br />
                                <div class="mx-2">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-outline-dark" type="submit">Update Password</button>

                                    </div>

                                    @if (hasError)
                                    {
                                        <div class="alert alert-danger">Something went wrong. Please try again.</div>
                                    }
                                    <br />

                                    @if (status == 1)
                                    {
                                        <div class="alert alert-info">Your Password Has Changed. Signed out. Please <a href="/Identity/Account/Login">Sign In</a> again.</div>
                                    }
                                    <br />
                                    <br />
                                </div>



                            </div>

                        </div>
                    </EditForm>

                </div>
                <br />
                <br />
            </div>
        </div>


    </Authorized>
    <NotAuthorized>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                        <br /><br />
                        <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                        <br /><br />
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>





@code {
    private FTPasswordModel inputModel { get; set; } = new FTPasswordModel();
    private bool hasError { get; set; } = false;
    private bool sentVerification { get; set; } = false;
    private int status { get; set; } = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {



    }

    private async Task SubmitChangePassword()
    {
        //if(inputModel.NewPassword != inputModel.ConfirmPassword)
        //{
        //    status = 2;
        //}

        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var usr = await UserManager.GetUserAsync(user);

            if (usr != null)
            {
                hasError = false;
                status = 0;
                var result = await pService.UpdatePassword(usr, inputModel.OldPassword, inputModel.NewPassword);
                if (result != -1)
                {


                    //1 ok

                    if (result == 1)
                    {
                        status = 1;
                        // sign out requires httpOnly not set. however, identity is set, so need user to logout manually
                        //var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.EraseCookie", ".AspNetCore.Identity.Application");

                        // redirect to relogin page
                        var baseurl = NavigationManager.Uri;
                        baseurl = baseurl.Remove(baseurl.Length - 16);
                        //NavigationManager.NavigateTo(baseurl + "FTRZRelogin");
                        //var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.FTHTTPRedirect", baseurl + "FTRZRelogin");
                        var test = await JSRuntime.InvokeAsync<string>("blazorExtensions.FTHTTPRedirect", baseurl + "FTLogoffRedirect");
                        

                    }

                    this.StateHasChanged();
                }
                else
                {
                    hasError = true;
                }
            }
            else
            {
                hasError = true;
                this.StateHasChanged();
                return;
            }

        }
        else
        {
            hasError = true;
            this.StateHasChanged();
            return;
        }


    }

}
