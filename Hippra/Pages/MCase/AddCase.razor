@page "/createcase"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using Hippra.Pages.MCase
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Hippra.Pages.FTDesign.Components2
@using System.Text.RegularExpressions

@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized Context="AddCaseContext">
        <FTSubHeaderBar Title="Back"
                        HasBackBtn="true" returnUrl="@returnUrl">
        </FTSubHeaderBar>

        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@pCase" OnValidSubmit="@CreateCase">
                        <div class="modal-body">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <p><small>Please fill in all the case requirements listed below and provide complete details like case summary, patient information, diagnosis/treatment considered, outcomes, etc. to aid the physicians in the Hippra network to give proper/adquate advice.</small></p>

                            </div>
                            <div class="form-group">
                                <InputText class="form-control" required placeholder="Topic" @bind-Value="@pCase.Topic" />
                            </div>
                            <div class="form-group">
                                <InputTextArea class="form-control" required placeholder="Description" @bind-Value="@pCase.Description" row="12" />
                            </div>


                            <hr />
                            <div class="form-group">

                                <InputRadioGroup Name="rate" @bind-Value="Priority">
                                    Priority
                                    <br>
                                    <InputRadio Name="rate" Value="CaseResponseLevelType.HIGH" />Stat
                                    <InputRadio Name="rate" Value="CaseResponseLevelType.MID" />Over Coffee
                                    @*<InputRadio Name="rate" Value="CaseResponseLevelType.LOW" />Low*@
                                </InputRadioGroup>


                                @*
                                    <div>Priority</div>
                                <label>
            <InputRadio name="rate" SelectedValue="0" @bind-Value="@priorityRadio.Priority" />
            High
        </label>
        <label>
            <InputRadio name="rate" SelectedValue="1" @bind-Value="@priorityRadio.Priority" />
            Medium
        </label>
        <label>
            <InputRadio name="rate" SelectedValue="2" @bind-Value="@priorityRadio.Priority" />
            Low
        </label>*@
                            </div>
                            <div class="form-group">
                                <div>Patient Age</div>
                                <InputNumber class="form-control" required placeholder="Age" @bind-Value="@pCase.PatientAge" />
                            </div>

                            @*add other fields*@
                            <div class=" mb-3">
                                <div class="row">
                                    <div class="col">
                                        <label for="Category">Category</label>
                                        @*<InputSelect id="Category" @bind-Value="@bCategory" onchange=@UpdateSubCategory>
                        @foreach (var g in CategoryList)
                            {
                            <option value="@g.Value">@g.Text</option>
                            }
                    </InputSelect>*@
                                        <select id="Category" @onchange=@UpdateSubCategory>
                                            <option value="0" selected>Diagnostics</option>
                                            <option value="1">Medicine</option>
                                            <option value="2">Surgery</option>
                                        </select>

                                    </div>
                                    <div class="col">
                                        <label for="SubCategory">Sub-Category</label>
                                        <InputSelect id="SubCategory" @bind-Value="@bSubCategory">
                                            @foreach (var h in SubCategoryList)
                                            {
                                                <option value="@h.Value">@h.Text</option>
                                            }



                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Gender">Gender</label>
                                <InputSelect id="Gender" @bind-Value="@bGender">
                                    @foreach (var i in GenderList)
                                    {
                                        <option value="@i.Value">@i.Text</option>
                                    }


                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Race">Race</label>
                                <InputSelect id="Race" @bind-Value="@bRace">
                                    @foreach (var j in RaceList)
                                    {
                                        <option value="@j.Value">@j.Text</option>
                                    }



                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Ethnicity">Ethnicity</label>
                                <InputSelect id="Ethnicity" @bind-Value="@bEthnicity">
                                    @foreach (var k in EthnicityList)
                                    {
                                        <option value="@k.Value">@k.Text</option>
                                    }


                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>


                                <div class="form-group">
                                    <InputTextArea class="form-control" placeholder="Lab Values" @bind-Value="@pCase.LabValues" row="12" />
                                </div>
                                <div class="form-group">
                                    <InputTextArea class="form-control" placeholder="Current Stage of Disease" @bind-Value="@pCase.CurrentStageOfDisease" row="12" />
                                </div>
                                <div class="form-group">
                                    <InputTextArea class="form-control" placeholder="Current Treatment Administered" @bind-Value="@pCase.CurrentTreatmentAdministered" row="12" />
                                </div>
                                <div class="form-group">
                                    <InputTextArea class="form-control" placeholder="Treatment Outcomes" @bind-Value="@pCase.TreatmentOutcomes" row="12" />
                                </div>
                                <div class="mb-4">
                                    <div class="mb-3">Image</div>
                                    @*<ImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl"></ImgUpload>*@

                                <TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl"></TestMultiImg>

                                </div>
                            </div>
                            <div class="form-group">
                                @if (tagList != null)
                                {
                                    <div>
                                        @foreach (var tag in tagList)
                                        {
                                            <div class="tag-item">
                                                @tag.Tag <button class="x" @onclick="(e => { deleteTag(tag); })">
                                                    x
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="form-group">
                                <div class="input-group">
                                    <InputText name="tagField" class="form-control" id="" placeholder="Add tag(s) to your post" @bind-Value="@newTag.Tag" aria-label="Tags" aria-describedby="Add tags" @onkeydown="@enterPressHandle" />
                                    <div class="input-group-append">
                                        <button id="comment-button" type="submit" class="btn btn-primary" @onclick="@addNewTag">Add</button>
                                    </div>
                                </div>
                            </div>
                            <div class="tag-error">
                                @TagFieldErrorMessage
                            </div>
                            <div class="mx-4 d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                <button id="create-button" type="submit" class="btn btn-primary" @onclick="Submitted">Create</button>
                            </div>

                        </EditForm>
                    </div>
                </div>

        </div>
  
    </Authorized>
    <NotAuthorized>
        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                            <br /><br />
                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                            <br /><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>



    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int caseId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private AppUser userInfo { get; set; } = new AppUser();

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private bool isOwner { get; set; } = false;
    private string returnUrl { get; set; } = "/";
    private Case InputModel { get; set; } = new Case();

    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
    }

    private ParsedCase pCase { get; set; } = new ParsedCase();
    public class ParsedCase : Case
    {
        public string Priority { get; set; } = "";
        public string ParsedCategory { get; set; } = "";
        public string ParsedSubCategory { get; set; } = "";
        public string ParsedGender { get; set; } = "";
        public string ParsedRace { get; set; } = "";
        public string ParsedEthnicity { get; set; } = "";
        public string ParsedStatus { get; set; } = "";


    }
    private List<SelectListItem> specialtyList { get; set; }

    //private List<SelectListItem> CategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> GenderList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> RaceList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> EthnicityList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
                new SelectListItem { Value = "-1", Text = "No Filters" }
                };

        private string bCategory { get; set; } = "0";
        private string bSubCategory { get; set; } = "0";
        private string bGender { get; set; } = "0";
        private string bRace { get; set; } = "6";
        private string bEthnicity { get; set; } = "3";
        private AppUser usr { get; set; }
        private string debug { get; set; } = "";

    private PriorityModel priorityRadio = new PriorityModel();
    public class PriorityModel
    {
        [Range(0, 2)]
        public int Priority { get; set; }
    }

    [EnumDataType(typeof(CaseResponseLevelType))]
    public CaseResponseLevelType Priority { get; set; } = CaseResponseLevelType.HIGH;

    private string fileName;
    private string imgUrl;
    private string tag = "";
        private const int MAXTAGS = 25;
        private bool isSubmitted = false;
        private CaseTags newTag = new CaseTags();
        public List<CaseTags> tagList = new List<CaseTags>();
        private bool isDeleteTag = false;
        private string TagFieldErrorMessage = "";
        private bool isTagOk = true;

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userInfo = await UserManager.GetUserAsync(user);
            await PopulateLists();

            //v2
            pCase.ID = await hService.CreateEmptyCase(userInfo.PublicId);
            fileName = "c" + pCase.ID;

        }
        else
        {
            // shouldn't get here
        }


        }
        private async Task enterPressHandle(KeyboardEventArgs e)
        {
            if (e.Key == "Enter")
            {
                isDeleteTag = false;
            }
        }
        private bool ContainsOnlyAlphaNumericCharacters(string inputString)
        {
            var regexItem = new Regex("^(?![0-9._])(?!.*[_]$)[a-zA-Z0-9_]+$");
            return regexItem.IsMatch(inputString);
        }
        private async Task addNewTag()
        {

            if (tagList.Count == MAXTAGS)
            {
                await displayErrorMessage("Warning: Too many tags, the limit is 25 tags");
            }

            else if (!string.IsNullOrWhiteSpace(newTag.Tag))
            {

                if (!ContainsOnlyAlphaNumericCharacters(newTag.Tag))
                {
                    await displayErrorMessage("Warning: A Tag should begin with a letter and can only contain letters, numbers, and underscores (_), no special characters");
                }
                else
                {
                    foreach(var item in tagList)
                    {
                        if(item.Tag == newTag.Tag)
                        {
                            string text = "Warning: Tag [" + newTag.Tag + "] already exist. Please add a different tag.";
                            isTagOk = false;
                            await displayErrorMessage(text);
                            break;
                        }
                        else
                        {
                            isTagOk = true;
                        }
                    }
                    if(tagList.Count ==0)
                    {
                        isTagOk = true;
                    }
                    if (isTagOk)
                    {
                        authState = await authenticationStateTask;
                        user = authState.User;

                        if (user.Identity.IsAuthenticated)
                        {
                            usr = await UserManager.GetUserAsync(user);
                            if (usr != null)
                            {
                                CaseTags tagItem = new CaseTags();
                                tagItem.ID = DateTime.Now;
                                tagItem.CaseID = pCase.ID;
                                tagItem.Tag = newTag.Tag;
                                tagList.Add(tagItem);
                            }
                        }
                        newTag.Tag = "";
                        isDeleteTag = true;
                        TagFieldErrorMessage = "";
                        this.StateHasChanged();
                    }
                }
            }
            else
            {
                await displayErrorMessage("Warning: you cannot add empty tag");
            }

        }

        private async Task Submitted()
        {
            isSubmitted = true;
        }
        private async Task Cancel()
        {
            NavigationManager.NavigateTo("/");
        }

        private async Task deleteTag(CaseTags Tag)
        {
            if (tagList.Contains(Tag) && isDeleteTag)
            {
                tagList.Remove(Tag);
                //await hService.DeleteTag(Tag);

            }
            else if (!isDeleteTag)
            {
                addNewTag();
            }
            isDeleteTag = true;

        }

        private async Task displayErrorMessage(string message)
        {
            TagFieldErrorMessage = message;
            this.StateHasChanged();
        }
        private async Task CreateCase()
        {
            if (isSubmitted)
            {
                var usr = await UserManager.GetUserAsync(user);

        Case validatedCase = new Case();

        validatedCase.DateCreated = DateTime.Now;
        validatedCase.DateLastUpdated = validatedCase.DateCreated;
        validatedCase.Description = pCase.Description;
        validatedCase.Topic = pCase.Topic;
        validatedCase.PosterID = usr.PublicId;
        validatedCase.PosterName = usr.FirstName + " " + usr.LastName;
        validatedCase.PosterSpecialty = ParseMedicalSpecialty((MedicalSpecialtyType)usr.MedicalSpecialty);
        validatedCase.Race = Int32.Parse(bRace);
        validatedCase.Gender = Int32.Parse(bGender);
        validatedCase.Ethnicity = Int32.Parse(bEthnicity);
        validatedCase.MedicalCategory = Int32.Parse(bSubCategory);
        @*validatedCase.ResponseNeeded = priorityRadio.Priority;// old*@
        validatedCase.ResponseNeeded = PriorityToInt(Priority);
        validatedCase.PatientAge = pCase.PatientAge;
        validatedCase.CurrentStageOfDisease = pCase.CurrentStageOfDisease;
        validatedCase.CurrentTreatmentAdministered = pCase.CurrentTreatmentAdministered;
        validatedCase.TreatmentOutcomes = pCase.TreatmentOutcomes;
        validatedCase.LabValues = pCase.LabValues;
        validatedCase.Status = true;
        validatedCase.imgUrl = imgUrl;
        foreach(var tag in tagList)
                {
                    await hService.AddTag(tag);
                }

        //v1
        //await hService.AddCase(validatedCase);
        //v2
        validatedCase.ID = pCase.ID;
        await hService.CreateCase(validatedCase);

                NavigationManager.NavigateTo("/");
            }

    }



    #region PopulateData
    // POPULATE MODELS

    private async Task PopulateModel(Case tCase)
    {
        pCase = new ParsedCase();
        pCase.ID = tCase.ID;

        // TODO: fill the rest
        pCase.DateCreated = tCase.DateCreated;
        pCase.DateLastUpdated = tCase.DateLastUpdated;
        pCase.Description = tCase.Description;
        pCase.Topic = tCase.Topic;
        pCase.PosterID = tCase.PosterID;
        pCase.PosterName = tCase.PosterName;
        pCase.Race = tCase.Race;
        pCase.Gender = tCase.Gender;
        pCase.Ethnicity = tCase.Ethnicity;
        pCase.ResponseNeeded = tCase.ResponseNeeded;
        pCase.MedicalCategory = tCase.MedicalCategory;
        pCase.PosterSpecialty = tCase.PosterSpecialty;

            pCase.PatientAge = tCase.PatientAge;
            pCase.CurrentStageOfDisease = tCase.CurrentStageOfDisease;
            pCase.CurrentTreatmentAdministered = tCase.CurrentTreatmentAdministered;
            pCase.TreatmentOutcomes = tCase.TreatmentOutcomes;
            pCase.Tags = tCase.Tags;
            pCase.LabValues = tCase.LabValues;
            pCase.ParsedCategory = ParseCategoryFromSub(tCase.MedicalCategory);
            pCase.ParsedSubCategory = ParseSubCategory(tCase.MedicalCategory);
            pCase.ParsedGender = ParseGender(tCase.Gender);
            pCase.ParsedEthnicity = ParseEthnicity(tCase.Ethnicity);
            pCase.Priority = ParsePriority(tCase.ResponseNeeded);
            pCase.ParsedRace = ParseRace(tCase.Race);
            pCase.Status = tCase.Status;
            pCase.ParsedStatus = ParseStatus(tCase.Status);

        priorityRadio = new PriorityModel();
        priorityRadio.Priority = tCase.ResponseNeeded;
        bCategory = ParseCategoryValueFromSub(tCase.MedicalCategory);
        bSubCategory = tCase.MedicalCategory.ToString();
        await SwitchSubCategory(bCategory);
        bGender = tCase.Gender.ToString();
        bEthnicity = tCase.Ethnicity.ToString();
        bRace = tCase.Race.ToString();

    }
    private async Task UpdateSubCategoryFilter(ChangeEventArgs e)
    {
        var selectedCategory = e.Value.ToString();
        filters.SubCategory = "-1";
        switch (selectedCategory)
        {
            case "0":
                SubCategoryFilterList = new List<SelectListItem> {
                    new SelectListItem { Value = "-1", Text = "No Filters" },
                new SelectListItem { Value = "0", Text = "Diseases & Disorders of the Nervous System" },
                new SelectListItem { Value = "1", Text = "Diseases & Disorders of the Eye" },
                new SelectListItem { Value = "2", Text = "Diseases & Disorders of the Ear, Nose, Mouth & Throat" },
                new SelectListItem { Value = "3", Text = "Diseases & Disorders of the Respiratory System" },
                new SelectListItem { Value = "4", Text = "Diseases & Disorders of the Circulatory System" },
                new SelectListItem { Value = "5", Text = "Diseases & Disorders of the Digestive System" },
                new SelectListItem { Value = "6", Text = "Diseases & Disorders of the Hepatobiliary System & Pancreas" },
                new SelectListItem { Value = "7", Text = "Diseases & Disorders of the Musculoskeletal System & Connective Tissue" },
                new SelectListItem { Value = "8", Text = "Diseases & Disorders of the Skin, Subcutaneous Tissue & Breast" },
                new SelectListItem { Value = "9", Text = "Endocrine, Nutritional & Metabolic Diseases & Disorders" },

                new SelectListItem { Value = "10", Text = "Diseases & Disorders of the Kidney & Urinary Tract" },
                new SelectListItem { Value = "11", Text = "Diseases & Disorders of the Male Reproductive System" },
                new SelectListItem { Value = "12", Text = "Diseases & Disorders of the Female Reproductive System" },
                new SelectListItem { Value = "13", Text = "Pregnancy, Childbirth & the Puerperium" },
                new SelectListItem { Value = "14", Text = "Newborns & Other Neonates with Conditions Originating in Perinatal Period" },
                new SelectListItem { Value = "15", Text = "Diseases & Disorders of the Blood, Blood Forming Organs, Immunologic Disorders" },
                new SelectListItem { Value = "16", Text = "Myeloproliferative Diseases & Disorders, Poorly Differentiated Neoplasms" },
                new SelectListItem { Value = "17", Text = "Infectious & Parasitic Diseases, Systemic or Unspecified Sites" },
                new SelectListItem { Value = "18", Text = "Mental Diseases & Disorders" },
                new SelectListItem { Value = "19", Text = "Alcohol/Drug Use & Alcohol/Drug Induced Organic Mental Disorders" },

                new SelectListItem { Value = "20", Text = "Injuries, Poisonings & Toxic Effects of Drugs" },
                new SelectListItem { Value = "21", Text = "Burns" },
                new SelectListItem { Value = "22", Text = "Factors Influencing Health Status & Other Contacts with Health Services" },
                new SelectListItem { Value = "23", Text = "Multiple Significant Trauma" },
                new SelectListItem { Value = "24", Text = "Human Immunodeficiency Virus Infections" },
                new SelectListItem { Value = "25", Text = "Others" },

        };
                break;
            case "1":
                SubCategoryFilterList = new List<SelectListItem> {

                    new SelectListItem { Value = "-1", Text = "No Filters" },
                new SelectListItem { Value = "26", Text = "Allegy and Immunology" },
                new SelectListItem { Value = "27", Text = "Anesthesiology" },
                new SelectListItem { Value = "28", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "29", Text = "Dermatology" },

                new SelectListItem { Value = "30", Text = "Emergency Medicine" },
                new SelectListItem { Value = "31", Text = "Family Medicine" },
                new SelectListItem { Value = "32", Text = "Internal Medicine" },
                new SelectListItem { Value = "33", Text = "Medical Genetics" },
                new SelectListItem { Value = "34", Text = "Neurology" },
                new SelectListItem { Value = "35", Text = "Neurosurgery" },
                new SelectListItem { Value = "36", Text = "Nuclear Medicine" },
                new SelectListItem { Value = "37", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "38", Text = "Ophthalmology" },
                new SelectListItem { Value = "39", Text = "OrthopedicSurgery" },

                new SelectListItem { Value = "40", Text = "Otolaryngology" },
                new SelectListItem { Value = "41", Text = "Anatomic Pathology and Clinical Pathology" },
                new SelectListItem { Value = "42", Text = "Pediatrics" },
                new SelectListItem { Value = "43", Text = "Physical Medicine and Rehibilitation" },
                new SelectListItem { Value = "44", Text = "Plastic Surgery" },
                new SelectListItem { Value = "45", Text = "Public Health and General Preventive" },
                new SelectListItem { Value = "46", Text = "Psychiatry" },
                new SelectListItem { Value = "47", Text = "Radiology" },
                new SelectListItem { Value = "48", Text = "Hospice and Palliative Medicine" },
                new SelectListItem { Value = "49", Text = "Medical Nuclear Physics" },

                new SelectListItem { Value = "50", Text = "Surgery" },
                new SelectListItem { Value = "51", Text = "Vascular Surgery" },
                new SelectListItem { Value = "52", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "53", Text = "Urology" },
                new SelectListItem { Value = "54", Text = "Others" },


        };
                break;
            case "2":
                SubCategoryFilterList = new List<SelectListItem> {

                    new SelectListItem { Value = "-1", Text = "No Filters" },
                new SelectListItem { Value = "55", Text = "General Surgery" },
                new SelectListItem { Value = "56", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "57", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "58", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "59", Text = "Gynecologic Oncology" },

                new SelectListItem { Value = "60", Text = "Neurological Surgery" },
                new SelectListItem { Value = "61", Text = "Ophthalmic Surgery" },
                new SelectListItem { Value = "62", Text = "Oral and Maxillofacial Surgery" },
                new SelectListItem { Value = "63", Text = "Orthopaedic Surgery" },
                new SelectListItem { Value = "64", Text = "Otolaryngology" },
                new SelectListItem { Value = "65", Text = "Pediatric Surgery" },
                new SelectListItem { Value = "66", Text = "Plastic and Maxillofacial Surgery" },
                new SelectListItem { Value = "67", Text = "Urology" },
                new SelectListItem { Value = "68", Text = "Vascular Surgery" },
                new SelectListItem { Value = "69", Text = "Others" }
                };
                break;
            default:

                SubCategoryFilterList = new List<SelectListItem> {
                    new SelectListItem { Value = "-1", Text = "No Filters" }
                };
                break;
        }
    }

    private async Task UpdateSubCategory(ChangeEventArgs e)
    {
        var selectedCategory = e.Value.ToString();

        await SwitchSubCategory(selectedCategory);
    }

    private async Task SwitchSubCategory(string selectedCategory)
    {
        switch (selectedCategory)
        {
            case "0":
                SubCategoryList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "Diseases & Disorders of the Nervous System" },
                new SelectListItem { Value = "1", Text = "Diseases & Disorders of the Eye" },
                new SelectListItem { Value = "2", Text = "Diseases & Disorders of the Ear, Nose, Mouth & Throat" },
                new SelectListItem { Value = "3", Text = "Diseases & Disorders of the Respiratory System" },
                new SelectListItem { Value = "4", Text = "Diseases & Disorders of the Circulatory System" },
                new SelectListItem { Value = "5", Text = "Diseases & Disorders of the Digestive System" },
                new SelectListItem { Value = "6", Text = "Diseases & Disorders of the Hepatobiliary System & Pancreas" },
                new SelectListItem { Value = "7", Text = "Diseases & Disorders of the Musculoskeletal System & Connective Tissue" },
                new SelectListItem { Value = "8", Text = "Diseases & Disorders of the Skin, Subcutaneous Tissue & Breast" },
                new SelectListItem { Value = "9", Text = "Endocrine, Nutritional & Metabolic Diseases & Disorders" },

                new SelectListItem { Value = "10", Text = "Diseases & Disorders of the Kidney & Urinary Tract" },
                new SelectListItem { Value = "11", Text = "Diseases & Disorders of the Male Reproductive System" },
                new SelectListItem { Value = "12", Text = "Diseases & Disorders of the Female Reproductive System" },
                new SelectListItem { Value = "13", Text = "Pregnancy, Childbirth & the Puerperium" },
                new SelectListItem { Value = "14", Text = "Newborns & Other Neonates with Conditions Originating in Perinatal Period" },
                new SelectListItem { Value = "15", Text = "Diseases & Disorders of the Blood, Blood Forming Organs, Immunologic Disorders" },
                new SelectListItem { Value = "16", Text = "Myeloproliferative Diseases & Disorders, Poorly Differentiated Neoplasms" },
                new SelectListItem { Value = "17", Text = "Infectious & Parasitic Diseases, Systemic or Unspecified Sites" },
                new SelectListItem { Value = "18", Text = "Mental Diseases & Disorders" },
                new SelectListItem { Value = "19", Text = "Alcohol/Drug Use & Alcohol/Drug Induced Organic Mental Disorders" },

                new SelectListItem { Value = "20", Text = "Injuries, Poisonings & Toxic Effects of Drugs" },
                new SelectListItem { Value = "21", Text = "Burns" },
                new SelectListItem { Value = "22", Text = "Factors Influencing Health Status & Other Contacts with Health Services" },
                new SelectListItem { Value = "23", Text = "Multiple Significant Trauma" },
                new SelectListItem { Value = "24", Text = "Human Immunodeficiency Virus Infections" },
                new SelectListItem { Value = "25", Text = "Others" },

        };
                break;
            case "1":
                SubCategoryList = new List<SelectListItem> {


                new SelectListItem { Value = "26", Text = "Allegy and Immunology" },
                new SelectListItem { Value = "27", Text = "Anesthesiology" },
                new SelectListItem { Value = "28", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "29", Text = "Dermatology" },

                new SelectListItem { Value = "30", Text = "Emergency Medicine" },
                new SelectListItem { Value = "31", Text = "Family Medicine" },
                new SelectListItem { Value = "32", Text = "Internal Medicine" },
                new SelectListItem { Value = "33", Text = "Medical Genetics" },
                new SelectListItem { Value = "34", Text = "Neurology" },
                new SelectListItem { Value = "35", Text = "Neurosurgery" },
                new SelectListItem { Value = "36", Text = "Nuclear Medicine" },
                new SelectListItem { Value = "37", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "38", Text = "Ophthalmology" },
                new SelectListItem { Value = "39", Text = "OrthopedicSurgery" },

                new SelectListItem { Value = "40", Text = "Otolaryngology" },
                new SelectListItem { Value = "41", Text = "Anatomic Pathology and Clinical Pathology" },
                new SelectListItem { Value = "42", Text = "Pediatrics" },
                new SelectListItem { Value = "43", Text = "Physical Medicine and Rehibilitation" },
                new SelectListItem { Value = "44", Text = "Plastic Surgery" },
                new SelectListItem { Value = "45", Text = "Public Health and General Preventive" },
                new SelectListItem { Value = "46", Text = "Psychiatry" },
                new SelectListItem { Value = "47", Text = "Radiology" },
                new SelectListItem { Value = "48", Text = "Hospice and Palliative Medicine" },
                new SelectListItem { Value = "49", Text = "Medical Nuclear Physics" },

                new SelectListItem { Value = "50", Text = "Surgery" },
                new SelectListItem { Value = "51", Text = "Vascular Surgery" },
                new SelectListItem { Value = "52", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "53", Text = "Urology" },
                new SelectListItem { Value = "54", Text = "Others" },


        };
                break;
            default:
                SubCategoryList = new List<SelectListItem> {


                new SelectListItem { Value = "55", Text = "General Surgery" },
                new SelectListItem { Value = "56", Text = "Thoracic Surgery" },
                new SelectListItem { Value = "57", Text = "Colon and Rectal Surgery" },
                new SelectListItem { Value = "58", Text = "Obstetrics and Gynecology" },
                new SelectListItem { Value = "59", Text = "Gynecologic Oncology" },

                new SelectListItem { Value = "60", Text = "Neurological Surgery" },
                new SelectListItem { Value = "61", Text = "Ophthalmic Surgery" },
                new SelectListItem { Value = "62", Text = "Oral and Maxillofacial Surgery" },
                new SelectListItem { Value = "63", Text = "Orthopaedic Surgery" },
                new SelectListItem { Value = "64", Text = "Otolaryngology" },
                new SelectListItem { Value = "65", Text = "Pediatric Surgery" },
                new SelectListItem { Value = "66", Text = "Plastic and Maxillofacial Surgery" },
                new SelectListItem { Value = "67", Text = "Urology" },
                new SelectListItem { Value = "68", Text = "Vascular Surgery" },
                new SelectListItem { Value = "69", Text = "Others" }
        };
                break;
        }
    }

    private async Task PopulateLists()
    {
        //SubCategoryList = new List<SelectListItem> {
        //        new SelectListItem { Value = "0", Text = "Diseases & Disorders of the Nervous System" },
        //        new SelectListItem { Value = "1", Text = "Diseases & Disorders of the Eye" },
        //        new SelectListItem { Value = "2", Text = "Diseases & Disorders of the Ear, Nose, Mouth & Throat" },
        //        new SelectListItem { Value = "3", Text = "Diseases & Disorders of the Respiratory System" },
        //        new SelectListItem { Value = "4", Text = "Diseases & Disorders of the Circulatory System" },
        //        new SelectListItem { Value = "5", Text = "Diseases & Disorders of the Digestive System" },
        //        new SelectListItem { Value = "6", Text = "Diseases & Disorders of the Hepatobiliary System & Pancreas" },
        //        new SelectListItem { Value = "7", Text = "Diseases & Disorders of the Musculoskeletal System & Connective Tissue" },
        //        new SelectListItem { Value = "8", Text = "Diseases & Disorders of the Skin, Subcutaneous Tissue & Breast" },
        //        new SelectListItem { Value = "9", Text = "Endocrine, Nutritional & Metabolic Diseases & Disorders" },

        //        new SelectListItem { Value = "10", Text = "Diseases & Disorders of the Kidney & Urinary Tract" },
        //        new SelectListItem { Value = "11", Text = "Diseases & Disorders of the Male Reproductive System" },
        //        new SelectListItem { Value = "12", Text = "Diseases & Disorders of the Female Reproductive System" },
        //        new SelectListItem { Value = "13", Text = "Pregnancy, Childbirth & the Puerperium" },
        //        new SelectListItem { Value = "14", Text = "Newborns & Other Neonates with Conditions Originating in Perinatal Period" },
        //        new SelectListItem { Value = "15", Text = "Diseases & Disorders of the Blood, Blood Forming Organs, Immunologic Disorders" },
        //        new SelectListItem { Value = "16", Text = "Myeloproliferative Diseases & Disorders, Poorly Differentiated Neoplasms" },
        //        new SelectListItem { Value = "17", Text = "Infectious & Parasitic Diseases, Systemic or Unspecified Sites" },
        //        new SelectListItem { Value = "18", Text = "Mental Diseases & Disorders" },
        //        new SelectListItem { Value = "19", Text = "Alcohol/Drug Use & Alcohol/Drug Induced Organic Mental Disorders" },

        //        new SelectListItem { Value = "20", Text = "Injuries, Poisonings & Toxic Effects of Drugs" },
        //        new SelectListItem { Value = "21", Text = "Burns" },
        //        new SelectListItem { Value = "22", Text = "Factors Influencing Health Status & Other Contacts with Health Services" },
        //        new SelectListItem { Value = "23", Text = "Multiple Significant Trauma" },
        //        new SelectListItem { Value = "24", Text = "Human Immunodeficiency Virus Infections" },
        //        new SelectListItem { Value = "25", Text = "Other" },

        //};

        await SwitchSubCategory(ParseCategoryValueFromSub(pCase.MedicalCategory));
        GenderList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "Male" },
                new SelectListItem { Value = "1", Text = "Female" },
                new SelectListItem { Value = "2", Text = "Neutral" }

        };

        RaceList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "American Indian or Alaska Native" },
                new SelectListItem { Value = "1", Text = "Asian" },
                new SelectListItem { Value = "2", Text = "Black or African American" },
                new SelectListItem { Value = "3", Text = "Native Hawaiian or Other Pacific Islander" },
                new SelectListItem { Value = "4", Text = "White" },

                new SelectListItem { Value = "5", Text = "Declined" },
                new SelectListItem { Value = "6", Text = "Unknown" },
                new SelectListItem { Value = "7", Text = "Other Race" }

            };

        EthnicityList = new List<SelectListItem> {
                new SelectListItem { Value = "0", Text = "Hispanic or Latino" },
                new SelectListItem { Value = "1", Text = "Not Hispanic or Latino" },
                new SelectListItem { Value = "2", Text = "Declined" },
                new SelectListItem { Value = "3", Text = "Unknown" }

            };
    }
    #endregion

    // PARSE CODE
    #region ParseCode
    private string ParseMedicalSpecialty(MedicalSpecialtyType MedicalSpecialty)
    {

        string medicalSpecialty = "";
        switch (MedicalSpecialty)
        {
            case MedicalSpecialtyType.Anesthesiology:
                medicalSpecialty = "Anesthesiology";
                break;
            case MedicalSpecialtyType.AnatomicPathologyAndClinicalPathology:
                medicalSpecialty = "Anatomic Pathology And Clinical Pathology";
                break;
            case MedicalSpecialtyType.ColonAndRectalSurgery:
                medicalSpecialty = "Colon And Rectal Surgery";
                break;
            case MedicalSpecialtyType.Dermatology:
                medicalSpecialty = "Dermatology";
                break;
            case MedicalSpecialtyType.EmergencyMedicine:
                medicalSpecialty = "Emergency Medicine";
                break;
            case MedicalSpecialtyType.FamilyMedicine:
                medicalSpecialty = "Family Medicine";
                break;
            case MedicalSpecialtyType.HospiceAndPalliativeMedicine:
                medicalSpecialty = "Hospice And Palliative Medicine";
                break;
            case MedicalSpecialtyType.InternalMedicine:
                medicalSpecialty = "Internal Medicine";
                break;
            case MedicalSpecialtyType.MedicalGenetics:
                medicalSpecialty = "Medical Genetics";
                break;
            case MedicalSpecialtyType.MedicalNuclearPhysics:
                medicalSpecialty = "Medical Nuclear Physics";
                break;
            case MedicalSpecialtyType.Neurology:
                medicalSpecialty = "Neurology";
                break;
            case MedicalSpecialtyType.Neurosurgery:
                medicalSpecialty = "Neurosurgery";
                break;
            case MedicalSpecialtyType.NuclearMedicine:
                medicalSpecialty = "NuclearMedicine";
                break;
            case MedicalSpecialtyType.ObstetricsAndGynecology:
                medicalSpecialty = "Obstetrics And Gynecology";
                break;
            case MedicalSpecialtyType.Ophthalmology:
                medicalSpecialty = "Ophthalmology";
                break;
            case MedicalSpecialtyType.OrthopedicSurgery:
                medicalSpecialty = "Orthopedic Surgery";
                break;
            case MedicalSpecialtyType.Otolaryngology:
                medicalSpecialty = "Otolaryngology";
                break;
            case MedicalSpecialtyType.Pediatrics:
                medicalSpecialty = "Pediatrics";
                break;
            case MedicalSpecialtyType.PhysicalMedicineAndRehibilitation:
                medicalSpecialty = "Physical Medicine And Rehibilitation";
                break;
            case MedicalSpecialtyType.PlasticSurgery:
                medicalSpecialty = "Plastic Surgery";
                break;
            case MedicalSpecialtyType.Psychiatry:
                medicalSpecialty = "Psychiatry";
                break;
            case MedicalSpecialtyType.PublicHealthAndGeneralPreventive:
                medicalSpecialty = "Public Health And General Preventive";
                break;
            case MedicalSpecialtyType.Radiology:
                medicalSpecialty = "Radiology";
                break;
            case MedicalSpecialtyType.Surgery:
                medicalSpecialty = "Surgery";
                break;
            case MedicalSpecialtyType.ThoracicSurgery:
                medicalSpecialty = "Thoracic Surgery";
                break;
            case MedicalSpecialtyType.Urology:
                medicalSpecialty = "Urology";
                break;
            case MedicalSpecialtyType.VascularSurgery:
                medicalSpecialty = "Vascular Surgery";
                break;
            default:
                break;
        }
        return medicalSpecialty;
    }
    private string ParseCategory(int category)
    {
        string rValue = "";
        switch (category)
        {
            case 1:
                rValue = "Medicine";
                break;
            case 2:
                rValue = "Surgery";
                break;
            default:
                rValue = "Diagnostics";
                break;
        }
        return rValue;
    }
    private string ParseCategoryFromSub(int subCategory)
    {
        string rValue = "";


        if (subCategory < 26)
        {
            rValue = "Diagnostics";
        }
        else if (subCategory < 55)
        {
            rValue = "Medicine";
        }
        else
        {
            rValue = "Surgery";
        }
        return rValue;
    }
    private string ParseCategoryValueFromSub(int subCategory)
    {
        string rValue = "";


        if (subCategory < 26)
        {
            rValue = "0";
        }
        else if (subCategory < 55)
        {
            rValue = "1";
        }
        else
        {
            rValue = "2";
        }
        return rValue;
    }
    private string ParseSubCategory(int subCategory)
    {

        string rValue = "";
        switch (subCategory)
        {
            case 0:
                rValue = "Diseases & Disorders of the Nervous System";
                break;
            case 1:
                rValue = "Diseases & Disorders of the Eye";
                break;
            case 2:
                rValue = "Diseases & Disorders of the Ear, Nose, Mouth & Throat";
                break;
            case 3:
                rValue = "Diseases & Disorders of the Respiratory System";
                break;
            case 4:
                rValue = "Diseases & Disorders of the Circulatory System";
                break;
            case 5:
                rValue = "Diseases & Disorders of the Digestive System";
                break;
            case 6:
                rValue = "Diseases & Disorders of the Hepatobiliary System & Pancreas";
                break;
            case 7:
                rValue = "Diseases & Disorders of the Musculoskeletal System & Connective Tissue";
                break;
            case 8:
                rValue = "Diseases & Disorders of the Skin, Subcutaneous Tissue & Breast";
                break;
            case 9:
                rValue = "Endocrine, Nutritional & Metabolic Diseases & Disorders";
                break;

            case 10:
                rValue = "Diseases & Disorders of the Kidney & Urinary Tract";
                break;
            case 11:
                rValue = "Diseases & Disorders of the Male Reproductive System";
                break;
            case 12:
                rValue = "Diseases & Disorders of the Female Reproductive System";
                break;
            case 13:
                rValue = "Pregnancy, Childbirth & the Puerperium";
                break;
            case 14:
                rValue = "Newborns & Other Neonates with Conditions Originating in Perinatal Period";
                break;
            case 15:
                rValue = "Diseases & Disorders of the Blood, Blood Forming Organs, Immunologic Disorders";
                break;
            case 16:
                rValue = "Myeloproliferative Diseases & Disorders, Poorly Differentiated Neoplasms";
                break;
            case 17:
                rValue = "Infectious & Parasitic Diseases, Systemic or Unspecified Sites";
                break;
            case 18:
                rValue = "Mental Diseases & Disorders";
                break;
            case 19:
                rValue = "Alcohol/Drug Use & Alcohol/Drug Induced Organic Mental Disorders";
                break;

            case 20:
                rValue = "Injuries, Poisonings & Toxic Effects of Drugs";
                break;
            case 21:
                rValue = "Burns";
                break;
            case 22:
                rValue = "Factors Influencing Health Status & Other Contacts with Health Services";
                break;
            case 23:
                rValue = "Multiple Significant Trauma";
                break;
            case 24:
                rValue = "Human Immunodeficiency Virus Infections";
                break;
            case 25:
                rValue = "Others";
                break;
            case 26:
                rValue = "Allegy and Immunology";
                break;
            case 27:
                rValue = "Anesthesiology";
                break;
            case 28:
                rValue = "Colon and Rectal Surgery";
                break;
            case 29:
                rValue = "Dermatology";
                break;

            case 30:
                rValue = "Emergency Medicine";
                break;
            case 31:
                rValue = "Family Medicine";
                break;
            case 32:
                rValue = "Internal Medicine";
                break;
            case 33:
                rValue = "Medical Genetics";
                break;
            case 34:
                rValue = "Neurology";
                break;
            case 35:
                rValue = "Neurosurgery";
                break;
            case 36:
                rValue = "Nuclear Medicine";
                break;
            case 37:
                rValue = "Obstetrics and Gynecology";
                break;
            case 38:
                rValue = "Ophthalmology";
                break;
            case 39:
                rValue = "OrthopedicSurgery";
                break;

            case 40:
                rValue = "Otolaryngology";
                break;
            case 41:
                rValue = "Anatomic Pathology and Clinical Pathology";
                break;
            case 42:
                rValue = "Pediatrics";
                break;
            case 43:
                rValue = "Physical Medicine and Rehibilitation";
                break;
            case 44:
                rValue = "Plastic Surgery";
                break;
            case 45:
                rValue = "Public Health and General Preventive";
                break;
            case 46:
                rValue = "Psychiatry";
                break;
            case 47:
                rValue = "Radiology";
                break;
            case 48:
                rValue = "Hospice and Palliative Medicine";
                break;
            case 49:
                rValue = "Medical Nuclear Physics";
                break;

            case 50:
                rValue = "Surgery";
                break;
            case 51:
                rValue = "Vascular Surgery";
                break;
            case 52:
                rValue = "Thoracic Surgery";
                break;
            case 53:
                rValue = "Urology";
                break;
            case 54:
                rValue = "Others";
                break;
            case 55:
                rValue = "General Surgery";
                break;
            case 56:
                rValue = "Thoracic Surgery";
                break;
            case 57:
                rValue = "Colon and Rectal Surgery";
                break;
            case 58:
                rValue = "Obstetrics and Gynecology";
                break;
            case 59:
                rValue = "Gynecologic Oncology";
                break;

            case 60:
                rValue = "Neurological Surgery";
                break;
            case 61:
                rValue = "Ophthalmic Surgery";
                break;
            case 62:
                rValue = "Oral and Maxillofacial Surgery";
                break;
            case 63:
                rValue = "Orthopaedic Surgery";
                break;
            case 64:
                rValue = "Otolaryngology";
                break;
            case 65:
                rValue = "Pediatric Surgery";
                break;
            case 66:
                rValue = "Plastic and Maxillofacial Surgery";
                break;
            case 67:
                rValue = "Urology";
                break;
            case 68:
                rValue = "Vascular Surgery";
                break;
            case 69:
                rValue = "Others";
                break;

            default:
                // shouldn't get here
                rValue = "";
                break;
        }


        return rValue;
    }
    private string ParseRace(int race)
    {
        string rValue = "";
        switch (race)
        {
            case 1:
                rValue = "Asian";
                break;
            case 2:
                rValue = "Black or African American";
                break;
            case 3:
                rValue = "Native Hawaiian or Other Pacific Islander";
                break;
            case 4:
                rValue = "White";
                break;
            case 5:
                rValue = "Declined";
                break;
            case 6:
                rValue = "Unknown";
                break;
            case 7:
                rValue = "Other Race";
                break;
            default:
                rValue = "American Indian or Alaska Native";
                break;
        }


        return rValue;
    }
    private string ParseEthnicity(int ethnicity)
    {
        string rValue = "";
        switch (ethnicity)
        {
            case 1:
                rValue = "Not Hispanic or Latino";
                break;
            case 2:
                rValue = "Declined";
                break;
            case 3:
                rValue = "Unknown";
                break;
            default:
                rValue = "Hispanic or Latino";
                break;
        }


        return rValue;
    }
    private string ParseGender(int gender)
    {
        string rValue = "";
        switch (gender)
        {
            case 1:
                rValue = "Female";
                break;
            case 2:
                rValue = "Neutral";
                break;
            default:
                rValue = "Male";
                break;
        }


            return rValue;
        }
        private string ParsePriority(int priority)
        {
            string rValue = "";
            switch (priority)
            {
                case 1:
                    rValue = "Over Coffee";
                    break;
                /*case 2:
                    rValue = "Low";
                    break;*/
                default:
                    rValue = "Stat";
                    break;
            }


        return rValue;
    }
    private int PriorityToInt(CaseResponseLevelType priority)
    {
        int rValue = 0;
        switch (priority)
        {
            case CaseResponseLevelType.MID:
                rValue = 1;
                break;
            case CaseResponseLevelType.LOW:
                rValue = 2;
                break;
            default:
                rValue = 0;
                break;
        }
        return rValue;
    }
    private string ParseStatus(bool tStatus)
    {
        if (tStatus)
        {
            return "Open";
        }
        else
        {
            return "Closed";
        }
    }
    #endregion

}
