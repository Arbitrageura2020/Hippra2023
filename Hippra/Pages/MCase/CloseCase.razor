@page "/closecase/{caseId:int}"
@using System.Text
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc.Rendering;

@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Pages.FTDesign

@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized Context="CloseCaseContext">
        <FTSubHeaderBar Title="Back"
                        HasBackBtn="true" returnUrl="@returnUrl">
        </FTSubHeaderBar>

        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">

                    @if (isOwner)
                    {

                        @if (InputModel.Status)
                        {
                            <button type="button" class="btn btn-block btn-primary" data-dismiss="modal" @onclick="@Close">Close Case</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-block btn-primary" data-dismiss="modal" @onclick="@Close">Reopen Case</button>
                        }

                    }
                    else
                    {
                        <div class="alert alert-danger">Not Owner Of this Case</div>
                    }

                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                            <br /><br />
                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                            <br /><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int caseId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    @*private AppUser userInfo { get; set; } = new AppUser();*@

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private bool isOwner { get; set; } = false;
    private string returnUrl { get; set; } = "/viewcase/";
    private Case InputModel { get; set; } = new Case();

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*userInfo = await UserManager.GetUserAsync(user);*@
            int userId = -1;
            try
            {
              
                userId = Int32.Parse( user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value );
           
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }
            InputModel = await hService.GetCaseNoTracking(caseId);

            if (InputModel != null && InputModel.PosterID == userId)
            {
                isOwner = true;
            }
            returnUrl = returnUrl + caseId;
        }
        else
        {
            // shouldn't get here
        }


    }
    private async Task Close()
    {
        //await hService.DeleteCase(caseId);
        //NavigationManager.NavigateTo("/");
        //StateHasChanged();


        await hService.CloseCase(caseId);
        NavigationManager.NavigateTo("/");
        this.StateHasChanged();
    }

}
