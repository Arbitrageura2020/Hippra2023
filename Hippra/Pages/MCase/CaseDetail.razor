@page "/viewcase1/{caseId:int}"
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using Hippra.Pages.MCase
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Hippra.Pages.Common 
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager  NavigationManager
@inject ProfileService pService
@inject HippraService hService 
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized Context="DetailCaseContext">
        <FTSubHeaderBar Title="Back"
                        HasBackBtn="true" returnUrl="@returnUrl">
        </FTSubHeaderBar>

        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="">


                        <div class="row">
                            <div class="col">
                                <div class="lead">Case Summary</div>
                            </div>
                            <div class="col text-right">
                                @if (pCase.PosterID == userId)
                                {
                                    <button type="button" class="btn btn-secondary" @onclick="@EditMode">Edit Case</button>
                                }
                            </div>
                        </div>
                        <div class="py-5 row justify-content-center">
                            <div class="col-md-2">

                            </div>
                            <div class="col-md-8">

                                <h4 class="" id="vmTitle">@pCase.Topic</h4>
                                <div class="" id="vmCategory"><small>@pCase.ParsedCategory · <span class="text-black-50">@pCase.ParsedSubCategory</span></small></div>

                                <hr />
                                <div class=""> Description: @((MarkupString) @pCase.Description)</div>
                            </div>
                            <div class="col-md-2">

                            </div>
                        </div>
                        <hr />
                        <div class="lead">Patient Information</div>
                        <div class="py-5 row justify-content-center">
                            <div class="col-md-2">

                            </div>
                            <div class="col-md-8" id="vmContent">
                                <div class="">Age: @pCase.PatientAge</div>
                                <div class="">Gender: @pCase.ParsedGender</div>
                                <div class="">Race: @pCase.ParsedRace</div>
                                <div class="">Ethnicity: @pCase.ParsedEthnicity</div>
                                <br />
                                <div class="">Lab Values: @pCase.LabValues</div>
                                <div class="">Current Stage of Disease: @pCase.CurrentStageOfDisease</div>
                                <div class="">Current Treatment Administered: @pCase.CurrentTreatmentAdministered </div>
                                <div class="">Treatment Outcomes: @pCase.TreatmentOutcomes</div>
                            </div>
                            <div class="col-md-2">

                            </div>
                        </div>
                        <div class="lead">Case Information</div>
                        <div class="py-5 row justify-content-center">
                            <div class="col-md-2">

                            </div>
                            <div class="col-md-8">
                                <div class=""><strong>Created By:</strong> <a href="/PersonalPage/@pCase.PosterID"> @pCase.PosterName <span class="text-black-50"> (@pCase.PosterSpecialty) </span></a></div>
                                <div><strong>Case Status:</strong> @pCase.ParsedStatus</div>
                                <div><strong>Priority:</strong> @pCase.Priority</div>
                                <div><strong>Date Created:</strong> @pCase.DateCreated.ToShortDateString() </div>
                                <div><strong>Last Updated:</strong> @pCase.DateLastUpdated.ToShortDateString()</div>
                            </div>
                            <div class="col-md-2">

                            </div>
                        </div>
                        <div class="lead">Tags</div>
                        <div class="py-5 row ">
                            <div class="col-md-2">
                               
                            </div>
                            
                            <div class="col-md-8">
                                @if (pCase.Tags != null)
                                {
                                    foreach (var tag in pCase.Tags)
                                    {
                                        <div class="around-tag-button">
                                            <button class="tag-button" @onclick="(e => { searchCasesContainTag(tag.Tag); })">
                                                @tag.Tag
                                            </button>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                            @if (!string.IsNullOrWhiteSpace(@pCase.imgUrl))
                            {
                                <div class="lead">Images</div>
                                @foreach (string url in imgUrls)
                                {
                                    <div class="py-5 row justify-content-center">
                                        <div class="col-md-2">

                                    </div>
                                    <div class="col-md-8">
                                        <label class="label-img">
                                            <input type="checkbox">
                                            <img id="caseImg" src="@url" width="10%" height="auto" />
                                        </label>
                                    </div>
                                    <div class="col-md-2">

                                    </div>
                                </div>
                            }
                        }


                        <div class="pb-5 row justify-content-center">
                            <div class="col-md-8" id="vmf">
                                @if(dataReady){
                                    <Comments postId="@pCase.ID" CommentList="@pCase.Comments" isOpened="true" />
                                }
                                
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                            <br /><br />
                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                            <br /><br />
                        </div>
                    </div>
                </div>
            </div>

        </div>


    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int caseId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    @*private AppUser userInfo { get; set; } = new AppUser();*@

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private bool isOwner { get; set; } = false;
    private string returnUrl { get; set; } = "/";
    private Case InputModel { get; set; } = new Case();

    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
    }

    private ParsedCase pCase { get; set; } = new ParsedCase();

    private List<SelectListItem> specialtyList { get; set; }

    //private List<SelectListItem> CategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> GenderList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> RaceList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> EthnicityList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
                new SelectListItem { Value = "-1", Text = "No Filters" }
                };

    private string bCategory { get; set; } = "0";
    private string bSubCategory { get; set; } = "0";
    private string bGender { get; set; } = "0";
    private string bRace { get; set; } = "6";
    private string bEthnicity { get; set; } = "3";

    private string debug { get; set; } = "";

    private PriorityModel priorityRadio = new PriorityModel();
    public class PriorityModel
    {
        [Range(0, 2)]
        public CaseResponseLevelType Priority { get; set; }
    }

    private string[] imgUrls;

    private bool dataReady = false;
    private int userId = -1;

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*userInfo = await UserManager.GetUserAsync(user);*@
            try
            {

                userId = Int32.Parse( user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value );

            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }

           
            returnUrl = returnUrl;

            var tCase = await hService.GetCaseNoTracking(caseId);
            if (tCase == null)
            {
                // didn't find it, should flag for error
                return;
            }
            await PopulateModel(tCase);
            pCase.Comments = await hService.GetCommentsNoTracking(caseId);
            pCase.Tags = await hService.GetTagsNoTracking(pCase.ID);
            pCase.imgUrl = tCase.imgUrl;
            //deserialize
            if (!string.IsNullOrWhiteSpace(@pCase.imgUrl))
            {
                imgUrls = @pCase.imgUrl.Split(' ');
            }
        }
        else
        {
            // shouldn't get here
        }
        dataReady = true;
        StateHasChanged();

    }

    private async Task viewPage(int id)
    {
        NavigationManager.NavigateTo("/PersonalPage/" + id);
    }

    private async Task EditMode()
    {
        NavigationManager.NavigateTo("/editcase/"+ caseId);
    }




    private async Task PopulateModel(Case tCase)
    {
        pCase = tCase.ToParsedCase();
        pCase.ID = tCase.ID;


        priorityRadio = new PriorityModel();
        priorityRadio.Priority = tCase.ResponseNeeded;
      //  bCategory = ParseCategoryValueFromSub(tCase.MedicalCategory);
     //   bSubCategory = tCase.MedicalCategory.ToString();
    //    await SwitchSubCategory(bCategory);
        bGender = tCase.Gender.ToString();
        bEthnicity = tCase.Ethnicity.ToString();
        bRace = tCase.Race.ToString();

    }
    private async Task searchCasesContainTag(string tag)
    {
        NavigationManager.NavigateTo("/tagsearch/" + caseId + "/" +tag);
    }

}
