@page "/editcase/{caseId:int}"
@using System.ComponentModel.DataAnnotations
@using Hippra.Models.DTO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Hippra.Models.FTDesign
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.Enums
@using Hippra.Extensions
@using Hippra.Pages.Common
@using Hippra.Pages.FTDesign.Features
@using Hippra.Pages.FTDesign
@using Hippra.Pages.Home
@using Hippra.Pages.MCase
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Hippra.Pages.FTDesign.Components2
@using System.Text.RegularExpressions
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JSRuntime
@*@inject SignInManager<AppUser> SignInManager
		@inject UserManager<AppUser> UserManager*@
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject ProfileService pService
@inject HippraService hService
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized Context="EditCaseContext">
        <FTSubHeaderBar Title="Back"
                        HasBackBtn="true" returnUrl="@returnUrl">
        </FTSubHeaderBar>
        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@pCase" OnValidSubmit="@UpdateCase">
                        <div class="">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div>
                                <p><small>Please fill in all the case requirements listed below and provide complete details like case summary, patient information, diagnosis/treatment considered, outcomes, etc. to aid the physicians in the Hippra network to give proper/adquate advice.</small></p>

                            </div>
                            <div class="form-group">
                                <InputText class="form-control" required placeholder="Topic" @bind-Value="@pCase.Topic" />
                            </div>
                            <div class="form-group">
                                <InputTextArea class="form-control" required placeholder="Description" @bind-Value="@pCase.Description" row="12" />
                            </div>


                            <hr />
                            <div class="form-group">
                                <InputRadioGroup Name="rate" @bind-Value="Priority">
                                    Priority
                                    <br>
                                    <InputRadio Name="rate" Value="CaseResponseLevelType.STAT" />Stat
                                    <InputRadio Name="rate" Value="CaseResponseLevelType.OC" />Over Coffee
                                    @*<InputRadio Name="rate" Value="CaseResponseLevelType.LOW" />Low*@
                                </InputRadioGroup>

                                @*
                                <div>Priority</div>
                                <label>
                                <InputRadio name="rate" SelectedValue="0" @bind-Value="@priorityRadio.Priority" />
                                High
                                </label>
                                <label>
                                <InputRadio name="rate" SelectedValue="1" @bind-Value="@priorityRadio.Priority" />
                                Medium
                                </label>
                                <label>
                                <InputRadio name="rate" SelectedValue="2" @bind-Value="@priorityRadio.Priority" />
                                Low
                                </label>*@
                            </div>
                            <div class="form-group">
                                <div>Patient Age</div>
                                <InputNumber class="form-control" required placeholder="Age" @bind-Value="@pCase.PatientAge" />
                            </div>

                            @*add other fields*@
                            <div class=" mb-3">
                                <div class="row">
                                    <div class="col">
                                        <label for="Category">Category</label>
                                        @*<InputSelect id="Category" @bind-Value="@bCategory" onchange=@UpdateSubCategory>
                                        @foreach (var g in CategoryList)
                                        {
                                        <option value="@g.Value">@g.Text</option>
                                        }
                                        </InputSelect>*@
                                        @* @if (ParseCategoryValueFromSub(pCase.MedicalCategory) == "0")
                                        {
                                            <select id="Category" @onchange=@UpdateSubCategory>
                                                <option value="0" selected>Diagnostics</option>
                                                <option value="1">Medicine</option>
                                                <option value="2">Surgery</option>
                                            </select>
                                        }
                                        else
                                        {
                                            if (ParseCategoryValueFromSub(pCase.MedicalCategory) == "1")
                                            {
                                                <select id="Category" @onchange=@UpdateSubCategory>
                                                    <option value="0">Diagnostics</option>
                                                    <option value="1" selected>Medicine</option>
                                                    <option value="2">Surgery</option>
                                                </select>
                                            }
                                            else
                                            {
                                                <select id="Category" @onchange=@UpdateSubCategory>
                                                    <option value="0" selected>Diagnostics</option>
                                                    <option value="1">Medicine</option>
                                                    <option value="2" selected>Surgery</option>
                                                </select>
                                            }
                                        } *@

                                    </div>
                                    <div class="col">
                                        <label for="SubCategory">Sub-Category</label>
                                        <InputSelect id="SubCategory" @bind-Value="@bSubCategory">
                                            @foreach (var h in SubCategoryList)
                                            {
                                                <option value="@h.Value">@h.Text</option>
                                            }
                                            /**/


                                        </InputSelect>
                                    </div>
                                </div>

                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Gender">Gender</label>
                                <InputSelect id="Gender" @bind-Value="@bGender">
                                    @foreach (var i in GenderList)
                                    {
                                        <option value="@i.Value">@i.Text</option>
                                    }
                                    /**/

                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Race">Race</label>
                                <InputSelect id="Race" @bind-Value="@bRace">
                                    @foreach (var j in RaceList)
                                    {
                                        <option value="@j.Value">@j.Text</option>
                                    }
                                    /**/


                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>
                            <div class=" mb-3">
                                <label for="Ethnicity">Ethnicity</label>
                                <InputSelect id="Ethnicity" @bind-Value="@bEthnicity">
                                    @foreach (var k in EthnicityList)
                                    {
                                        <option value="@k.Value">@k.Text</option>
                                    }
                                    /**/

                                </InputSelect>
                                <div class="small text-muted">
                                    You can change this later
                                </div>
                            </div>

                            <div>Lab Values</div>
                            <div class="form-group">
                                <InputTextArea class="form-control" placeholder="Lab Values" @bind-Value="@pCase.LabValues" row="12" />
                            </div>
                            <div>Current Stage of Disease</div>
                            <div class="form-group">
                                <InputTextArea class="form-control" placeholder="Current Stage of Disease" @bind-Value="@pCase.CurrentStageOfDisease" row="12" />
                            </div>
                            <div>Current Treatment Administered</div>
                            <div class="form-group">
                                <InputTextArea class="form-control" placeholder="Current Treatment Administered" @bind-Value="@pCase.CurrentTreatmentAdministered" row="12" />
                            </div>
                            <div>Treatment Outcomes</div>
                            <div class="form-group">
                                <InputTextArea class="form-control" placeholder="Treatment Outcomes" @bind-Value="@pCase.TreatmentOutcomes" row="12" />
                            </div>
                            <div>
                                @*<ImgUpload @bind-fileName="fileName" @bind-imgUrl="imgUrl"></ImgUpload>*@

                                @*<TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl" OnChangeCallback="@UpdateImgUrl" ></TestMultiImg>*@
                                <TestMultiImg @bind-fileName="fileName" @bind-imgUrl="imgUrl"></TestMultiImg>

                            </div>
                            <div class="form-group">
                                @if (tagList != null)
                                {
                                    <div>
                                        @foreach (var tag in tagList)
                                        {
                                            <div class="tag-item">
                                                @tag.Tag <button class="x" @onclick="(e => { deleteTag(tag); })">
                                                    x
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="form-group">
                                <div class="input-group">
                                    <InputText name="tagField" class="form-control" id="" placeholder="Add tag(s) to your post" @bind-Value="@newTag.Tag" aria-label="Tags" aria-describedby="Add tags" @onkeydown="@enterPressHandle" />
                                    <div class="input-group-append">
                                        <button id="comment-button" type="submit" class="btn btn-primary" @onclick="@addNewTag">Add</button>
                                    </div>
                                </div>
                            </div>
                            <div class="tag-error">
                                @TagFieldErrorMessage
                            </div>

                            <br />
                            <div>
                                @if (userId == pCase.PosterID)
                                {
                                    <div class="mx-4 d-flex justify-content-between">

                                        @if (pCase.Status)
                                        {
                                            <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@CloseCase">Close Case</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="@CloseCase">Reopen Case</button>
                                        }


                                    </div>
                                }
                            </div>
                            <br />
                            <hr />

                            <br />
                            <div class="mx-4 d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                                <button id="create-button" type="submit" class="btn btn-primary" @onclick="Submitted">Save</button>
                            </div>
                        </div>

                    </EditForm>


                </div>
            </div>

        </div>

    </Authorized>
    <NotAuthorized>

        <div class="ft-main-px">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="offset-md-3 col-md-6 offset-md-3 text-center">
                            <br /><br />
                            <div class="mb-3 ms-fontWeight-semibold ms-fontSize-24 ">Need To Sign In!</div>
                            <br /><br />
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int caseId { get; set; } = -1;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    @*private AppUser userInfo { get; set; } = new AppUser();*@

    private bool hasError { get; set; } = false;
    private int status { get; set; } = 0;

    private bool isOwner { get; set; } = false;
    private string returnUrl { get; set; } = "/viewcase/";
    private Case InputModel { get; set; } = new Case();
    private bool isCaseClose = false;

    private FilterModel filters { get; set; } = new FilterModel();
    public class FilterModel
    {
        public bool showClosed { get; set; } = false;
        public string SubCategory { get; set; } = "-1";
    }

    private ParsedCase pCase { get; set; } = new ParsedCase();

    private List<SelectListItem> specialtyList { get; set; }

    //private List<SelectListItem> CategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> GenderList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> RaceList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> EthnicityList { get; set; } = new List<SelectListItem>();
    private List<SelectListItem> SubCategoryFilterList { get; set; } = new List<SelectListItem>(){
            new SelectListItem { Value = "-1", Text = "No Filters" }
            };

    private string bCategory { get; set; } = "0";
    private string bSubCategory { get; set; } = "0";
    private string bGender { get; set; } = "0";
    private RaceType bRace { get; set; } = RaceType.UNKNOWN;
    private EthnicityType bEthnicity { get; set; } = EthnicityType.UNKNOWN;
    @*private AppUser usr { get; set; }*@

    private string debug { get; set; } = "";
    private Case tCase = null;
    private const int MAXTAGS = 25;
    private bool isSubmitted = false;
    private CaseTags newTag = new CaseTags();
    public List<CaseTags> tagList = new List<CaseTags>();
    private bool isDeleteTag = false;
    private string TagFieldErrorMessage = "";
    private bool isTagOk = true;


    private PriorityModel priorityRadio = new PriorityModel();
    public class PriorityModel
    {
        [Range(0, 2)]
        public CaseResponseLevelType Priority { get; set; }
    }
    [EnumDataType(typeof(CaseResponseLevelType))]
    public CaseResponseLevelType Priority { get; set; } = CaseResponseLevelType.STAT;

    private string fileName;
    private string imgUrl;
    @*private string originalImgUrl;*@

    private int userId = -1;
    private string posterSpeciality = "";
    private string fullName = "";

    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            @*userInfo = await UserManager.GetUserAsync(user);*@

            try
            {

                userId = Int32.Parse(user.Claims.FirstOrDefault(s => s.Type == "PublicId")?.Value);
            }
            catch (FormatException e)
            {
                Console.WriteLine(e.Message);
            }



       
            returnUrl = returnUrl + caseId;

            tCase = await hService.GetCaseNoTracking(caseId);
            if (tCase == null)
            {
                // didn't find it, should flag for error
                return;
            }
            await PopulateModel(tCase);
            tagList = await hService.GetTagsNoTracking(caseId);
            isDeleteTag = true;
            //pCase.Comments = await hService.GetCommentsNoTracking(caseId);

            fileName = "c" + pCase.ID;
            imgUrl = tCase.imgUrl;
            @*originalImgUrl = imgUrl;*@
        }
        else
        {
            // shouldn't get here
        }

    }
    private async Task enterPressHandle(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            isDeleteTag = false;
        }
    }
    private bool ContainsOnlyAlphaNumericCharacters(string inputString)
    {
        var regexItem = new Regex("^(?![0-9._])(?!.*[_]$)[a-zA-Z0-9_]+$");
        return regexItem.IsMatch(inputString);
    }
    private async Task addNewTag()
    {
        if (tagList.Count == MAXTAGS)
        {
            await displayErrorMessage("Warning: Too many tags, the limit is 25 tags");
        }

        else if (!string.IsNullOrWhiteSpace(newTag.Tag))
        {

            if (!ContainsOnlyAlphaNumericCharacters(newTag.Tag))
            {
                await displayErrorMessage("Warning: A Tag should begin with a letter and can only contain letters, numbers, and underscores (_), no special characters");
            }
            else
            {
                foreach (var item in tagList)
                {
                    if (item.Tag == newTag.Tag)
                    {
                        string text = "Warning: Tag [" + newTag.Tag + "] already exist. Please add a different tag.";
                        isTagOk = false;
                        await displayErrorMessage(text);
                        break;
                    }
                    else
                    {
                        isTagOk = true;
                    }
                }
                if (tagList.Count == 0)
                {
                    isTagOk = true;
                }
                if (isTagOk)
                {
                    authState = await authenticationStateTask;
                    user = authState.User;

                    if (user.Identity.IsAuthenticated)
                    {
                        CaseTags tagItem = new CaseTags();
                        tagItem.ID = DateTime.Now;
                        tagItem.CaseID = pCase.ID;
                        tagItem.Tag = newTag.Tag;
                        tagList.Add(tagItem);
                        await hService.AddTag(tagItem);

                        @*                    usr = await UserManager.GetUserAsync(user);
							if (usr != null)
							{
							CaseTags tagItem = new CaseTags();
							tagItem.ID = DateTime.Now;
							tagItem.CaseID = pCase.ID;
							tagItem.Tag = newTag.Tag;
							tagList.Add(tagItem);
							await hService.AddTag(tagItem);
							}*@
                    }
                    newTag.Tag = "";
                    isDeleteTag = true;
                    TagFieldErrorMessage = "";
                    this.StateHasChanged();
                }
            }
        }
        else
        {
            await displayErrorMessage("Warning: you cannot add empty tag");
        }

    }

    private async Task Submitted()
    {
        isSubmitted = true;
    }
    private async Task deleteTag(CaseTags Tag)
    {

        if (tagList.Contains(Tag) && isDeleteTag)
        {
            tagList.Remove(Tag);
            await hService.DeleteTag(Tag);

        }
        else if (!isDeleteTag)
        {
            addNewTag();
        }
        isDeleteTag = true;

    }

    private async Task displayErrorMessage(string message)
    {
        TagFieldErrorMessage = message;
        this.StateHasChanged();
    }
    private async Task Cancel()
    {
        NavigationManager.NavigateTo(returnUrl);
    }

    @*private async Task UpdateImgUrl(ChangeEventArgs e)
		{
		Console.WriteLine("UpdateImgUrl executed");

		var usr = await UserManager.GetUserAsync(user);

		tCase.PosterName = pCase.PosterName;
		tCase.PosterSpecialty = pCase.PosterSpecialty;
		tCase.Race = pCase.Race;
		tCase.Gender = pCase.Gender;
		tCase.Ethnicity = pCase.Ethnicity;
		tCase.MedicalCategory = pCase.MedicalCategory;
		tCase.ResponseNeeded = pCase.ResponseNeeded;
		tCase.imgUrl = imgUrl;

		// copy back to tCase

		tCase.Description = pCase.Description;
		tCase.Topic = pCase.Topic;

		tCase.PatientAge = pCase.PatientAge;
		tCase.CurrentStageOfDisease = pCase.CurrentStageOfDisease;
		tCase.CurrentTreatmentAdministered = pCase.CurrentTreatmentAdministered;
		tCase.TreatmentOutcomes = pCase.TreatmentOutcomes;
		tCase.LabValues = pCase.LabValues;
		tCase.Status = pCase.Status;

		await hService.EditCase(tCase);

		}*@

    private async Task UpdateCase()
    {
        if (isSubmitted)
        {
            PostHistory newHistory = new PostHistory();
            @*var usr = await UserManager.GetUserAsync(user);*@

            tCase.PosterName = fullName;
            tCase.PosterSpecialty = posterSpeciality;//ParseMedicalSpecialty((MedicalSpecialtyType)usr.MedicalSpecialty);
            tCase.Race = bRace;
            //tCase.Gender = Int32.Parse(bGender);
            tCase.Ethnicity = bEthnicity;
           // tCase.MedicalCategory = Int32.Parse(bSubCategory);
            @*tCase.ResponseNeeded = priorityRadio.Priority;*@
            tCase.ResponseNeeded = Priority;
            tCase.imgUrl = imgUrl;

            // copy back to tCase

            tCase.Description = pCase.Description;
            tCase.Topic = pCase.Topic;

            tCase.PatientAge = pCase.PatientAge;
            tCase.CurrentStageOfDisease = pCase.CurrentStageOfDisease;
            tCase.CurrentTreatmentAdministered = pCase.CurrentTreatmentAdministered;
            tCase.TreatmentOutcomes = pCase.TreatmentOutcomes;
            tCase.LabValues = pCase.LabValues;
            tCase.Status = pCase.Status;

            await hService.EditCase(tCase);
            if (isCaseClose)
            {
                await addToHistory("closed a case");
            }
            else
            {
                await addToHistory("edited a case");
            }


            NavigationManager.NavigateTo(returnUrl);
        }

    }

    private async Task CloseCase()
    {

        //debug = "Case Closed";
        isCaseClose = !isCaseClose;
        await hService.CloseCase(pCase.ID);
        pCase.Status = !pCase.Status;

        this.StateHasChanged();

    }
    private async Task addToHistory(string historyType)
    {
    //history stuffs
        @*var usr = await UserManager.GetUserAsync(user);*@
        PostHistory newHistory = new PostHistory();
        newHistory.ID = 0;
        newHistory.PostID = caseId;
        newHistory.CreationDate = DateTime.Now;
        newHistory.PosterID = userId;
        newHistory.UserDisplayName = fullName;
        newHistory.Title = pCase.Topic;
        newHistory.Detail = pCase.Description;
        newHistory.HistoryTypes = historyType;
        await hService.AddHistory(newHistory);
    }

    private async Task PopulateModel(Case tCase)
    {
        pCase = tCase.ToParsedCase();
        priorityRadio = new PriorityModel();
        priorityRadio.Priority = tCase.ResponseNeeded;
       // bCategory = ParseCategoryValueFromSub(tCase.MedicalCategory);
        bSubCategory = tCase.MedicalCategory.ToString();
      //  await SwitchSubCategory(bCategory);
        bGender = tCase.Gender.ToString();
        bEthnicity = tCase.Ethnicity;
        bRace = tCase.Race;

    }


}

