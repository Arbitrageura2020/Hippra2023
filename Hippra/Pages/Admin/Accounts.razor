@using Hippra
@using Hippra.Pages.Common
@using Hippra.Models.Enums
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject IOptions<AppSettings> settings
@inject ProfileService pService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized>
        @if (isAdmin)
        {
            <br />
            <br />
            <h1 class="display-4">Approve Accounts</h1>
            <br />
            <br />
            <hr />
            <br />
            <div>
                @if (notApprovedUserList?.Count > 0)
                {

                    <table class="table table-striped table-dark">
                        <thead>
                            <tr>
                                <th scope="col">Email</th>
                                <th scope="col">First Name</th>
                                <th scope="col">Last Name</th>
                                <th scope="col">Medical Specialty</th>
                                <th scope="col">Education/Degree</th>
                                <th scope="col">National Provider Identifier Number</th>
                                <th scope="col">Approval</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in notApprovedUserList)
                            {
                                <tr>

                                    <th scope="row">@user.Email</th>
                                    <td>@user.FirstName</td>
                                    <td>@user.LastName</td>
                                    <td>@user.MedicalSpecialty</td>
                                    <td>@user.EducationDegree.</td>
                                    <td>@user.NPIN</td>
                                    @*<td><input type="submit" value="Approve" asp-route-publicId="@user.PublicId" /></td>*@
                                    <td>

                                        <button type="button" class="btn btn-outline-light mr-2" @onclick="(e=>Approve(user.PublicId))">Approve</button>
                                        <button type="button" class="btn btn-outline-light" @onclick="(e=>Deny(user.PublicId))">Deny</button>

                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>

                }
                else
                {
                    <br />
                    <p>No outstanding Accounts waiting for approval!</p>
                }


            </div>

        }
        else
        {
            <p class="lead">Nothing to see here...</p>
        }
    </Authorized>
    <NotAuthorized>
        <p class="lead">Nothing to see here...</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private bool isAdmin { get; set; } = false;

    private List<AppUser> notApprovedUserList { get; set; }



    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var claimEmail = user.Claims.FirstOrDefault(s => s.Type == "NormalizedEmail")?.Value;
            if (claimEmail == settings.Value.FTManagerUsr.ToUpper()||claimEmail == settings.Value.SupervisorUsr.ToUpper() )
            {
                isAdmin = true;
                notApprovedUserList = await pService.GetProfiles();

            }
            @*var usr = await UserManager.GetUserAsync(user);
            if (usr.NormalizedEmail == settings.Value.FTManagerUsr.ToUpper())
            {
                isAdmin = true;
                notApprovedUserList = await pService.GetProfiles();

            }*@
        }
    }

    private async Task Approve(int id)
    {
        await pService.ApproveAccount(id);
        notApprovedUserList = await pService.GetProfiles();
        this.StateHasChanged();
    }
    private async Task Deny(int id)
    {
        await pService.DeleteAccount(id);
        notApprovedUserList = await pService.GetProfiles();
        this.StateHasChanged();
    }
}
