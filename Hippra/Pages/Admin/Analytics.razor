@page "/analytics"
@using Hippra
@using Hippra.Models.Enums
@using Hippra.Services
@using Hippra.Models.SQL
@using Hippra.Models.POCO
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using System.Security.Claims
@*@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager*@
@inject IOptions<AppSettings> settings
@inject ProfileService pService
@inject HippraService hService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

<AuthorizeView>
    <Authorized>
        @if (isAdmin)
        {
            <br />
            <br />
            <h1 class="display-4">Accounts Analytics </h1>
            <br />
            <br />
            <hr />
            <br />

            <div>
                <strong>Number of users</strong> @NumOfUsers
                <br />
                <div class="lead">Users</div>
                <hr />
@*                @foreach (var i in UserNameList)
                {
                    <div>@i</div>
                    }*@
                    <div class="row">
                        <div class="col-md-4">
                            User Name
                        </div>

                        <div class="col-md-4">
                            # of Posts
                        </div>
                        <div class="col-md-4">
                            # of Comments
                        </div>
                    </div>
                @foreach (var i in UserReports)
                {
                   <div class="row">
                        <div class="col-md-4">
                           @i.UserName
                        </div>

                        <div class="col-md-4">
                            @i.NumCase
                        </div>
                        <div class="col-md-4">
                            @i.NumComments
                        </div>
                    </div>
                }
            </div>

        }
        else
        {
            <p class="lead">Nothing to see here...</p>
        }
    </Authorized>
    <NotAuthorized>
        <p class="lead">Nothing to see here...</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }
    private bool isAdmin { get; set; } = false;

    private List<AppUser> notApprovedUserList { get; set; }
    private int NumOfUsers { get; set; } = 0;
    private List<string> UserNameList { get; set; } = new List<string>();

    private List<UserReport> UserReports { get; set; } = new List<UserReport>();


    protected override async Task OnInitializedAsync()
    {
        authState = await authenticationStateTask;
        user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var claimEmail = user.Claims.FirstOrDefault(s => s.Type == "NormalizedEmail")?.Value;
            if (claimEmail == settings.Value.FTManagerUsr.ToUpper()||claimEmail == settings.Value.SupervisorUsr.ToUpper() )
            {
                isAdmin = true;
                notApprovedUserList = await pService.GetProfiles();
                NumOfUsers = await pService.GetUserCount();
                UserNameList = await pService.GetUserNameList();
                UserReports = await pService.GetUserReport();
                foreach(var userReport in UserReports)
                {
                    userReport.NumCase = await hService.GetMyCaseCount(userReport.PublicId);
                    // userReport.NumComments = await hService.GetCommentCount(userReport.PublicId);
                }
            }
 @*           var usr = await UserManager.GetUserAsync(user);
            if (usr.NormalizedEmail == settings.Value.FTManagerUsr.ToUpper())
            {
                isAdmin = true;
                notApprovedUserList = await pService.GetProfiles();
                NumOfUsers = await pService.GetUserCount();
                UserNameList = await pService.GetUserNameList();
            }*@
        }
    }

    private async Task Approve(int id)
    {
        await pService.ApproveAccount(id);
        notApprovedUserList = await pService.GetProfiles();
        this.StateHasChanged();
    }
    private async Task Deny(int id)
    {
        await pService.DeleteAccount(id);
        notApprovedUserList = await pService.GetProfiles();
        this.StateHasChanged();
    }
}
